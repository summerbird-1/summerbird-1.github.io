<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>项目同步Github仓库</title>
      <link href="/2023/11/22/%E9%A1%B9%E7%9B%AE%E5%90%8C%E6%AD%A5Github%E4%BB%93%E5%BA%93/"/>
      <url>/2023/11/22/%E9%A1%B9%E7%9B%AE%E5%90%8C%E6%AD%A5Github%E4%BB%93%E5%BA%93/</url>
      
        <content type="html"><![CDATA[<p>把项目同步到github需要几步，即答：”散步!”🪅</p><h4 id="1、登录建一个仓库，取个名字🙉"><a href="#1、登录建一个仓库，取个名字🙉" class="headerlink" title="1、登录建一个仓库，取个名字🙉"></a>1、登录建一个仓库，取个名字🙉</h4><img src="/2023/11/22/%E9%A1%B9%E7%9B%AE%E5%90%8C%E6%AD%A5Github%E4%BB%93%E5%BA%93/image-20231122164531908.png" class="" title="image-20231122164531908"><h4 id="2、绑定用户，设置ssh-Key🍖"><a href="#2、绑定用户，设置ssh-Key🍖" class="headerlink" title="2、绑定用户，设置ssh Key🍖"></a>2、绑定用户，设置ssh Key🍖</h4><p>如果以前干过这种事，应该就不用再做了</p><p>最好先去<code>C:\Users\Y\ .ssh</code>文件夹下找找</p><p>找到一个叫<code>id_rsa.pub</code>的文件，复制，打开<code>github-&gt;setting-&gt;SSH and GPG keys-&gt;New SSH key</code></p><img src="/2023/11/22/%E9%A1%B9%E7%9B%AE%E5%90%8C%E6%AD%A5Github%E4%BB%93%E5%BA%93/image-20231122165143208.png" class="" title="image-20231122165143208"><p>复制进去添加即可</p><p>如果没有就得自己生成</p><p>打开git Bush,自己找教程装，输入<code>$ ssh-keygen -t rsa -C “xxxxxx@163.com”</code>这个邮箱是你的github绑定的邮箱才行</p><p>然后再去刚才的文件夹下找，执行后面的复制步骤即可</p><h4 id="3、将项目推送到仓库㊙️"><a href="#3、将项目推送到仓库㊙️" class="headerlink" title="3、将项目推送到仓库㊙️"></a>3、将项目推送到仓库㊙️</h4><p>进入项目文件夹，把前后端项目都放在一个文件夹下，打开git，然后按顺序执行</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">git initgit add .git commit -m "first commit"git branch -M maingit remote add origin https://github.com/summerbird-1/TodoApp.gitgit push -u origin main<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>依次输入上述指令完成第一次推送。</p><h4 id="4、后续项目更新推送🥳"><a href="#4、后续项目更新推送🥳" class="headerlink" title="4、后续项目更新推送🥳"></a>4、后续项目更新推送🥳</h4><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">git add “更改后的文件” /* 将更改后的文件添加到仓库中 */git commit -m "first commit" /* 为仓库的文件写一句注释 */git pull /* 同步获取GitHub远程仓库最新代码 */git push -u origin main /* 上传项目代码到GitHub仓库的main分支 */<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>一般为</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">git add .git commit -m "备注"git pullgit push -u origin main<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h4 id="后记"><a href="#后记" class="headerlink" title="后记"></a><del>后记</del></h4><p><del>想同时同步到gitee和github的怎么办，首先创建gitee仓库，然后进入项目文件夹下的git文件夹，里面有个config文件，打开</del></p><p><del>修改</del></p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml">[remote "origin"]url = git@github.com:summerbird-1/TodoApp.gitfetch = +refs/heads/*:refs/remotes/origin/*[branch "main"]remote = originmerge = refs/heads/main<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><del>修改后</del></p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml">[remote "origin"]url = git@github.com:summerbird-1/TodoApp.giturl = https://gitee.com/zhang-junzhao/todo-app.gitfetch = +refs/heads/*:refs/remotes/origin/*[branch "main"]remote = originmerge = refs/heads/main<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="注意"><a href="#注意" class="headerlink" title="注意"></a><del>注意</del></h5><p><del>由于gitee的初始分支名为master，所以要自己创建一个名为main的分支</del></p><p><del>然后正常推送，就会同时推送到两个仓库</del></p>]]></content>
      
      
      <categories>
          
          <category> git </category>
          
      </categories>
      
      
        <tags>
            
            <tag> GitHub </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>贪心问题</title>
      <link href="/2023/11/22/%E8%B4%AA%E5%BF%83%E9%97%AE%E9%A2%98/"/>
      <url>/2023/11/22/%E8%B4%AA%E5%BF%83%E9%97%AE%E9%A2%98/</url>
      
        <content type="html"><![CDATA[<h3 id="一、区间选点🅰️"><a href="#一、区间选点🅰️" class="headerlink" title="一、区间选点🅰️"></a>一、区间选点🅰️</h3><p>Description</p><p>给定 ( N ) 个闭区间 ([a_i, b_i])，需要在数轴上选择尽可能少的点，以确保每个区间内至少包含一个选出的点。位于区间端点上的点也算作区间内。</p><p>Input</p><ul><li>第一行包含整数 ( N )，表示区间数量。</li><li>接下来的 ( N ) 行，每行包含两个整数 ( a_i, b_i )，表示一个区间的两个端点。</li></ul><p>数据范围</p><ul><li>( 1 &lt;= N &lt;= 10^5 )</li><li>( -10^9 &lt;= a_i &lt;= b_i &lt;= 10^9 )</li></ul><p>Output</p><ul><li>输出一个整数，表示所需选择的点的最小数量。</li></ul><p>Sample Input 1 </p><pre class="line-numbers language-none"><code class="language-none">3-1 12 43 5<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>Sample Output 1</p><pre class="line-numbers language-none"><code class="language-none">2<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h4><p>先用一个结构体存储起点和终点，用<code>cnt</code>记录选点的数量</p><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">struct node{    int a_i;    int b_i};<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>按终点从小到大排序（为什么不按照起点从大到小排序？）因为区间按照右端点排序后，每一个 <code>选点</code> 都是没有被覆盖的区间右端点，则说明这 <code>选点</code> 个区间是两两不交的，则<strong>至少需要 <code>cnt</code> 个选点才能将这些两两不交的区间进行覆盖</strong></p><p>排序后，判断只要下一个区间的起点小于当前区间的终点，<code>cnt</code>就不用加1</p><h4 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h4><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">#include &lt;iostream&gt;#include &lt;cstdio&gt;#include &lt;algorithm&gt;using namespace std;// 尽量帮助后面的线段，因此点尽量往后放// 寻找第一个点，需要找第一个结束的线段，因此按照结束先后排序// 每寻找到一个点，可以将其可以覆盖的线段去掉struct node {    int b, e;};node a[100005];bool cmp(node a, node b) {    return a.e &lt; b.e;}int main() {    int n;    cin &gt;&gt; n;    for (int i = 1; i &lt;= n; i++)        cin &gt;&gt; a[i].b &gt;&gt; a[i].e;    sort(a + 1, a + 1 + n, cmp);    int cnt = 0;    int be = -2e9;    for (int i = 1; i &lt;= n; i++) {        //处理能被帮助的线段        while (i &lt;= n &amp;&amp; a[i].b &lt;= be)            i++;        if (i &gt; n)            break;        //找下一个点        cnt++;        be = a[i].e;    }    cout &lt;&lt; cnt &lt;&lt; endl;    return 0;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="二、区间覆盖"><a href="#二、区间覆盖" class="headerlink" title="二、区间覆盖"></a>二、区间覆盖</h3><p>Description</p><p>给定 N 个闭区间 [a_i, b_i] 以及一个指定的线段区间 [s, t] ，需要选择尽可能少的区间来完全覆盖指定的线段区间。</p><p>Input</p><ul><li>第一行包含两个整数 ( s ) 和 ( t )，表示给定线段区间的两个端点。</li><li>第二行包含整数 ( N )，表示给定的区间数量。</li><li>接下来的 ( N ) 行，每行包含两个整数 ( a_i, b_i )，表示一个区间的两个端点。</li></ul><p>数据范围：</p><ul><li>( 1 &lt;= N &lt;= 10^5 )</li><li>( -10^9 &lt;= a_i &lt;= b_i &lt;= 10^9 )</li><li>( -10^9 &lt;= s &lt;= t &lt;= 10^9 )</li></ul><p>Output</p><ul><li>输出一个整数，表示所需的最少区间数。</li><li>如果无法完全覆盖给定的线段区间，则输出 (-1)。</li></ul><p>Sample Input 1 </p><pre class="line-numbers language-none"><code class="language-none">1 53-1 32 43 5<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>Sample Output 1</p><pre class="line-numbers language-none"><code class="language-none">2<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="思路-1"><a href="#思路-1" class="headerlink" title="思路"></a>思路</h4><h4 id="代码-1"><a href="#代码-1" class="headerlink" title="代码"></a>代码</h4><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">#include &lt;iostream&gt;#include &lt;algorithm&gt;using namespace std;struct node{    int s, e;};node a[100010];bool cmp(node a, node b){    return a.s &lt; b.s;}int main(){    int s, t, N;    cin &gt;&gt; s &gt;&gt; t &gt;&gt; N;    for (int i = 1; i &lt;= N; i++)    {        cin &gt;&gt; a[i].s &gt;&gt; a[i].e;    }    sort(a + 1, a + N + 1, cmp);    int cnt = 0;    int temp = s;    bool flag = true;    for (int i = 1; i &lt;= N; i++)    {        // 寻找满足要求，右端点最远的区间        int maxRight = -2e9;        int j = i;        while (j &lt;= N &amp;&amp; a[j].s &lt;= temp)        {            maxRight = max(maxRight, a[j].e);            j++;        }        if (maxRight &lt; temp) // 没有找到满足题意的区间，退出循环        {            flag = false;            break;        }        else        {            temp = maxRight; // 更新右端点            cnt++;            if (temp &gt;= t) // 找到了满足题意的区间，退出循环            {                flag = true;                break;            }        }    }    if (flag)        cout &lt;&lt; cnt &lt;&lt; endl;    else        cout &lt;&lt; "-1" &lt;&lt; endl;    return 0;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>三、数列分段</p><p>Description</p><p>给定一个长度为 ( N ) 的正整数数列 ( A_i )，需要将其分割成若干连续的子段，使得每个子段的元素和不超过 ( M )（可以等于 ( M )）。目标是找出最少能将数列分成多少段，以满足上述条件。</p><p>Input</p><ul><li>第一行包含两个正整数 ( N, M )，分别表示数列 ( A_i ) 的长度和每段的最大和。</li><li>第二行包含 ( N ) 个由空格隔开的非负整数 ( A_i )。</li></ul><p>数据范围：</p><ul><li>( 1 &lt;= N &lt;= 10^5 )</li><li>( 1 &lt;= M &lt;= 10^9 )</li><li>( 1 &lt;= A_i &lt;= M )</li></ul><p>Output</p><ul><li>输出一个正整数，表示最少划分的段数。</li></ul><p>Sample Input 1 </p><pre class="line-numbers language-none"><code class="language-none">5 64 2 4 5 1<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>Sample Output 1</p><pre class="line-numbers language-none"><code class="language-none">3<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>思路</p><p>代码</p><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++"><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Algorithm </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 贪心 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>数组刷题</title>
      <link href="/2023/11/20/%E6%95%B0%E7%BB%84%E5%88%B7%E9%A2%98/"/>
      <url>/2023/11/20/%E6%95%B0%E7%BB%84%E5%88%B7%E9%A2%98/</url>
      
        <content type="html"><![CDATA[<h4 id="菜鸡刷力扣🐔"><a href="#菜鸡刷力扣🐔" class="headerlink" title="菜鸡刷力扣🐔"></a>菜鸡刷力扣🐔</h4><h2 id="704-二分查找"><a href="#704-二分查找" class="headerlink" title="704. 二分查找"></a><a href="https://leetcode.cn/problems/binary-search/">704. 二分查找</a></h2><p>给定一个 <code>n</code> 个元素有序的（升序）整型数组 <code>nums</code> 和一个目标值 <code>target</code> ，写一个函数搜索 <code>nums</code> 中的 <code>target</code>，如果目标值存在返回下标，否则返回 <code>-1</code>。<br><strong>示例 1:</strong></p><pre class="line-numbers language-none"><code class="language-none">输入: nums = [-1,0,3,5,9,12], target = 9输出: 4解释: 9 出现在 nums 中并且下标为 4<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p><strong>示例 2:</strong></p><pre class="line-numbers language-none"><code class="language-none">输入: nums = [-1,0,3,5,9,12], target = 2输出: -1解释: 2 不存在 nums 中因此返回 -1<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p><strong>提示：</strong></p><ol><li>你可以假设 <code>nums</code> 中的所有元素是不重复的。</li><li><code>n</code> 将在 <code>[1, 10000]</code>之间。</li><li><code>nums</code> 的每个元素都将在 <code>[-9999, 9999]</code>之间。</li></ol><h4 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h4><p>二分查找，一看就会，一写就费</p><p>while(i &lt; j) 还是 while(i &lt;= j) ?</p><p>判断条件后 right = mid - 1 还是 right = mid ？</p><p>先来区间左闭右闭的情况，何为左闭右闭？对于这个题，left  = 0，right = nums.size() - 1;这种就是左闭右闭</p><p>left = 0，right = nums.size() 就是左闭右开</p><p>一般不讨论左开右闭</p><h4 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h4><p>先看左闭右闭代码</p><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">class Solution {public:    int search(vector&lt;int&gt;&amp; nums, int target) {             int l= 0, r = nums.size()-1;             while(l &lt;= r){                //l，r都有意义，所以相等的情况也要考虑              int mid = (l + r) / 2;                 if(nums[mid] &lt; target)                 l = mid + 1;              //维持左闭右闭的情况              else if(nums[mid] &gt; target)                 r = mid - 1;               //维持左闭右闭的情况              else               {                  return mid;              }             }        return -1;    }};<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>左闭右开</p><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">class Solution {public:    int search(vector&lt;int&gt;&amp; nums, int target) {             int l= 0, r = nums.size();             while(l &lt; r){         //r是无意义的，所以不用考虑l=r的情况              int mid = (l + r) / 2;              if(nums[mid] &lt; target)                 l = mid + 1;     //维持左闭              else if(nums[mid] &gt; target)                 r = mid;        //维持右开              else               {                  return mid;              }             }        return -1;    }};<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="27-移除元素"><a href="#27-移除元素" class="headerlink" title="27. 移除元素"></a><a href="https://leetcode.cn/problems/remove-element/">27. 移除元素</a></h2><p><code>数组</code> &amp;&amp;<code>双指针</code></p><p>给你一个数组 <code>nums</code> 和一个值 <code>val</code>，你需要 <strong><a href="https://baike.baidu.com/item/%E5%8E%9F%E5%9C%B0%E7%AE%97%E6%B3%95">原地</a></strong> 移除所有数值等于 <code>val</code> 的元素，并返回移除后数组的新长度。</p><p>不要使用额外的数组空间，你必须仅使用 <code>O(1)</code> 额外空间并 <strong><a href="https://baike.baidu.com/item/%E5%8E%9F%E5%9C%B0%E7%AE%97%E6%B3%95">原地 </a>修改输入数组</strong>。</p><p>元素的顺序可以改变。你不需要考虑数组中超出新长度后面的元素。</p><p><strong>示例 1：</strong></p><pre class="line-numbers language-none"><code class="language-none">输入：nums = [3,2,2,3], val = 3输出：2, nums = [2,2]解释：函数应该返回新的长度 2, 并且 nums 中的前两个元素均为 2。你不需要考虑数组中超出新长度后面的元素。例如，函数返回的新长度为 2 ，而 nums = [2,2,3,3] 或 nums = [2,2,0,0]，也会被视作正确答案。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p><strong>示例 2：</strong></p><pre class="line-numbers language-none"><code class="language-none">输入：nums = [0,1,2,2,3,0,4,2], val = 2输出：5, nums = [0,1,3,0,4]解释：函数应该返回新的长度 5, 并且 nums 中的前五个元素为 0, 1, 3, 0, 4。注意这五个元素可为任意顺序。你不需要考虑数组中超出新长度后面的元素。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h4 id="思路-1"><a href="#思路-1" class="headerlink" title="思路"></a>思路</h4><p>很明显用双指针，只需要把值不是val的数字移到数组前面即可</p><h4 id="代码-1"><a href="#代码-1" class="headerlink" title="代码"></a>代码</h4><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">class Solution {public:    int removeElement(vector&lt;int&gt;&amp; nums, int val) {      int l = 0,r = 0;      for(int i = 0;i &lt; nums.size();i++){          if(nums[i] != val){              nums[l] = nums[r];              l++;              r++;          }else          r++;      }       return l;    }       };<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="977-有序数组的平方"><a href="#977-有序数组的平方" class="headerlink" title="977. 有序数组的平方"></a><a href="https://leetcode.cn/problems/squares-of-a-sorted-array/">977. 有序数组的平方</a></h2><p><code>数组</code>&amp;&amp;<code>双指针</code></p><p>给你一个按 <strong>非递减顺序</strong> 排序的整数数组 <code>nums</code>，返回 <strong>每个数字的平方</strong> 组成的新数组，要求也按 <strong>非递减顺序</strong> 排序。</p><p><strong>示例 1：</strong></p><pre class="line-numbers language-none"><code class="language-none">输入：nums = [-4,-1,0,3,10]输出：[0,1,9,16,100]解释：平方后，数组变为 [16,1,0,9,100]排序后，数组变为 [0,1,9,16,100]<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p><strong>示例 2：</strong></p><pre class="line-numbers language-none"><code class="language-none">输入：nums = [-7,-3,2,3,11]输出：[4,9,9,49,121]<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h4 id="思路-2"><a href="#思路-2" class="headerlink" title="思路"></a>思路</h4><p>双指针，一开始我想着从中间往两边扩，其实效率也可以，就是写起来代码不简洁，从两次往中间合代码量小简洁可以对比一下</p><h4 id="代码-2"><a href="#代码-2" class="headerlink" title="代码"></a>代码</h4><p>两边往里合</p><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">class Solution {public:    vector&lt;int&gt; sortedSquares(vector&lt;int&gt;&amp; nums) {          int l = 0,r = nums.size()-1,k = nums.size()-1;          vector&lt;int&gt; res(nums.size(),0);          while(l &lt;= r){              if(nums[l] * nums[l] &lt; nums[r] * nums[r]){                  res[k--] = nums[r] * nums[r];                  r--;              }              else{              res[k--] = nums[l] * nums[l];              l++;              }          }          return res;    }};<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>中间往两边扩</p><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">class Solution {public:    vector&lt;int&gt; sortedSquares(vector&lt;int&gt;&amp; nums) {          vector&lt;int&gt; res;          int i;          for(i = 0;i &lt; nums.size();i++)          {              if(nums[i] &gt;= 0)              break;          }          int j = i-1;          while(j &gt;= 0 &amp;&amp; i &lt; nums.size()){              if(-nums[j] &lt; nums[i])              {                  res.push_back(nums[j] * nums[j]);                  j--;              }              else              {                  res.push_back(nums[i] * nums[i]);                  i++;              }          }          while(j &gt;= 0)          {              res.push_back(nums[j] * nums[j]);                  j--;          }          while(i &lt; nums.size()){               res.push_back(nums[i] * nums[i]);                  i++;          }          return res;    }};<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Algorithm </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数组 </tag>
            
            <tag> Leetcode </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>todo应用编写到部署</title>
      <link href="/2023/11/17/todo%E5%BA%94%E7%94%A8%E7%BC%96%E5%86%99%E5%88%B0%E9%83%A8%E7%BD%B2/"/>
      <url>/2023/11/17/todo%E5%BA%94%E7%94%A8%E7%BC%96%E5%86%99%E5%88%B0%E9%83%A8%E7%BD%B2/</url>
      
        <content type="html"><![CDATA[<h2 id="Springboot-Vue2-0开发简易Todo应用，尝试一键部署㊙️"><a href="#Springboot-Vue2-0开发简易Todo应用，尝试一键部署㊙️" class="headerlink" title="Springboot+Vue2.0开发简易Todo应用，尝试一键部署㊙️"></a>Springboot+Vue2.0开发简易Todo应用，尝试一键部署㊙️</h2><h3 id="一、后端应用🍥"><a href="#一、后端应用🍥" class="headerlink" title="一、后端应用🍥"></a>一、后端应用🍥</h3><h4 id="1、创建Springboot工程"><a href="#1、创建Springboot工程" class="headerlink" title="1、创建Springboot工程"></a>1、创建Springboot工程</h4><p>这个不写了😏  jdk选8 Springboot选2.x.x版本即可</p><h4 id="2、配置pom-xml依赖"><a href="#2、配置pom-xml依赖" class="headerlink" title="2、配置pom.xml依赖"></a>2、配置pom.xml依赖</h4><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependencies</span><span class="token punctuation">&gt;</span></span>       <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>           <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>           <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-boot-starter-web<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>       <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>       <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>           <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>           <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-boot-devtools<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>           <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>scope</span><span class="token punctuation">&gt;</span></span>runtime<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>scope</span><span class="token punctuation">&gt;</span></span>           <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>optional</span><span class="token punctuation">&gt;</span></span>true<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>optional</span><span class="token punctuation">&gt;</span></span>       <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>       <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>           <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.projectlombok<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>           <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>lombok<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>           <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>optional</span><span class="token punctuation">&gt;</span></span>true<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>optional</span><span class="token punctuation">&gt;</span></span>       <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>       <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>           <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>           <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-boot-starter-test<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>           <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>scope</span><span class="token punctuation">&gt;</span></span>test<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>scope</span><span class="token punctuation">&gt;</span></span>       <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>       <span class="token comment">&lt;!--mybatis启动器--&gt;</span>       <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>           <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.mybatis.spring.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>           <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>mybatis-spring-boot-starter<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>           <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>2.2.2<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span>       <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>       <span class="token comment">&lt;!--mysql驱动--&gt;</span>       <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>           <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>mysql<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>           <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>mysql-connector-java<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>           <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>8.0.16<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span>           <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>scope</span><span class="token punctuation">&gt;</span></span>runtime<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>scope</span><span class="token punctuation">&gt;</span></span>       <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependencies</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>mybatis和mysql要用</p><p>3、配置资源文件application.yml</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml">server:  port: 8080#整合Mybatis相关配置spring:  datasource:    url: jdbc:mysql://localhost:3306/mybatis_db?characterEncoding=utf-8&amp;serverTimezone=UTC    username: root    password: 123456    driver-class-name: com.mysql.cj.jdbc.Drivermybatis:  mapper-locations: classpath:mapper/*Mapper.xml          #mapper映射文件路径  type-aliases-package: com.zjz.domain            #配置哪个包下面的类有默认的别名<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="配置项"><a href="#配置项" class="headerlink" title="配置项"></a>配置项</h5><p><code>url: jdbc:mysql://localhost:3306/mybatis_db?characterEncoding=utf-8&amp;serverTimezone=UTC</code></p><p><code>mybatis_db</code>更换为自己的数据库名  </p><p><code>password: 123456</code>密码填自己的</p><p><code>type-aliases-package: com.zjz.domai</code>这个后面会说，填放实体类的包，数据库操作用</p><p><code>mapper-locations: classpath:mapper/*Mapper.xml</code>这个是mapper文件夹，在resource文件夹下面创建一个mapper文件夹即可，后面Mybatis文件存放在这里</p><h4 id="3、编写接口"><a href="#3、编写接口" class="headerlink" title="3、编写接口"></a>3、编写接口</h4><h5 id="创建数据库表"><a href="#创建数据库表" class="headerlink" title="创建数据库表"></a>创建数据库表</h5><p>数据库sql文件</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql">CREATE TABLE tasks (    id INT AUTO_INCREMENT PRIMARY KEY,    name VARCHAR(255) NOT NULL,    completed BOOLEAN);<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="主程序"><a href="#主程序" class="headerlink" title="主程序"></a>主程序</h5><p>com/zjz/TodoAdminApplication.java</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">@SpringBootApplicationpublic class TodoAdminApplication {    public static void main(String[] args) {        SpringApplication.run(TodoAdminApplication.class, args);    }}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="添加实体类task-java"><a href="#添加实体类task-java" class="headerlink" title="添加实体类task.java"></a>添加实体类task.java</h5><p>添加包domain，包下添加实体类task</p><p>com/zjz/domain/Task.java</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">@Datapublic class Task {    private Integer id;    private String name;    private Boolean completed;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="定义统一返回类CommonResult"><a href="#定义统一返回类CommonResult" class="headerlink" title="定义统一返回类CommonResult"></a>定义统一返回类CommonResult</h5><p>一般前端的请求，后端都以json形式传回去，格式大致为</p><pre class="line-numbers language-json" data-language="json"><code class="language-json">{    "code": 200,    "msg" : "成功",    "data": []}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>因此需要一个类来统一下</p><p>com/zjz/domain/CommonResult.java</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">@Datapublic class CommonResult&lt;T&gt; implements Serializable {    private Integer code;    private String msg;    private T data;    public static &lt;T&gt; CommonResult&lt;T&gt; success(T data) {        CommonResult&lt;T&gt; result = new CommonResult&lt;&gt;();        result.code = 200;        result.data = data;        result.msg = "操作成功";        return result;    }    public static &lt;T&gt; CommonResult&lt;T&gt; error(Integer code, String message) {        CommonResult&lt;T&gt; result = new CommonResult&lt;&gt;();        result.code = code;        result.msg = message;        return result;    }}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="4、编写getAllTask接口"><a href="#4、编写getAllTask接口" class="headerlink" title="4、编写getAllTask接口"></a>4、编写getAllTask接口</h4><h5 id="controller层"><a href="#controller层" class="headerlink" title="controller层"></a>controller层</h5><p>com/zjz/controller/TaskController.java</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">@RestController@RequestMapping("/task")public class TaskController {    @Autowired    private TaskService taskService;    @GetMapping    public CommonResult&lt;?&gt; getAllTasks(){        return taskService.getAllTasks();    }}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这里注入service服务，调用service方法去实现</p><h5 id="service接口层"><a href="#service接口层" class="headerlink" title="service接口层"></a>service接口层</h5><p>com/zjz/service/TaskService</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">public interface TaskService {    public CommonResult&lt;?&gt; getAllTasks();    }<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这是一个接口，下面用impl文件去实现接口函数</p><h5 id="service实现层"><a href="#service实现层" class="headerlink" title="service实现层"></a>service实现层</h5><p>com/zjz/service/impl/TaskServiceImpl.java</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">@Servicepublic class TaskServiceImpl implements TaskService {    @Autowired    private TaskMapper taskMapper;    @Override    public CommonResult&lt;?&gt; getAllTasks() {        List&lt;task&gt; taskList = taskMapper.getAllTasks();        return CommonResult.success(taskList);    }}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这里注入mapper，从数据库获取task信息，封装成CommonResult返回</p><p>注意@Service注解</p><h5 id="Mapper接口层"><a href="#Mapper接口层" class="headerlink" title="Mapper接口层"></a>Mapper接口层</h5><p>com/zjz/mapper/TaskMapper</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">@Mapperpublic interface TaskMapper {    List&lt;task&gt; getAllTasks();}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>注意@Mapper注解</p><h5 id="Mapper实现层"><a href="#Mapper实现层" class="headerlink" title="Mapper实现层"></a>Mapper实现层</h5><p>这个需要在idea安装Mybatis插件，自行百度</p><img src="/2023/11/17/todo%E5%BA%94%E7%94%A8%E7%BC%96%E5%86%99%E5%88%B0%E9%83%A8%E7%BD%B2/image-20231117205552929.png" class="" title="image-20231117205552929"><p>点击接口名，Alt+Enter选择生成xml文件</p><img src="/2023/11/17/todo%E5%BA%94%E7%94%A8%E7%BC%96%E5%86%99%E5%88%B0%E9%83%A8%E7%BD%B2/image-20231117205721047.png" class="" title="image-20231117205721047"><p>mapper自己创建，选择ok</p><p>会在mapper文件夹下生成一个名为TaskMapper.xml文件，这个文件允许我们对数据库进行操作</p><p>回到mapper接口文件，点击方法名，Alt+Enter生成</p><img src="/2023/11/17/todo%E5%BA%94%E7%94%A8%E7%BC%96%E5%86%99%E5%88%B0%E9%83%A8%E7%BD%B2/image-20231117205924139.png" class="" title="image-20231117205924139"><p>编写sql语句</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>select</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>getAllTasks<span class="token punctuation">"</span></span> <span class="token attr-name">resultType</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>com.zjz.domain.task<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>      select * from tasks  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>select</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>整个接口就完成了！</p><h4 id="5、剩余接口"><a href="#5、剩余接口" class="headerlink" title="5、剩余接口"></a>5、剩余接口</h4><p>我们除了获取所有接口以外，还需要有</p><ol><li>添加task接口 addTask</li><li>删除task接口 delTask</li><li>修改task状态接口 updateTask</li></ol><h5 id="controller层-1"><a href="#controller层-1" class="headerlink" title="controller层"></a>controller层</h5><pre class="line-numbers language-java" data-language="java"><code class="language-java">@RestController@RequestMapping("/task")public class TaskController {    @Autowired    private TaskService taskService;    /**     * 获取当前所有task     *     * @return     */    @GetMapping    public CommonResult&lt;?&gt; getAllTasks() {        return taskService.getAllTasks();    }    /**     * 删除指定task     * @param id     * @return     */    @DeleteMapping("/{id}")    public CommonResult&lt;?&gt; delTask(@PathVariable("id") Integer id) {        return taskService.delTask(id);    }    /**     * 添加Task     *     * @param task     * @return     */    @PostMapping    public CommonResult&lt;?&gt; addTask(@RequestBody Task task) {        return taskService.addTask(task);    }    /**     * 更新task     *     * @param task     * @return     */    @PutMapping    public CommonResult&lt;?&gt; updateTask(@RequestBody Task task) {        return taskService.updateTask(task);    }}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="service接口层-1"><a href="#service接口层-1" class="headerlink" title="service接口层"></a>service接口层</h5><pre class="line-numbers language-java" data-language="java"><code class="language-java">public interface TaskService {    CommonResult&lt;?&gt; getAllTasks();    CommonResult&lt;?&gt; delTask(Integer id);    CommonResult&lt;?&gt; addTask(Task task);    CommonResult&lt;?&gt; updateTask(Task task);}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="service实现层-1"><a href="#service实现层-1" class="headerlink" title="service实现层"></a>service实现层</h5><pre class="line-numbers language-java" data-language="java"><code class="language-java">@Servicepublic class TaskServiceImpl implements TaskService {    @Autowired    private TaskMapper taskMapper;    @Override    public CommonResult&lt;?&gt; getAllTasks() {        List&lt;Task&gt; taskList = taskMapper.getAllTasks();        return CommonResult.success(taskList);    }    @Override    public CommonResult&lt;?&gt; delTask(Integer id) {        taskMapper.delTask(id);        return CommonResult.success("删除成功");    }    @Override    public CommonResult&lt;?&gt; addTask(Task task) {        taskMapper.addTask(task);        return CommonResult.success("添加成功");    }    @Override    public CommonResult&lt;?&gt; updateTask(Task task) {        taskMapper.updateTask(task);        return CommonResult.success("更新成功");    }}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>mapper接口层</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">@Mapperpublic interface TaskMapper {    List&lt;Task&gt; getAllTasks();    void delTask(Integer id);    void addTask(Task task);    void updateTask(Task task);}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>mapper实现层</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>mapper</span> <span class="token attr-name">namespace</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>com.zjz.mapper.TaskMapper<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>insert</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>addTask<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>        insert into tasks (name,completed)        values (#{name},#{completed})    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>insert</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>update</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>updateTask<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>        update tasks set completed = #{completed} where id = #{id}    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>update</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>delete</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>delTask<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>        delete from tasks where id = #{id}    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>delete</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>select</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>getAllTasks<span class="token punctuation">"</span></span> <span class="token attr-name">resultType</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>com.zjz.domain.Task<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>        select * from tasks    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>select</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>mapper</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="6、跨域配置"><a href="#6、跨域配置" class="headerlink" title="6、跨域配置"></a>6、跨域配置</h4><p>为什么？这是chatgpt给出的回答</p><p>跨域配置是为了增加网络应用的安全性，防止恶意网站通过浏览器发起对其他域的非法请求。浏览器的同源策略（Same-Origin Policy）限制了页面上的文档或脚本如何与其他域进行交互。同源策略的目的是保护用户的信息安全，防止恶意网站通过用户的浏览器访问其他域上的敏感信息。</p><p>以下是一些常见的原因，解释了为什么需要跨域配置：</p><ol><li><strong>安全性：</strong> 同源策略是一种安全机制，它限制了从一个源加载的文档或脚本如何与来自另一个源的资源进行交互。跨域配置可以通过明确的设置，允许受信任的域进行访问，从而确保数据和资源只在受信任的环境中共享。</li><li><strong>隔离敏感信息：</strong> 跨域配置防止了恶意网站通过用户的浏览器发起对其他域的请求，从而避免了潜在的信息泄漏，尤其是对于需要身份验证的接口或包含敏感信息的资源。</li><li><strong>用户隐私：</strong> 防止未经授权的域获取用户的个人信息，保护用户的隐私。</li><li><strong>CSRF（Cross-Site Request Forgery）防护：</strong> 跨域请求限制有助于防止CSRF攻击，其中攻击者通过伪造用户的请求来执行未经授权的操作。</li></ol><p>在实际应用中，当前端代码部署在一个域，而后端服务部署在另一个域时，就需要进行跨域配置。跨域配置的方式包括使用CORS（Cross-Origin Resource Sharing）头部、JSONP等技术，以确保安全可控的跨域数据传输。</p><p>就是说规定可以进行哪些操作get，post ，delete，put这些</p><p>所以我们还需要为后端进行跨域配置</p><p>添加config包</p><p>com/zjz/config/WebMvcConfig.java</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">@Configurationpublic class WebMvcConfig implements WebMvcConfigurer {    @Override    public void addCorsMappings(CorsRegistry registry) {        registry.addMapping("/**")                .allowedOriginPatterns("*") // 使用allowedOriginPatterns替代allowedOrigins                .allowedMethods("GET", "POST", "PUT", "DELETE", "PATCH", "OPTIONS")                .allowedHeaders("Authorization", "Cache-Control", "Content-Type")                .allowCredentials(true)                .maxAge(3600);    }}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>到此处，后端结束</p><h3 id="二、前端应用🎃"><a href="#二、前端应用🎃" class="headerlink" title="二、前端应用🎃"></a>二、前端应用🎃</h3><h4 id="1、创建Vue2-0工程"><a href="#1、创建Vue2-0工程" class="headerlink" title="1、创建Vue2.0工程"></a>1、创建Vue2.0工程</h4><p>这个不说了😏 </p><h4 id="2、页面"><a href="#2、页面" class="headerlink" title="2、页面"></a>2、页面</h4><p>App.vue</p><pre class="line-numbers language-vue" data-language="vue"><code class="language-vue">&lt;template&gt;  &lt;div id="app"&gt;    &lt;router-view/&gt;  &lt;/div&gt;&lt;/template&gt;&lt;script&gt;export default {  name: 'App',}&lt;/script&gt;&lt;style lang="scss"&gt;#app {  font-family: Avenir, Helvetica, Arial, sans-serif;  -webkit-font-smoothing: antialiased;  -moz-osx-font-smoothing: grayscale;  text-align: center;  color: #2c3e50;}nav {  padding: 30px;  a {    font-weight: bold;    color: #2c3e50;    &amp;.router-link-exact-active {      color: #42b983;    }  }}&lt;/style&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>views/Task.vue</p><pre class="line-numbers language-vue" data-language="vue"><code class="language-vue">&lt;template&gt;  &lt;div id="app"&gt;    &lt;div class="header"&gt;      &lt;h1 class="todo-header"&gt;Todo&lt;/h1&gt;    &lt;/div&gt;    &lt;div class="task-input"&gt;      &lt;input type="text" v-model="newTask" placeholder="添加新任务..." @keyup.enter="addNewTask"&gt;      &lt;button @click="addNewTask"&gt;添加&lt;/button&gt;    &lt;/div&gt;    &lt;div class="task-list"&gt;      &lt;ul&gt;        &lt;li v-for="task in tasks" :key="task.id" :class="{ completed: task.completed }"&gt;          &lt;span @click="toggleCompletion(task)" class="task-name"&gt;{{ task.name }}&lt;/span&gt;          &lt;button @click="deleteTask(task)" class="delete-button"&gt;删除&lt;/button&gt;        &lt;/li&gt;      &lt;/ul&gt;    &lt;/div&gt;  &lt;/div&gt;&lt;/template&gt;&lt;script&gt;import { getAllTask, addTask, delTask, updateTask } from '@/api/task';export default {  name: 'task',  data() {    return {      newTask: '',      tasks: [],    };  },  created() {    console.log('created');    this.getTasks();  },  methods: {    getTasks() {      console.log('getTasks');      getAllTask().then(res =&gt; {        this.tasks = res.data;      });    },    addNewTask() {      if (this.newTask.trim()) {        const task = {          name: this.newTask,          completed: false,        };        addTask(task).then(res =&gt; {          this.getTasks();          this.newTask = '';        });      }    },    deleteTask(task) {      delTask(task.id).then((res) =&gt; {        this.getTasks();      })    },    toggleCompletion(task) {        task = {         id:task.id,         completed:!task.completed      }      updateTask(task).then((res) =&gt; {        this.getTasks();      })    }  }}&lt;/script&gt;&lt;style&gt;body {  font-family: 'Arial', sans-serif;  background-color: #f4f4f4;  margin: 0;}.header {  background-color: #3498db;  padding: 20px;  text-align: center;}.todo-header {  color: #fff;  margin: 0;}.task-input {  margin-top: 20px;  text-align: center;}input {  padding: 8px;  margin-right: 8px;  border: 1px solid #3498db;  border-radius: 4px;}button {  padding: 8px 16px;  background-color: #3498db;  color: #fff;  border: none;  border-radius: 4px;  cursor: pointer;}button:hover {  background-color: #2980b9;}.task-list {  margin-top: 20px;}ul {  list-style: none;  padding: 0;}li {  margin: 10px 0;  padding: 10px;  background-color: #fff;  border: 1px solid #ddd;  border-radius: 4px;  display: flex;  justify-content: space-between;  align-items: center;}.completed {  text-decoration: line-through;  color: #888;}.task-name {  cursor: pointer;}.delete-button {  background-color: #e74c3c;  color: #fff;  border: none;  padding: 8px 16px;  border-radius: 4px;  cursor: pointer;}.delete-button:hover {  background-color: #c0392b;}&lt;/style&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><code>import {getAllTask,addTask,delTask,updateTask} from "@/api/task"</code>这有几个接口要实现</p><h4 id="3、request封装"><a href="#3、request封装" class="headerlink" title="3、request封装"></a>3、request封装</h4><p>首先安装axios </p><p>项目目录进入终端输入<code>npm i axios</code></p><p>src/utils/request.js</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">import</span> axios <span class="token keyword">from</span> <span class="token string">'axios'</span><span class="token punctuation">;</span><span class="token keyword">const</span> service <span class="token operator">=</span> axios<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span><span class="token punctuation">{</span>  <span class="token literal-property property">baseURL</span><span class="token operator">:</span> <span class="token string">'/api'</span><span class="token punctuation">,</span>  <span class="token literal-property property">timeout</span><span class="token operator">:</span> <span class="token number">5000</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>service<span class="token punctuation">.</span>interceptors<span class="token punctuation">.</span>request<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span>  <span class="token parameter">config</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>    <span class="token comment">// 在请求发送之前对请求数据进行处理</span>    <span class="token comment">// ...</span>    <span class="token keyword">return</span> config<span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token parameter">error</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>    <span class="token comment">// 对请求错误做些什么</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>error<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> Promise<span class="token punctuation">.</span><span class="token function">reject</span><span class="token punctuation">(</span>error<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>service<span class="token punctuation">.</span>interceptors<span class="token punctuation">.</span>response<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span>  <span class="token parameter">response</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>    <span class="token comment">// 对响应数据进行处理</span>    <span class="token comment">// ...</span>    <span class="token keyword">return</span> response<span class="token punctuation">.</span>data<span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token parameter">error</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>    <span class="token comment">// 对响应错误做些什么</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>error<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> Promise<span class="token punctuation">.</span><span class="token function">reject</span><span class="token punctuation">(</span>error<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">export</span> <span class="token keyword">default</span> service<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="4、api接口"><a href="#4、api接口" class="headerlink" title="4、api接口"></a>4、api接口</h4><p>src/api/task.js</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">import</span> request <span class="token keyword">from</span> <span class="token string">'@/utils/request'</span><span class="token comment">// 获取所有任务的接口</span><span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">getAllTask</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">return</span> <span class="token function">request</span><span class="token punctuation">(</span><span class="token punctuation">{</span>    <span class="token literal-property property">url</span><span class="token operator">:</span> <span class="token string">'/task'</span><span class="token punctuation">,</span>    <span class="token literal-property property">method</span><span class="token operator">:</span> <span class="token string">'get'</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token comment">// 添加task</span><span class="token comment">// 添加任务的接口</span><span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">addTask</span><span class="token punctuation">(</span><span class="token parameter">data</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">return</span> <span class="token function">request</span><span class="token punctuation">(</span><span class="token punctuation">{</span>    <span class="token literal-property property">url</span><span class="token operator">:</span> <span class="token string">'/task'</span><span class="token punctuation">,</span> <span class="token comment">// 接口路径</span>    <span class="token literal-property property">method</span><span class="token operator">:</span> <span class="token string">'post'</span><span class="token punctuation">,</span> <span class="token comment">// 请求方法</span>    <span class="token literal-property property">data</span><span class="token operator">:</span> data <span class="token comment">// 请求参数</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span>  <span class="token comment">// 删除task</span><span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">delTask</span><span class="token punctuation">(</span><span class="token parameter">id</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token function">request</span><span class="token punctuation">(</span><span class="token punctuation">{</span>      <span class="token literal-property property">url</span><span class="token operator">:</span> <span class="token string">'/task/'</span> <span class="token operator">+</span> id<span class="token punctuation">,</span>      <span class="token literal-property property">method</span><span class="token operator">:</span> <span class="token string">'delete'</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span>  <span class="token punctuation">}</span><span class="token comment">// 更新task</span><span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">updateTask</span><span class="token punctuation">(</span><span class="token parameter">data</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token function">request</span><span class="token punctuation">(</span><span class="token punctuation">{</span>      <span class="token literal-property property">url</span><span class="token operator">:</span> <span class="token string">'/task'</span><span class="token punctuation">,</span>      <span class="token literal-property property">method</span><span class="token operator">:</span> <span class="token string">'put'</span><span class="token punctuation">,</span>      <span class="token literal-property property">data</span><span class="token operator">:</span> data    <span class="token punctuation">}</span><span class="token punctuation">)</span>  <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="5、跨域配置"><a href="#5、跨域配置" class="headerlink" title="5、跨域配置"></a>5、跨域配置</h4><p>打开vue.config.js文件</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> <span class="token punctuation">{</span> defineConfig <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'@vue/cli-service'</span><span class="token punctuation">)</span>module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token function">defineConfig</span><span class="token punctuation">(</span><span class="token punctuation">{</span>  <span class="token literal-property property">transpileDependencies</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>  <span class="token literal-property property">devServer</span><span class="token operator">:</span> <span class="token punctuation">{</span>    <span class="token literal-property property">proxy</span><span class="token operator">:</span> <span class="token punctuation">{</span>      <span class="token string-property property">"/api"</span><span class="token operator">:</span> <span class="token punctuation">{</span>        <span class="token literal-property property">target</span><span class="token operator">:</span> <span class="token string">"http://localhost:8080"</span><span class="token punctuation">,</span>        <span class="token literal-property property">changeOrigin</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>        <span class="token literal-property property">pathRewrite</span><span class="token operator">:</span> <span class="token punctuation">{</span>          <span class="token string-property property">"^/api"</span><span class="token operator">:</span> <span class="token string">''</span>        <span class="token punctuation">}</span>      <span class="token punctuation">}</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><code>target: "http://localhost:8080"</code>这个端口号根据你自己实际情况来</p><h4 id="6、有点问题🤡-已解决"><a href="#6、有点问题🤡-已解决" class="headerlink" title="6、有点问题🤡(已解决)"></a>6、有点问题🤡(已解决)</h4><p>前端项目终端输入：</p><p><code>npm run serve</code></p><p>后端也要启动</p><p>浏览器输网址即可</p><img src="/2023/11/17/todo%E5%BA%94%E7%94%A8%E7%BC%96%E5%86%99%E5%88%B0%E9%83%A8%E7%BD%B2/image-20231122161654585.png" class="" title="image-20231122161654585"><h5 id="！以上内容已更新😏-up"><a href="#！以上内容已更新😏-up" class="headerlink" title="！以上内容已更新😏:up:"></a>！以上内容已更新😏<span class="github-emoji"><span>🆙</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f199.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span></h5><h3 id="三、部署🐳"><a href="#三、部署🐳" class="headerlink" title="三、部署🐳"></a>三、部署🐳</h3><h4 id="1、在github上建仓库，并将项目同步到仓库"><a href="#1、在github上建仓库，并将项目同步到仓库" class="headerlink" title="1、在github上建仓库，并将项目同步到仓库"></a>1、在github上建仓库，并将项目同步到仓库</h4><p>不说了，就当建好了😏 也可以参考这篇博客</p><h4 id="2、编写前后端应用的Dockerfile文件"><a href="#2、编写前后端应用的Dockerfile文件" class="headerlink" title="2、编写前后端应用的Dockerfile文件"></a>2、编写前后端应用的Dockerfile文件</h4><h5 id="后端应用"><a href="#后端应用" class="headerlink" title="后端应用"></a>后端应用</h5><p>todo_admin/Dockerfile</p><pre class="line-numbers language-docker" data-language="docker"><code class="language-docker">FROM eclipse-temurin:8-jreRUN mkdir -p /todo_adminWORKDIR /todo_admin## 将Jar 文件复制到镜像中COPY ./target/todo_admin-0.0.1-SNAPSHOT.jar app.jar## 设置 TZ 时区ENV TZ=Asia/Shanghai## 设置 JAVA_OPTS 环境变量，可通过 docker run -e "JAVA_OPTS=" 进行覆盖ENV JAVA_OPTS="-Xms512m -Xmx512m -Djava.security.egd=file:/dev/./urandom"## 应用参数ENV ARGS=""EXPOSE 8080## 启动后端项目CMD java ${JAVA_OPTS} -jar app.jar $ARGS<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>拉取jdk8镜像，并将后端jar包复制到容器中</p><h5 id="前端应用"><a href="#前端应用" class="headerlink" title="前端应用"></a>前端应用</h5><p>todo_vue/Dockerfile</p><pre class="line-numbers language-docker" data-language="docker"><code class="language-docker"># 构建阶段FROM node:16-alpine as build-stage# 设置时区（可选）ENV TZ=Asia/Shanghai# 安装npm（已包含在Node.js中）WORKDIR /admimCOPY .npmrc package.json package-lock.json ./RUN npm installCOPY . .ARG NODE_ENV=""RUN NODE_ENV=${NODE_ENV} npm run build# Nginx阶段FROM nginx:alpine# 设置时区（可选）ENV TZ=Asia/ShanghaiCOPY ./nginx.conf /etc/nginx/conf.d/default.confCOPY --from=build-stage /admim/dist /usr/share/nginx/htmlEXPOSE 80FROM node:16-alpine as build-stageRUN npm install -g yarn  --forceWORKDIR /admimCOPY .npmrc package.json yarn.lock ./RUN yarn installCOPY . .ARG NODE_ENV=""RUN env ${NODE_ENV} yarn build:prod## -- nginx --FROM nginx:alpineENV TZ=Asia/ShanghaiCOPY ./nginx.conf /etc/nginx/conf.d/default.confCOPY --from=build-stage /admim/dist /usr/share/nginx/htmlEXPOSE 80<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="3、前端部署配置"><a href="#3、前端部署配置" class="headerlink" title="3、前端部署配置"></a>3、前端部署配置</h4><p>todo_vue/.npmrc</p><pre class="line-numbers language-.npmrc" data-language=".npmrc"><code class="language-.npmrc">phantomjs_cdnurl=http://cnpmjs.org/downloadschromedriver_cdnurl=http://cdn.npm.taobao.org/dist/chromedriversass_binary_site=https://npm.taobao.org/mirrors/node-sass/registry=https://registry.npmmirror.com<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>todo_vue/nginx.conf</p><pre class="line-numbers language-conf" data-language="conf"><code class="language-conf">server {    listen   80 default_server;    server_name  _; ## 重要！！！修改成你的外网 IP/域名    gzip on;    gzip_min_length 1k;     # 设置允许压缩的页面最小字节数    gzip_buffers 4 16k;     # 用来存储 gzip 的压缩结果    gzip_http_version 1.1;  # 识别 HTTP 协议版本    gzip_comp_level 2;      # 设置 gzip 的压缩比 1-9。1 压缩比最小但最快，而 9 相反    gzip_types text/plain application/x-javascript text/css application/xml application/javascript; # 指定压缩类型    gzip_proxied any;       # 无论后端服务器的 headers 头返回什么信息，都无条件启用压缩    location / { ## 前端项目        root   /usr/share/nginx/html/;        index  index.html index.htm;        try_files $uri $uri/ /index.html;    }    location /api/ { ## 后端项目 - 管理后台        proxy_pass http://todo_admin:8080/; ## 重要！！！proxy_pass 需要设置为后端项目所在服务器的 IP        proxy_set_header Host $http_host;        proxy_set_header X-Real-IP $remote_addr;        proxy_set_header REMOTE-HOST $remote_addr;        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;    }}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="4、后端部署配置"><a href="#4、后端部署配置" class="headerlink" title="4、后端部署配置"></a>4、后端部署配置</h4><p>在pom.xml中添加以下配置，到时候下载依赖用的源</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>repositories</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>repository</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>id</span><span class="token punctuation">&gt;</span></span>huaweicloud<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>id</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>name</span><span class="token punctuation">&gt;</span></span>huawei<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>name</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>url</span><span class="token punctuation">&gt;</span></span>https://mirrors.huaweicloud.com/repository/maven/<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>url</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>repository</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>repository</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>id</span><span class="token punctuation">&gt;</span></span>aliyunmaven<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>id</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>name</span><span class="token punctuation">&gt;</span></span>aliyun<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>name</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>url</span><span class="token punctuation">&gt;</span></span>https://maven.aliyun.com/repository/public<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>url</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>repository</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>repositories</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>pluginRepositories</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>pluginRepository</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>id</span><span class="token punctuation">&gt;</span></span>public<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>id</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>name</span><span class="token punctuation">&gt;</span></span>aliyun nexus<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>name</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>url</span><span class="token punctuation">&gt;</span></span>https://maven.aliyun.com/nexus/content/groups/public/<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>url</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>releases</span><span class="token punctuation">&gt;</span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>enabled</span><span class="token punctuation">&gt;</span></span>true<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>enabled</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>releases</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>snapshots</span><span class="token punctuation">&gt;</span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>enabled</span><span class="token punctuation">&gt;</span></span>false<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>enabled</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>snapshots</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>pluginRepository</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>pluginRepositories</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>5、docker-compose编写</p><p>./docker-compose.yml</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml">version: "3.4"services:  mysql:    container_name: todo-mysql    image: mysql:8    restart: unless-stopped    tty: true    ports:      - "3306:3306"    environment:      MYSQL_DATABASE: ${MYSQL_DATABASE:-root}      MYSQL_ROOT_PASSWORD: ${MYSQL_ROOT_PASSWORD:-123456}    volumes:      - mysql:/var/lib/mysql/      - ./sql/todo_init.sql:/docker-entrypoint-initdb.d/todo_init.sql:ro  server:    container_name: todo_admin    build:      context: ./todo_admin/       image: todo_admin    restart: unless-stopped    ports:      - "8080:8080"    environment:      SPRING_PROFILES_ACTIVE: local      JAVA_OPTS:        ${JAVA_OPTS:-          -Xms512m          -Xmx512m          -Djava.security.egd=file:/dev/./urandom        }      ARGS:        --spring.datasource.url=${DATASOURCE_URL:-jdbc:mysql://todo-mysql:3306/mybatis_db?useSSL=false&amp;serverTimezone=Asia/Shanghai&amp;allowPublicKeyRetrieval=true&amp;nullCatalogMeansCurrent=true}        --spring.datasource.username=${DATASOURCE_USERNAME:-root}        --spring.datasource.password=${DATASOURCE_PASSWORD:-123456}    depends_on:      - mysql  web:    container_name: todo_vue    build:      context: ./todo_vue      args:        NODE_ENV:          ENV=${NODE_ENV:-production}          VUE_APP_TITLE=${VUE_APP_TITLE:-SSADMIN管理系统}    image: todo_vue    restart: unless-stopped    ports:      - "80:80"    depends_on:      - servervolumes:  mysql:    driver: local<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>注意：build ：context 这一项就是你本地文件的前后端项目文件夹路径</p><h4 id="5、数据库初始化"><a href="#5、数据库初始化" class="headerlink" title="5、数据库初始化"></a>5、数据库初始化</h4><p>./sql/todo_init.sql</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql">/* Navicat Premium Data Transfer Source Server         : 123 Source Server Type    : MySQL Source Server Version : 80029 Source Host           : localhost:3306 Source Schema         : mybatis_db Target Server Type    : MySQL Target Server Version : 80029 File Encoding         : 65001 Date: 25/11/2023 16:17:48*/SET NAMES utf8mb4;SET FOREIGN_KEY_CHECKS = 0;CREATE DATABASE IF NOT EXISTS `mybatis_db` DEFAULT CHARACTER SET utf8 COLLATE utf8_general_ci ;USE `mybatis_db`;-- ------------------------------ Table structure for tasks-- ----------------------------DROP TABLE IF EXISTS `tasks`;CREATE TABLE `tasks`  (  `id` int NOT NULL AUTO_INCREMENT,  `name` varchar(255) CHARACTER SET utf8 COLLATE utf8_general_ci NOT NULL,  `completed` tinyint(1) NULL DEFAULT NULL,  PRIMARY KEY (`id`) USING BTREE) ENGINE = InnoDB AUTO_INCREMENT = 10 CHARACTER SET = utf8 COLLATE = utf8_general_ci ROW_FORMAT = Dynamic;-- ------------------------------ Records of tasks-- ----------------------------INSERT INTO `tasks` VALUES (7, '学习', 1);INSERT INTO `tasks` VALUES (8, '学个屁', 0);INSERT INTO `tasks` VALUES (9, '吃饭', 0);INSERT INTO `tasks` VALUES (10, '睡觉', 0);SET FOREIGN_KEY_CHECKS = 1;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="6、自动部署脚本"><a href="#6、自动部署脚本" class="headerlink" title="6、自动部署脚本"></a>6、自动部署脚本</h4><p>./deploy.sh</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">#!/bin/bash# 启动服务echo -e "开始部署......"# 当任何一个命令返回非零值时，退出脚本set -e# 定义颜色RED='\033[0;31m'GREEN='\033[0;32m'NC='\033[0m' # 无颜色# 检查docker命令是否可用if ! command -v docker &amp;&gt; /dev/nullthen    echo -e "${RED}docker 命令未找到，请先安装 Docker。${NC}"    exit 1fiecho -e "检查docker命令是否可用......${GREEN}通过${NC}"# 检查docker-compose命令是否可用if ! command -v docker-compose &amp;&gt; /dev/nullthen    echo -e "${RED}docker-compose 命令未找到，请先安装 Docker Compose。${NC}"    exit 1fiecho -e "检查docker-compose 命令......${GREEN}通过${NC}"# 检查 Maven 缓存 volume 是否已经存在if docker volume inspect todo-maven-repo &amp;&gt; /dev/null; then    echo -e "${GREEN}Maven 缓存 volume 已存在。${NC}"else    echo -e "${GREEN}创建 Maven 缓存 volume...${NC}"    docker volume create --name todo-maven-repofi# 通过容器构建 jar 包echo -e "开始构建 jar 包..."docker run -it --rm --name todo-maven \    -v todo-maven-repo:/root/.m2 \    -v "$PWD/todo_admin":/usr/src/mymaven \    -w /usr/src/mymaven \    maven:3.8.4-jdk-8 mvn clean install package -e '-Dmaven.test.skip=true' || { echo -e "${RED}构建 jar 包失败。${NC}"; exit 1; }echo -e "通过容器构建 jar 包......${GREEN}通过${NC}"# 构建镜像echo -e "开始构建镜像..."docker-compose build --no-cache || { echo -e "${RED}构建 Docker 镜像失败。${NC}"; exit 1; }echo -e "构建 Docker 镜像......${GREEN}通过${NC}"# 启动服务echo -e "检查是否有正在运行的服务..."# 检查是否有正在运行的 docker-compose 服务if docker-compose ps | grep "todo"; then    echo -e "${GREEN}停止正在运行的服务...${NC}"    docker-compose down || { echo -e "${RED}停止服务失败。${NC}"; exit 1; }    echo -e "${GREEN}服务已成功停止。${NC}"else    echo -e "${GREEN}没有找到正在运行的服务。${NC}"fiecho -e "启动新服务..."docker-compose up -d || { echo -e "${RED}启动服务失败。${NC}"; exit 1; }echo -e "${GREEN}恭喜你！系统部署完成！${NC}"echo -e ""echo -e "**********************************"echo -e "***  Admin UI: http://hostname ***"echo -e "**********************************"echo -e ""<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="7、云服务器部署"><a href="#7、云服务器部署" class="headerlink" title="7、云服务器部署"></a>7、云服务器部署</h4><p>所谓一键部署，就是进入服务器，git一下，运行结束😏😏</p><p>进入服务器终端</p><p>先把仓库的项目拉到该目录下</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">git clone [仓库地址]#例 git clone https://github.com/summerbird-1/TodoApp.git<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>然后进入到项目目录下</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">cd TodoApp<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>然后运行deploy.sh即可</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">./deploy.sh<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>如果有问题，可能是权限问题,</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">chmod +x deploy.sh<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>然后再运行即可，一路下来</p><p>看到</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">恭喜你！系统部署完成！*************************************  Admin UI: http://hostname *************************************<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>部署成功！！！</p><p>浏览器输入服务器ip即可🥳🥳🥳</p>]]></content>
      
      
      <categories>
          
          <category> 开发 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Docker </tag>
            
            <tag> Springboot </tag>
            
            <tag> Vue </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>DockerCompose部署学习</title>
      <link href="/2023/11/16/DockerCompose%E9%83%A8%E7%BD%B2%E5%AD%A6%E4%B9%A0/"/>
      <url>/2023/11/16/DockerCompose%E9%83%A8%E7%BD%B2%E5%AD%A6%E4%B9%A0/</url>
      
        <content type="html"><![CDATA[<h3 id="一、为什么用DockerCompose？😏"><a href="#一、为什么用DockerCompose？😏" class="headerlink" title="一、为什么用DockerCompose？😏"></a>一、为什么用DockerCompose？😏</h3><p>之前学习docker到DockerFile发现部署变得简洁了，但是要部署多个容器时还是要一个一个运行，麻烦</p><p>DockerCompose用来定义一个或多个容器运行和应用</p><p>当前版本docker带有dockercompose不用单独安装</p><p>输入<code>docker-compose version</code>有版本输出说明已安装</p><h3 id="二、入门🏋🏻‍♀️🏋🏻"><a href="#二、入门🏋🏻‍♀️🏋🏻" class="headerlink" title="二、入门🏋🏻‍♀️🏋🏻"></a>二、入门🏋🏻‍♀️🏋🏻</h3><p>编写dockercompose文件</p><p>docker-compose.yml</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml">services:  rbac:    image: rbac:01<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>rbac:01是你当前拥有的 镜像名:tag</p><p>运行命令</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">docker—compose up -d<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>看到容器开始运行了，rbac:01是后端应用</p><img src="/2023/11/16/DockerCompose%E9%83%A8%E7%BD%B2%E5%AD%A6%E4%B9%A0/image-20231116212122431.png" class="" title="image-20231116212122431"><p>docker ps 查看容器运行情况</p><p>停止运行</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">docker-compose down<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="三、一些命令项㊙️"><a href="#三、一些命令项㊙️" class="headerlink" title="三、一些命令项㊙️"></a>三、一些命令项㊙️</h3><img src="/2023/11/16/DockerCompose%E9%83%A8%E7%BD%B2%E5%AD%A6%E4%B9%A0/image-20231117185544961.png" class="" title="image-20231117185544961"><h3 id="四、部署实例🧻🧻"><a href="#四、部署实例🧻🧻" class="headerlink" title="四、部署实例🧻🧻"></a>四、部署实例🧻🧻</h3><p>编写docker-compose.yml</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml">services:  #数据库服务  rbac_mysql:    image: mysql:5.7    volumes:      - mysql_data:/var/lib/mysql    ports:      - 3306:3306    environment:      MYSQL_ROOT_PASSWORD: root    restart: always    networks:      - rbac_net  #redis服务  rbac_redis:    image: redis:7.0    volumes:      - redis_data:/data     ports:      - 6379:6379    restart: always    command: ['redis-server','--appendonly','yes']    networks:      - rbac_net  #后端服务  rbac_admin:    image: rbac_admin:01    ports:      - 28080:28080    networks:      - rbac_net    restart: always  #前端服务  rbac_vue:    image: rbac_vue:01    ports:      - 80:80    restart: alwaysnetworks:  rbac_net:volumes:  mysql_data:  redis_data:<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>当然前后端应用的镜像是我们自定义的，因此需要自己先在服务器上构建好</p><p>参考：<a href="http://summerbird-1.github.io/2023/11/14/DockerFile%E9%83%A8%E7%BD%B2%E5%AD%A6%E4%B9%A0/">DockerFile部署学习</a></p><p>后端：</p><pre class="line-numbers language-docker" data-language="docker"><code class="language-docker">FROM openjdk:8u111# 指定工作目录WORKDIR /app# 添加jar包到镜像中ADD ssadmin-server-2.7.17.jar /app/# 声明开放端口EXPOSE 28080# 启动命令CMD ["java", "-jar", "ssadmin-server-2.7.17.jar", "--spring.datasource.url=jdbc:mysql://rbac_mysql:3306/rbac?characterEncoding=utf-8&amp;serverTimezone=UTC", "--spring.datasource.username=root", "--spring.datasource.password=root"]<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>build一下</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">docker build -t rbac:01 -f rbac_dockerfile .<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>前端</p><pre class="line-numbers language-docker" data-language="docker"><code class="language-docker">FROM nginx:1.21.5WORKDIR /appCOPY rbac_vue .RUN cp -r dist/* /usr/share/nginx/htmlEXPOSE 80ENTRYPOINT ["nginx","-g","daemon off;"]<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>同样build一下</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">docker build -t rbac_vue:01 -f rbac_vue_dockerfile .<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>最后，dockercompose登场</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">docker-compose up -d<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>然后就</p><img src="/2023/11/16/DockerCompose%E9%83%A8%E7%BD%B2%E5%AD%A6%E4%B9%A0/image-20231117195411208.png" class="" title="image-20231117195411208"><p><code>docker ps</code> 查看</p><img src="/2023/11/16/DockerCompose%E9%83%A8%E7%BD%B2%E5%AD%A6%E4%B9%A0/image-20231117195455773.png" class="" title="image-20231117195455773"><p>完事！不想用就down一下</p><p><code>docker-compose down</code></p><img src="/2023/11/16/DockerCompose%E9%83%A8%E7%BD%B2%E5%AD%A6%E4%B9%A0/04099f6774f94c95bfd233c841b3acc7.gif" class="" title="img">]]></content>
      
      
      <categories>
          
          <category> 部署 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> DockerCompose </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>如何推送镜像到dockerhub</title>
      <link href="/2023/11/16/%E5%A6%82%E4%BD%95%E6%8E%A8%E9%80%81%E9%95%9C%E5%83%8F%E5%88%B0dockerhub/"/>
      <url>/2023/11/16/%E5%A6%82%E4%BD%95%E6%8E%A8%E9%80%81%E9%95%9C%E5%83%8F%E5%88%B0dockerhub/</url>
      
        <content type="html"><![CDATA[<p>在公司开发环境中，一般需要把打包好的镜像推送到镜像仓库，然后拉取部署</p><h2 id="一、注册dockerhub账号😹"><a href="#一、注册dockerhub账号😹" class="headerlink" title="一、注册dockerhub账号😹"></a>一、注册dockerhub账号😹</h2><p>略 总之用github账号或邮箱都可以</p><h2 id="二、登录镜像仓库💑🏽"><a href="#二、登录镜像仓库💑🏽" class="headerlink" title="二、登录镜像仓库💑🏽"></a>二、登录镜像仓库💑🏽</h2><p>在服务器终端输入</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">docker login<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>按提示输入你dockerhub的用户名和密码即可</p><img src="/2023/11/16/%E5%A6%82%E4%BD%95%E6%8E%A8%E9%80%81%E9%95%9C%E5%83%8F%E5%88%B0dockerhub/image-20231116204149131.png" class="" title="image-20231116204149131"><p>看到这个就是登录成功</p><h2 id="三、构建镜像🙈"><a href="#三、构建镜像🙈" class="headerlink" title="三、构建镜像🙈"></a>三、构建镜像🙈</h2><p>输入docker images查看镜像</p><img src="/2023/11/16/%E5%A6%82%E4%BD%95%E6%8E%A8%E9%80%81%E9%95%9C%E5%83%8F%E5%88%B0dockerhub/image-20231116204449550.png" class="" title="image-20231116204449550"><p>使用命令</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">docker build username/镜像名:tag dockerfile文件 DockerFile目录#例 docker build -t summerbird162/rbac_admin:01 -f rbac_dockerfile .<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>至于DockerFile文件可见上篇博客<a href="http://summerbird-1.github.io/2023/11/14/DockerFile%E9%83%A8%E7%BD%B2%E5%AD%A6%E4%B9%A0/">DockerFile部署学习</a></p><h2 id="四、打标签🦫"><a href="#四、打标签🦫" class="headerlink" title="四、打标签🦫"></a>四、打标签🦫</h2><p>使其与Docker Hub上镜像仓库关联</p><p>命令</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">docker tag username/镜像名:tag  username/镜像名:tag #例 docker tag summerbird162/rbac_admin:01 summerbird162/rbac_admin<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h2 id="五、推送镜像🐏"><a href="#五、推送镜像🐏" class="headerlink" title="五、推送镜像🐏"></a>五、推送镜像🐏</h2><p>命令</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">docker push username/镜像名:tag#例  docker push summerbird162/rbac_admin:01<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 部署 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> docker </tag>
            
            <tag> dockerhub </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>动态规划刷题</title>
      <link href="/2023/11/16/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92%E5%88%B7%E9%A2%98/"/>
      <url>/2023/11/16/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92%E5%88%B7%E9%A2%98/</url>
      
        <content type="html"><![CDATA[<h2 id="动态规划🙉🙉"><a href="#动态规划🙉🙉" class="headerlink" title="动态规划🙉🙉"></a>动态规划🙉🙉</h2><p>要想有效地通过动态规划解决问题，需要满足两个基本条件：</p><ol><li><strong>最优化原理</strong>：一个复杂问题的最优解一定会从它的子问题的最优解推出来。也就是说，通过子问题的最优答案，可以得到整个问题的最优答案。</li><li><strong>无后效性</strong>：无论之前通过什么方式到达这一状态，后续可做的决策都一样，不会因为到达这一状态的方式不同导致后续可做的决策不同。这一原则有两个关键方面：<ul><li><strong>无环递推关系</strong>：在状态转移中不应有循环，确保每个状态只由它的前一个状态推导出，避免重回早前的状态。</li><li><strong>历史独立性</strong>：当达到某状态后，后续的决策不应受之前达到该状态的路径所影响。如果问题不满足此条件，可能需要增加状态维度来使状态描述更完整。</li></ul></li></ol><p>只有当问题符合这两个条件时，动态规划才能被有效使用。</p><h3 id="198-打家劫舍🤠"><a href="#198-打家劫舍🤠" class="headerlink" title="198. 打家劫舍🤠"></a><a href="https://leetcode.cn/problems/house-robber/">198. 打家劫舍</a>🤠</h3><p>你是一个专业的小偷，计划偷窃沿街的房屋。每间房内都藏有一定的现金，影响你偷窃的唯一制约因素就是相邻的房屋装有相互连通的防盗系统，<strong>如果两间相邻的房屋在同一晚上被小偷闯入，系统会自动报警</strong>。</p><p>给定一个代表每个房屋存放金额的非负整数数组，计算你 <strong>不触动警报装置的情况下</strong> ，一夜之内能够偷窃到的最高金额。</p><p><strong>示例 1：</strong></p><pre class="line-numbers language-none"><code class="language-none">输入：[1,2,3,1]输出：4解释：偷窃 1 号房屋 (金额 = 1) ，然后偷窃 3 号房屋 (金额 = 3)。     偷窃到的最高金额 = 1 + 3 = 4 。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p><strong>示例 2：</strong></p><pre class="line-numbers language-none"><code class="language-none">输入：[2,7,9,3,1]输出：12解释：偷窃 1 号房屋 (金额 = 2), 偷窃 3 号房屋 (金额 = 9)，接着偷窃 5 号房屋 (金额 = 1)。     偷窃到的最高金额 = 2 + 9 + 1 = 12 。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p><strong>提示：</strong></p><ul><li><code>1 &lt;= nums.length &lt;= 100</code></li><li><code>0 &lt;= nums[i] &lt;= 400</code></li></ul><h4 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h4><p>设置一个<code>dp[i][j]</code>二维数组，j = 0 或 1，<code>dp[i][0]</code>代表不打劫第<code>i</code>（从0开始）家可以获得的最大金额，<code>dp[i][1]</code>代表打劫第<code>i</code>家可以获取的最大金额</p><p>以示例一做矩阵模拟：</p><table><thead><tr><th align="center">j  i</th><th align="center">0</th><th align="center">1</th><th align="center">2</th><th align="center">3</th></tr></thead><tbody><tr><td align="center">0</td><td align="center">0</td><td align="center">1</td><td align="center">2</td><td align="center">4</td></tr><tr><td align="center">1</td><td align="center">1</td><td align="center">2</td><td align="center">4</td><td align="center">3</td></tr></tbody></table><h4 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h4><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">class Solution {public:    int rob(vector&lt;int&gt;&amp; nums) {        int n = nums.size();        vector&lt;vector&lt;int&gt;&gt; dp(n,vector&lt;int&gt;(2));        dp[0][0] = 0;        dp[0][1] = nums[0];        for(int i = 1;i &lt; n;i++){           dp[i][0] = max(dp[i-1][0],dp[i-1][1]);           dp[i][1] = dp[i-1][0] + nums[i];        }        return max(dp[n-1][0],dp[n-1][1]);    }};<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="279-完全平方数"><a href="#279-完全平方数" class="headerlink" title="279. 完全平方数"></a><a href="https://leetcode.cn/problems/perfect-squares/">279. 完全平方数</a></h3><p>给你一个整数 <code>n</code> ，返回 <em>和为 <code>n</code> 的完全平方数的最少数量</em> 。</p><p><strong>完全平方数</strong> 是一个整数，其值等于另一个整数的平方；换句话说，其值等于一个整数自乘的积。例如，<code>1</code>、<code>4</code>、<code>9</code> 和 <code>16</code> 都是完全平方数，而 <code>3</code> 和 <code>11</code> 不是。</p><p><strong>示例1：</strong></p><pre class="line-numbers language-none"><code class="language-none">输入：n = 12输出：3 解释：12 = 4 + 4 + 4<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p><strong>示例 2：</strong></p><pre class="line-numbers language-none"><code class="language-none">输入：n = 13输出：2解释：13 = 4 + 9<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p><strong>提示：</strong></p><ul><li><code>1 &lt;= n &lt;= 10000</code></li></ul><h4 id="思路-1"><a href="#思路-1" class="headerlink" title="思路"></a>思路</h4><p>求和为n的完全平方数的最少数量，子问题和是n-j*j的完全平方数的最少数量，设dp[n]</p><p>dp[i] = dp[i-j*j] + 1;</p><h4 id="代码-1"><a href="#代码-1" class="headerlink" title="代码"></a>代码</h4><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">#include&lt;iostream&gt;using namespace std;int dp[10010];int main(){    int n;    cin &gt;&gt; n;    for(int i = 1;i &lt;= n;i++){        int minn = INT_MAX;        for(int j = 1;j*j &lt;= n;j++){            minn = min(minn,dp[i-j*j]);        }        dp[i] = minn + 1;    }    cout &lt;&lt; dp[n];    return 0}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">class Solution {public:    int numSquares(int n) {         vector&lt;int&gt; dp(n+1);         for(int i = 1;i &lt;= n;i++){             int minn = INT_MAX;             for(int j = 1;j * j &lt;= i;j++){                 minn = min(minn,dp[i-j*j]);             }             dp[i] = minn + 1;         }         return dp[n];    }};<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="322-零钱兑换"><a href="#322-零钱兑换" class="headerlink" title="322. 零钱兑换"></a><a href="https://leetcode.cn/problems/coin-change/">322. 零钱兑换</a></h3><p>给你一个整数数组 <code>coins</code> ，表示不同面额的硬币；以及一个整数 <code>amount</code> ，表示总金额。</p><p>计算并返回可以凑成总金额所需的 <strong>最少的硬币个数</strong> 。如果没有任何一种硬币组合能组成总金额，返回 <code>-1</code> 。</p><p>你可以认为每种硬币的数量是无限的。</p><p><strong>示例 1：</strong></p><pre class="line-numbers language-none"><code class="language-none">输入：coins = [1, 2, 5], amount = 11输出：3 解释：11 = 5 + 5 + 1<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p><strong>示例 2：</strong></p><pre class="line-numbers language-none"><code class="language-none">输入：coins = [2], amount = 3输出：-1<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><strong>示例 3：</strong></p><pre class="line-numbers language-none"><code class="language-none">输入：coins = [1], amount = 0输出：0<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><strong>提示：</strong></p><ul><li><code>1 &lt;= coins.length &lt;= 12</code></li><li><code>1 &lt;= coins[i] &lt;= 231 - 1</code></li><li><code>0 &lt;= amount &lt;= 104</code></li></ul><h4 id="思路-2"><a href="#思路-2" class="headerlink" title="思路"></a>思路</h4><p>设dp[i]是满足amount为i时需要的最少硬币数，那么<code>dp[i] = min(dp[i],d[i - coins[j]] + 1)</code></p><p><code>j = 0 ~ coins.size()-1</code>  前提 <code>i-coins[j] &gt;= 0</code></p><h4 id="代码-2"><a href="#代码-2" class="headerlink" title="代码"></a>代码</h4><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">class Solution {public:    int coinChange(vector&lt;int&gt;&amp; coins, int amount) {        vector&lt;int&gt; dp(amount+1,amount+1);        dp[0] = 0;        for(int i = 1;i &lt;= amount;i++){            for(int j = 0;j &lt; coins.size();j++){                if(i - coins[j] &gt;= 0)                dp[i]  = min(dp[i],dp[i-coins[j]] + 1);            }        }        if(dp[amount] &gt; amount)        return -1;        else        return dp[amount];    }};<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="xxx-打野"><a href="#xxx-打野" class="headerlink" title="xxx.打野"></a>xxx.打野</h3><p>Description</p><p>在 Dota 游戏中, 英雄通过击败野外的怪物(简称野怪)可以获取一定量的金币, 但是在此过程中也会损失一定量的生命值.</p><p>现在一位名为奈文摩尔的英雄希望通过击败野怪来获取金币, 假设他的初始生命值为 R*, 在保证英雄不被野怪击败(即 R*≥0)的情况下, 求该英雄最多可以获取多少金币.</p><p>Input</p><p>输入包含三行, 第一行为两个正整数 N*,<em>R</em>∈[1,1000] 分别表示野怪的数量以及奈文摩尔的初始生命值.</p><p>第二行包含 N* 个正整数, 表示击败每个野怪可以得到的金币,</p><p>第三行包含 N* 个正整数, 表示击败每个野怪需要消耗的生命值.</p><p>Output</p><p>输出单独一行, 表示奈文摩尔可以得到的最大金币数.</p><p>(假设击败野怪的过程中生命值不会恢复)</p><p>Sample Input 1 </p><pre class="line-numbers language-none"><code class="language-none">5 148 2 2 2 87 8 4 5 3<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>Sample Output 1</p><pre class="line-numbers language-none"><code class="language-none">18<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="思路-3"><a href="#思路-3" class="headerlink" title="思路"></a>思路</h4><p>就是一个01背包问题</p><p><code>dp[i][j]</code>代表前i个野怪，血量为j时能够获取的最大金币数</p><h4 id="代码-3"><a href="#代码-3" class="headerlink" title="代码"></a>代码</h4><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">#include&lt;bits/stdc++.h&gt;using namespace std;int blood[1010];int gold[1010];int dp[1010][1010]{0};int main(){    int N,R;    cin &gt;&gt; N &gt;&gt; R;    for(int i = 1;i &lt;= N;i++)    cin &gt;&gt; gold[i];    for(int i = 1;i &lt;= N;i++)    cin &gt;&gt; blood[i];    for(int i = 1;i &lt;= N;i++){        for(int j = 1;j &lt;= R;j++){            dp[i][j] = dp[i-1][j];            if(j &gt;= blood[i])            dp[i][j] = max(dp[i][j],dp[i-1][j-blood[i]]+ gold[i]);        }    }    cout &lt;&lt; dp[N][R];    return 0;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="xxx-吃辣条决赛"><a href="#xxx-吃辣条决赛" class="headerlink" title="xxx.吃辣条决赛"></a>xxx.吃辣条决赛</h3><img src="/2023/11/16/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92%E5%88%B7%E9%A2%98/image-20231119094505519.png" class="" title="image-20231119094505519"><h4 id="代码-4"><a href="#代码-4" class="headerlink" title="代码"></a>代码</h4><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">#include &lt;iostream&gt;#include &lt;vector&gt;using namespace std;int a[100010];int b[100010];long f1[100010];long f2[100010];int main() {    int n;    cin &gt;&gt; n;    for(int i = 1;i &lt;= n;i++)      cin &gt;&gt; a[i];    for(int i = 1;i &lt;= n;i++)        cin &gt;&gt; b[i];    long m1 = 0,m2 = 0;    for(int i = 1;i &lt;= n;i++){        f1[i] = m2 + b[i];        f2[i] = m1 + a[i];        m1 = max(m1,f1[i]);        m2 = max(m2,f2[i]);    }    cout &lt;&lt; max(m1,m2);    return 0;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Algorithm </category>
          
      </categories>
      
      
        <tags>
            
            <tag> LeetCode </tag>
            
            <tag> 动态规划 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Springboot中使用Redis</title>
      <link href="/2023/11/15/Springboot%E4%B8%AD%E4%BD%BF%E7%94%A8redis/"/>
      <url>/2023/11/15/Springboot%E4%B8%AD%E4%BD%BF%E7%94%A8redis/</url>
      
        <content type="html"><![CDATA[<p>用缓存，主要有两个用途：<strong>高性能、高并发</strong>。</p><h2 id="Redis简介🍎🍎"><a href="#Redis简介🍎🍎" class="headerlink" title="Redis简介🍎🍎"></a><strong>Redis简介</strong>🍎🍎</h2><ul><li><strong>高性能</strong>：Redis将大部分数据存储在内存中，提供极高的读写速度。</li><li><strong>持久化</strong>：支持RDB和AOF两种持久化方式，确保数据安全。</li><li><strong>数据结构丰富</strong>：支持多种数据结构，适应不同的应用场景。</li></ul><p>如何在Springboot中使用Redis呢？</p><h3 id="前提：电脑安装了Redis服务，并打开。"><a href="#前提：电脑安装了Redis服务，并打开。" class="headerlink" title="前提：电脑安装了Redis服务，并打开。"></a>前提：电脑安装了Redis服务，并打开。</h3><h2 id="一、添加依赖🐸"><a href="#一、添加依赖🐸" class="headerlink" title="一、添加依赖🐸"></a>一、添加依赖🐸</h2><p>在项目依赖文件<code>pom.xml</code>中添加依赖项</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependencies</span><span class="token punctuation">&gt;</span></span>    <span class="token comment">&lt;!-- Spring Data Redis依赖 --&gt;</span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-boot-starter-data-redis<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>    <span class="token comment">&lt;!-- Jedis客户端依赖 --&gt;</span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>redis.clients<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>jedis<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependencies</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="二、配置Redis🙉"><a href="#二、配置Redis🙉" class="headerlink" title="二、配置Redis🙉"></a>二、配置Redis🙉</h2><p>在<code>application.yml</code>文件中配置Redis服务器的连接信息。</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml">spring:  redis:    host: localhost  # Redis服务器地址    port: 6379       # Redis服务器端口    password:        # Redis服务器密码，如果有的话    jedis:      pool:        max-active: 10    # 连接池最大连接数        max-idle: 5       # 连接池中的最大空闲连接        min-idle: 1       # 连接池中的最小空闲连接        max-wait: 10000ms # 连接池最大阻塞等待时间<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="三、使用RedisTemplate🌳"><a href="#三、使用RedisTemplate🌳" class="headerlink" title="三、使用RedisTemplate🌳"></a>三、使用RedisTemplate🌳</h2><p>首先自定义RedisConfig类</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">@Configurationpublic class RedisConfig {    @Bean    public RedisTemplate&lt;String, Object&gt; redisTemplate(RedisConnectionFactory redisConnectionFactory) {        RedisTemplate&lt;String, Object&gt; template = new RedisTemplate&lt;&gt;();        template.setConnectionFactory(redisConnectionFactory);        // 使用默认的序列化器        template.setKeySerializer(new StringRedisSerializer());        template.setValueSerializer(new StringRedisSerializer());        return template;    }}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>后面可在服务中注入模板操作redis</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">@Autowiredprivate RedisTemplate&lt;String, Object&gt; redisTemplate;@Autowiredprivate StringRedisTemplate stringRedisTemplate;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="四、操作Redis🐊"><a href="#四、操作Redis🐊" class="headerlink" title="四、操作Redis🐊"></a>四、操作Redis🐊</h2><pre class="line-numbers language-java" data-language="java"><code class="language-java">// 设置键值对redisTemplate.opsForValue().set("key", "value");// 获取键对应的值String value = (String) redisTemplate.opsForValue().get("key");// 删除键redisTemplate.delete("key");<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="五、测试🤿"><a href="#五、测试🤿" class="headerlink" title="五、测试🤿"></a>五、测试🤿</h2><p>编写单元测试验证Redis是否正确</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">@SpringBootTestpublic class RedisTest {    @Autowired    private RedisTemplate&lt;String, Object&gt; redisTemplate;    @Test    public void testRedis() {        redisTemplate.opsForValue().set("testKey", "testValue");        assertEquals("testValue", redisTemplate.opsForValue().get("testKey"));    }}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Springboot </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Redis </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>DockerFile部署学习</title>
      <link href="/2023/11/14/DockerFile%E9%83%A8%E7%BD%B2%E5%AD%A6%E4%B9%A0/"/>
      <url>/2023/11/14/DockerFile%E9%83%A8%E7%BD%B2%E5%AD%A6%E4%B9%A0/</url>
      
        <content type="html"><![CDATA[<h2 id="🐋进化➡️DockerFile部署🐳"><a href="#🐋进化➡️DockerFile部署🐳" class="headerlink" title="🐋进化➡️DockerFile部署🐳"></a>🐋进化➡️DockerFile部署🐳</h2><p>🦊可自行学习文档：<a href="https://docs.docker.com/engine/reference/builder/">Dockerfile reference | Docker Docs</a></p><h3 id="一、😧为什么要用DockerFile"><a href="#一、😧为什么要用DockerFile" class="headerlink" title="一、😧为什么要用DockerFile"></a>一、😧为什么要用DockerFile</h3><p>等我明白了再写，大致因为方便，不重复，节省空间速度快</p><h3 id="二、🔞入门"><a href="#二、🔞入门" class="headerlink" title="二、🔞入门"></a>二、🔞入门</h3><h4 id="构建Helloworld镜像"><a href="#构建Helloworld镜像" class="headerlink" title="构建Helloworld镜像"></a>构建Helloworld镜像</h4><p>步骤</p><ol><li>创建DockerFile文件</li><li>编写指令</li><li>编译镜像</li></ol><h5 id="指令内容"><a href="#指令内容" class="headerlink" title="指令内容"></a>指令内容</h5><pre class="line-numbers language-docker" data-language="docker"><code class="language-docker">FROM centos:7CMD ["echo","Helloworld"]<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h5 id="编译指令"><a href="#编译指令" class="headerlink" title="编译指令"></a>编译指令</h5><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">docker build -t [镜像标签] -f [DockerFile文件名] [文件路径]#示例docker build -t hello:1.0 -f Helloworld .<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h5 id="查看镜像是否存在docker-images"><a href="#查看镜像是否存在docker-images" class="headerlink" title="查看镜像是否存在docker images"></a>查看镜像是否存在<code>docker images</code></h5><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">REPOSITORY   TAG       IMAGE ID       CREATED              SIZEhello        1.0       6bb126809f51   About a minute ago   204MBcentos       7         eeb6ee3f44bd   2 years ago          204MBnginx        latest    ad4c705f24d3   2 years ago          133MB<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>已存在</p><h5 id="运行容器测试"><a href="#运行容器测试" class="headerlink" title="运行容器测试"></a>运行容器测试</h5><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">docker run hello:1.0<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>控制台输出Helloworld，成功🎉</p><h3 id="三、🪆常见指令"><a href="#三、🪆常见指令" class="headerlink" title="三、🪆常见指令"></a>三、🪆常见指令</h3><h4 id="1、FROM"><a href="#1、FROM" class="headerlink" title="1、FROM"></a>1、FROM</h4><p>定义基础镜像</p><p>用法 ：<code>FROM 镜像名:标签名</code></p><h4 id="2、CMD"><a href="#2、CMD" class="headerlink" title="2、CMD"></a>2、CMD</h4><p>定义容器运行时的默认命令，可被docker run 命令中CMD覆盖</p><p>用法：<code>CMD ["命令","参数1","参数2"]</code></p><h4 id="3、ENV"><a href="#3、ENV" class="headerlink" title="3、ENV"></a>3、ENV</h4><p>需求：基于HelloWorld的案例进行改造，要求打印的内容可以任意指定，具体内容在运行容器的时候通过修改环境变量的方式去指定</p><p>脚本编写</p><pre class="line-numbers language-docker" data-language="docker"><code class="language-docker">FROM centos:7ENV CONTENT="HelloWorld"CMD echo $CONTENT  #或  CMD ["sh","-c","echo $CONTENT"]<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h4 id="4、WORKDIR"><a href="#4、WORKDIR" class="headerlink" title="4、WORKDIR"></a>4、WORKDIR</h4><p>设置当前工作目录，如果没有会自动创建</p><p>用法</p><pre class="line-numbers language-docker" data-language="docker"><code class="language-docker">WORKDIR 目录#例子  WORKDIR /root/app<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h4 id="5、RUN"><a href="#5、RUN" class="headerlink" title="5、RUN"></a>5、RUN</h4><p>构建容器时使用</p><p>需求：定义一个CONTENT变量，默认值为hellodocker,在镜像的/app目录下创建一个sg目录，在其中创建一个content.txt文件，文件的内容为CONTENT:变量的值。容器启动时打印content.txt的内容</p><p>命令编写</p><pre class="line-numbers language-docker" data-language="docker"><code class="language-docker">FROM centos:7ENV CONTENT="hellodocker"WORKDIR /app/sgRUN echo $CONTENT &gt; content.txtCMD ["cat","content.txt"]<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="6、ADD"><a href="#6、ADD" class="headerlink" title="6、ADD"></a>6、ADD</h4><p>把构建上下文中的文件或者网络文件添加到镜像中</p><p><strong>注意:如果上下文文件是压缩包，ADD会将其解压在添加到镜像中，如果是网络文件，就要手动解压</strong></p><p>用法</p><pre class="line-numbers language-docker" data-language="docker"><code class="language-docker">ADD 原路径 目标路径#ADD vue.tar.gz .   点代表当前目录<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>需求:在构建目录下存放一个vue.tar.gz包，构建镜像的时候把这个包添加到镜像的/pp目录下解压，然后把其中的dist目录的内容存放到存放在nginx的html目录下，声明开放80端口nginx,用 1.21.5版本</p><p>命令编写 test</p><pre class="line-numbers language-docker" data-language="docker"><code class="language-docker">FROM nginx:1.21.5WORKDIR /appADD rbac_vue.tar.gz .RUN tar -xzvf rbac_vue.tar.gzRUN cp -r rbac_vue/dist/* /usr/share/nginx/htmlCMD ["nginx","-g","daemon off;"]<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>执行<code>docker build -t test01:1 -f test .</code> </p><p>报错：<code>tar (child): rbac_vue.tar.gz: Cannot open: No such file or directory</code></p><p>这是由于ADD有解压功能，所以不用第4行命令，删掉❌</p><p>再次构建镜像成功</p><p>运行<code>docker run -d test01:1</code></p><p>进入容器 <code>docker exec -it 容器名</code></p><p>测试<code>curl 127.0.0.1:80</code>看到返回html文件，说明容器正确运行</p><h4 id="7、EXPOSE"><a href="#7、EXPOSE" class="headerlink" title="7、EXPOSE"></a>7、EXPOSE</h4><pre class="line-numbers language-docker" data-language="docker"><code class="language-docker">EXPOSE 端口号<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="8、COPY"><a href="#8、COPY" class="headerlink" title="8、COPY"></a>8、COPY</h4><p>将构建上下文文件复制到镜像目录中</p><p>注意：COPY不会解压</p><p>用法</p><pre class="line-numbers language-docker" data-language="docker"><code class="language-docker">COPY 原路径 目标路径<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>需求：在构建目录下存放一个rbac_vue.tar.gz包，构建镜像的时候把这个包复制到镜像的/app目录下解压，然后把其中的dist目录的内容存放到存放在nginx的html目录下，声明开放80端口</p><p>命令</p><pre class="line-numbers language-docker" data-language="docker"><code class="language-docker">FROM nginx:1.21.5WORKDIR /appCOPY rbac_vue.tar.gz .RUN tar -xzvf rbac_vue.tar.gzRUN cp -r rbac_vue/dist/* /usr/share/nginx/htmlEXPOSE 80CMD ["nginx","-g","daemon off;"]<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>docker build </p><p>docker run</p><h4 id="9、ENTRYPOINT"><a href="#9、ENTRYPOINT" class="headerlink" title="9、ENTRYPOINT"></a>9、ENTRYPOINT</h4><p>定义容器运行时的默认命令可以在docker run的时候无法覆盖掉ENTRYPOINT中的命令</p><p>ENTRYPOINT [“命令1”，”参数1”，”参数2”]</p><p>ENTRYPOINT [“echo”,”helloworld”]</p><pre class="line-numbers language-docker" data-language="docker"><code class="language-docker">FROM nginx:1.21.5WORKDIR /appCOPY rbac_vue.tar.gz .RUN tar -xzvf rbac_vue.tar.gzRUN cp -r rbac_vue/dist/* /usr/share/nginx/htmlEXPOSE 80ENTRYPOINT ["nginx","-g","daemon off;"]<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="四、🐘部署实例"><a href="#四、🐘部署实例" class="headerlink" title="四、🐘部署实例"></a>四、🐘部署实例</h3><h4 id="1、后端应用优化"><a href="#1、后端应用优化" class="headerlink" title="1、后端应用优化"></a>1、后端应用优化</h4><p>假设mysql以部署好，加入了rbac_net网络</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">docker run -d \-v mysql_data:/var/lib/mysql \-p 3306:3306 \-e MYSQL_ROOT_PASSWORD=root \--name rbac_mysql \--restart always \mysql:5.7<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">docker network create rbac_netdocker network connect rbac_net rbac_mysql<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h5 id="编写DockerFile"><a href="#编写DockerFile" class="headerlink" title="编写DockerFile"></a>编写DockerFile</h5><p>rbac_dockerfile</p><pre class="line-numbers language-docker" data-language="docker"><code class="language-docker">FROM openjdk:8u111# 指定工作目录WORKDIR /app# 添加jar包到镜像中ADD ssadmin-server-2.7.17.jar /app/# 声明开放端口EXPOSE 28080# 启动命令CMD ["java", "-jar", "ssadmin-server-2.7.17.jar", "--spring.datasource.url=jdbc:mysql://rbac_mysql:3306/rbac?characterEncoding=utf-8&amp;serverTimezone=UTC", "--spring.datasource.username=root", "--spring.datasource.password=root"]<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="构建运行"><a href="#构建运行" class="headerlink" title="构建运行"></a>构建运行</h5><p>构建<code>docker build -t rbac:01 -f rbac_dockerfile .</code></p><p>运行容器</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">docker run \-d \-p 28080:28080 \--network rbac_net \--restart always \--name rbac_admin \rbac:01<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>运行<code>docker ps</code>查看</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">CONTAINER ID   IMAGE       COMMAND      CREATED         STATUS       PORTS       NAMESd46848f3325e   rbac:01     "java -jar ' ssadmin…"   3 seconds ago   Up Less than a second   0.0.0.0:28080-&gt;28080/tcp, :::28080-&gt;28080/tcp          rbac_admin2d3fa411a2e5   mysql:5.7   "docker-entrypoint.s…"   9 minutes ago   Up 9 minutes            0.0.0.0:3306-&gt;3306/tcp, :::3306-&gt;3306/tcp, 33060/tcp   rbac_mysql<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h5 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h5><p>使用curl命令测试，由于我上传的是rbac权限管理系统jar包，测试一个登录接口</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">curl --location --request POST 'http://localhost:28080/user/login' \--header 'Content-Type: application/json' \--data '{     "username":"zjz",     "password":"1234"}'<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>返回，成功🤠</p><pre class="line-numbers language-json" data-language="json"><code class="language-json">{    "code": 200,    "msg": "登录成功",    "data": {        "accessToken": "eyJhbGciOiJIUzI1NiJ9.eyJzdWIiOiJ6anoiLCJleHAiOjE3MDAxMzkzMjcsImlhdCI6MTcwMDEzNTcyN30.cz8iJCn51WY1cnNqyrc2cn25VchdJuNToKubpNJy2Ew",        "refreshToken": "eyJhbGciOiJIUzI1NiJ9.eyJzdWIiOiJ6anoiLCJleHAiOjE3MDA3NDA1MjgsImlhdCI6MTcwMDEzNTcyOH0.qeqQFjUPJyiivFAC-7mjqRk7UzxR_voCVGN5sY6lfAY"    }}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>前提，你有提前创建好数据库</strong></p><h4 id="2、前端应用优化"><a href="#2、前端应用优化" class="headerlink" title="2、前端应用优化"></a>2、前端应用优化</h4><h5 id="前提"><a href="#前提" class="headerlink" title="前提"></a>前提</h5><p>将前端vue项目打包为dist文件夹，复制到服务器/usr/rbac/rbac_vue/文件夹下</p><p>编写DockerFile</p><p>/usr/rbac/rbac_vue_dockerfile</p><pre class="line-numbers language-docker" data-language="docker"><code class="language-docker">FROM nginx:1.21.5WORKDIR /appCOPY rbac_vue .RUN cp -r rbac_vue/dist/* /usr/share/nginx/htmlEXPOSE 80ENTRYPOINT ["nginx","-g","daemon off;"]<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>使用该DockerFile构建时报错， No such file or directory</p><p>实际上COPY命令只是将rbac_vue文件夹下的dist文件夹复制到容器的./app文件夹下，故改为</p><pre class="line-numbers language-docker" data-language="docker"><code class="language-docker">FROM nginx:1.21.5WORKDIR /appCOPY rbac_vue .RUN cp -r dist/* /usr/share/nginx/htmlEXPOSE 80ENTRYPOINT ["nginx","-g","daemon off;"]<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>即可，构建<code>docker build -t rbac_vue:01 -f rbac_vue_dockerfile .</code></p><p>成功！</p><p>运行</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">docker run \-d \-p 80:80 \--restart always \--name rbac_vue \rbac_vue:01<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>浏览器输入服务器ip即可</p>]]></content>
      
      
      <categories>
          
          <category> 部署 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> DockerFile </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Docker部署实例学习</title>
      <link href="/2023/11/14/Docker%E9%83%A8%E7%BD%B2%E5%AE%9E%E4%BE%8B%E5%AD%A6%E4%B9%A0/"/>
      <url>/2023/11/14/Docker%E9%83%A8%E7%BD%B2%E5%AE%9E%E4%BE%8B%E5%AD%A6%E4%B9%A0/</url>
      
        <content type="html"><![CDATA[<h2 id="Docker部署案例学习"><a href="#Docker部署案例学习" class="headerlink" title="Docker部署案例学习"></a>Docker部署案例学习</h2><h3 id="一、🐬mysql容器部署"><a href="#一、🐬mysql容器部署" class="headerlink" title="一、🐬mysql容器部署"></a>一、🐬mysql容器部署</h3><h4 id="要求"><a href="#要求" class="headerlink" title="要求"></a>要求</h4><p>能用的5.7版本的mysql容器</p><p>细化要求</p><ol><li>使用的镜像是mysql:5.7</li><li>后台运行      -d</li><li>数据持久化存储     -v</li><li>开放3306端口    -p</li><li>设置root密码    -e</li><li>停止后自动重启   –restart</li><li>容器命名为 rbac_mysql</li></ol><h4 id="命令编写"><a href="#命令编写" class="headerlink" title="命令编写"></a>命令编写</h4><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">docker run -d \-v mysql_data:/var/lib/mysql \-p 3306:3306 \-e MYSQL_ROOT_PASSWORD=root \--name rbac_mysql \--restart always \mysql:5.7<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>可以使用Navicat连接数据库建库建表</p><h3 id="二、🎞️redis容器部署"><a href="#二、🎞️redis容器部署" class="headerlink" title="二、🎞️redis容器部署"></a>二、🎞️redis容器部署</h3><h4 id="要求-1"><a href="#要求-1" class="headerlink" title="要求"></a>要求</h4><p>能用的7版本redis</p><p>细化</p><ol><li>redis 7</li><li>后台运行      -d</li><li>数据持久化存储     -v</li><li>开放6379端口    -p</li><li>停止后自动重启   –restart</li><li>容器命名为 rbac_redis</li><li>开启redis时，开启aof持久化   redis-server –appendonly yes</li></ol><h4 id="命令编写-1"><a href="#命令编写-1" class="headerlink" title="命令编写"></a>命令编写</h4><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">docker run \-d \-v redis_data:/data \-p 6379:6379 \--restart always \--name rbac_redis \redis:7.0 redis-server --appendonly yes<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="三、🍀后端应用部署"><a href="#三、🍀后端应用部署" class="headerlink" title="三、🍀后端应用部署"></a>三、🍀后端应用部署</h3><h4 id="要求-2"><a href="#要求-2" class="headerlink" title="要求"></a>要求</h4><p>使用openjdk 8u111版木，去运行springboot服务，保证该服务能正常使用java -jar ssadmin-server-2.7.17.jar</p><p>server.port=xxxx</p><p>细化</p><ol><li>镜像java:openjdk-8u111</li><li>开放端口 7777</li><li>后台运行    -d</li><li>数据卷同步jar包到容器   -v</li><li>停止后自动重启   –restart</li><li>容器命名为 rbac_admin</li></ol><h4 id="命令编写-2"><a href="#命令编写-2" class="headerlink" title="命令编写"></a>命令编写</h4><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">docker run \-p 7777:7777 \-d \-v /usr/rbac:/usr/rbac \--restart always \--name rbac_admin \java:openjdk-8u111 java -jar ./usr/rbac/ssadmin-server-2.7.17.jar<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="测试接口"><a href="#测试接口" class="headerlink" title="测试接口"></a>测试接口</h4><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">curl --location --request POST 'http://localhost:7777/user/login' \--header 'Content-Type: application/json' \--data '{     "username":"zjz",     "password":"1234"}'<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>发现无法连通，这是因为后端容器和mysql容器还不在一个网络内，无法相互通信</p><h3 id="四、🌍Docker网络"><a href="#四、🌍Docker网络" class="headerlink" title="四、🌍Docker网络"></a>四、🌍Docker网络</h3><p>查看容器ip</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">docker inspect ID<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>输出ip</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">"SandboxKey": "/var/run/docker/netns/79e611004096",            "SecondaryIPAddresses": null,            "SecondaryIPv6Addresses": null,            "EndpointID": "a66189ddab990418b0fc04599852e7670d5fc3b6d3899d55a1666c866330bee5",            "Gateway": "172.17.0.1",            "GlobalIPv6Address": "",            "GlobalIPv6PrefixLen": 0,            "IPAddress": "172.17.0.2",            "IPPrefixLen": 16,            "IPv6Gateway": "",            "MacAddress": "02:42:ac:11:00:02",<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>进入后端应用</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">docker exec -it rbac_admin /bin/sh<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>ping  <code>IPAddress</code></p><p>发现可以容器之间通信</p><p>目标：将需要互相通信的容器加入到一个网络内，用容器名代替ip</p><h4 id="相关操作"><a href="#相关操作" class="headerlink" title="相关操作"></a>相关操作</h4><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">#创建网络docker network create 网络名#查看网络docker network ls#加入网络#1.创建容器时加入 docker run --network 网络名 镜像名      #2.创建后加入 docker network connect rbac_net rbac_admindocker network connect [选项] 网路名 容器名|容器id  #删除网络docker network rm 网络名或id<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>查看网络内部</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">docker network inspect rbac_net<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>可以看到rbac_admin已加入</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">"Containers": {           "51784461bc26048b43d4d2de7908b8ce4bb7b2b2a04113359a814f951226d66d": {               "Name": "rbac_admin",               "EndpointID": "631b8309458d29eb3c6d6c905e69a5cdebcf91cf2ac251cdcdb3fb0cc1319c7e",               "MacAddress": "02:42:ac:12:00:02",               "IPv4Address": "172.18.0.2/16",               "IPv6Address": ""           }       },<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>将rbac_mysql容器加入</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">docker network connect rbac_net rbac_mysql <span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>进入rbac_admin容器执行<code>ping rbac_mysql</code>发现</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">ping rbac_adminPING rbac_admin (172.18.0.2): 56 data bytes64 bytes from 172.18.0.2: icmp_seq=0 ttl=64 time=0.054 ms64 bytes from 172.18.0.2: icmp_seq=1 ttl=64 time=0.075 ms64 bytes from 172.18.0.2: icmp_seq=2 ttl=64 time=0.083 ms64 bytes from 172.18.0.2: icmp_seq=3 ttl=64 time=0.086 ms<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="五、🐕‍🦺容器网络连通"><a href="#五、🐕‍🦺容器网络连通" class="headerlink" title="五、🐕‍🦺容器网络连通"></a>五、🐕‍🦺容器网络连通</h3><h4 id="创建网络"><a href="#创建网络" class="headerlink" title="创建网络"></a>创建网络</h4><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">docker network create rbac_net<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="将容器加入网络"><a href="#将容器加入网络" class="headerlink" title="将容器加入网络"></a>将容器加入网络</h4><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">docker network connect rbac_net rbac_mysqldocker network connect rbac_net rbac_redis<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>后端应用容器在创建时加入</p><p>先删除原来的后端应用容器</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">docker rm -f 容器名或ID<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">docker run \-p 7777:7777 \-d \--network rbac_net \-v /usr/rbac:/usr/rbac \--restart always \--name rbac_admin \java:openjdk-8u111 java -jar ./usr/rbac/ssadmin-server-2.7.17.jar \"--spring.datasource.url=jdbc:mysql://rbac_mysql:3306/rbac?characterEncoding=utf-8&amp;serverTimezone=UTC" \"--spring.datasource.username=root" \"--spring.datasource.password=root" \"--spring.redis.host=rbac_redis" \<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>再次测试登录接口</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">curl --location --request POST 'http://localhost:7777/user/login' \--header 'Content-Type: application/json' \--data '{     "username":"zjz",     "password":"1234"}'<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>发现</p><pre class="line-numbers language-json" data-language="json"><code class="language-json">{    "code":200,    "msg":"登录成功",    "data":{        "accessToken":"eyJhbGciOiJIUzI1NiJ9.eyJzdWIiOiJ6anoiLCJleHAiOjE2OTk5NTUwMjEsImlhdCI6MTY5OTk1MTQyMX0.mHSIBKpOkN77dd4tGsAj25OGFjAjk2wvPdR3-t593kU",        "refreshToken":"eyJhbGciOiJIUzI1NiJ9.eyJzdWIiOiJ6anoiLCJleHAiOjE3MDA1NTYyMjEsImlhdCI6MTY5OTk1MTQyMX0.zrPZWDVsa4bRn7bPeqOMxu2ULHbaV__8MegX6j-uGSQ"}}[root@iZuf6hb114aa40iltf16d9Z ~]# <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>通了🎉</p><h3 id="六、👗部署前端应用"><a href="#六、👗部署前端应用" class="headerlink" title="六、👗部署前端应用"></a>六、👗部署前端应用</h3><h4 id="要求-3"><a href="#要求-3" class="headerlink" title="要求"></a>要求</h4><p>使月nginx1.21.5版本部署sg-blog-vue让用户能正常访问</p><p>细化</p><ol><li>镜像nginx:1.21.5</li><li>开放端口 80</li><li>数据卷方式同步静态资源  -v</li><li>停止后自动重启  –restart</li><li>后台运行  -d</li><li>容器命名为 rbac_vue</li></ol><h4 id="编写命令"><a href="#编写命令" class="headerlink" title="编写命令"></a>编写命令</h4><pre class="line-numbers language-none"><code class="language-none">docker run -d \-p 80:80 \-v /usr/rbac/rbac_vue/dist:/usr/share/nginx/html \--restart always \--name rbac_vue \nginx:1.21.5<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>不用加入网络，但是要将baseURL修改为宿主机的ip</p><p>浏览器输入服务器（宿主机）ip……</p>]]></content>
      
      
      <categories>
          
          <category> 部署 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Docker </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>RBAC系统一键部署服务器流程</title>
      <link href="/2023/11/12/RBAC%E7%B3%BB%E7%BB%9F%E4%B8%80%E9%94%AE%E9%83%A8%E7%BD%B2%E6%9C%8D%E5%8A%A1%E5%99%A8%E6%B5%81%E7%A8%8B/"/>
      <url>/2023/11/12/RBAC%E7%B3%BB%E7%BB%9F%E4%B8%80%E9%94%AE%E9%83%A8%E7%BD%B2%E6%9C%8D%E5%8A%A1%E5%99%A8%E6%B5%81%E7%A8%8B/</url>
      
        <content type="html"><![CDATA[<h1 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h1><p>SSAdmin 是一个基于 Spring Boot、MybatisPlus、Spring Security（待更新）、Mysql、Redis （待更新）和 Vue2 的前后端分离的通用后台管理系统。</p><p>就其部署流程做一个记录</p><h2 id="一、将前后端项目上传至gitee仓库"><a href="#一、将前后端项目上传至gitee仓库" class="headerlink" title="一、将前后端项目上传至gitee仓库"></a>一、将前后端项目上传至gitee仓库</h2><p>这一步主要是便于更新以及服务器拉取代码</p><h3 id="1、新建仓库"><a href="#1、新建仓库" class="headerlink" title="1、新建仓库"></a>1、新建仓库</h3><p>参考：<a href="https://blog.csdn.net/qq_42760090/article/details/108780980">gitee首次创建仓库详细步骤_gitee创建仓库-CSDN博客</a></p><h3 id="2、将前后端项目移入同一文件夹"><a href="#2、将前后端项目移入同一文件夹" class="headerlink" title="2、将前后端项目移入同一文件夹"></a>2、将前后端项目移入同一文件夹</h3><h3 id="3、将该文件夹推送到仓库"><a href="#3、将该文件夹推送到仓库" class="headerlink" title="3、将该文件夹推送到仓库"></a>3、将该文件夹推送到仓库</h3><h5 id="用VS-Code打开该文件夹"><a href="#用VS-Code打开该文件夹" class="headerlink" title="用VS Code打开该文件夹"></a>用VS Code打开该文件夹</h5><p>新建终端，输入<code>git init</code></p><img src="/2023/11/12/RBAC%E7%B3%BB%E7%BB%9F%E4%B8%80%E9%94%AE%E9%83%A8%E7%BD%B2%E6%9C%8D%E5%8A%A1%E5%99%A8%E6%B5%81%E7%A8%8B/image-20231112101012251.png" class="" title="image-20231112101012251"><p>后面会发现文件夹下会多处一份名为git的文件夹，（注意： 文件–查看–显示隐藏文件夹 ，记得开启，否则看不到）说明初始化成功</p><h5 id="连接远程仓库"><a href="#连接远程仓库" class="headerlink" title="连接远程仓库"></a>连接远程仓库</h5><p>在终端中输入 <code>git remote add origin https://gitee.com/xxxxx/xxx.git</code></p><h5 id="git-status"><a href="#git-status" class="headerlink" title="git status"></a><code>git status</code></h5><p>终端输入此命令可以获取修改内容，</p>]]></content>
      
      
      <categories>
          
          <category> Basic </category>
          
      </categories>
      
      
        <tags>
            
            <tag> rbac </tag>
            
            <tag> git </tag>
            
            <tag> 部署 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>RBAC登录接口简单实现</title>
      <link href="/2023/11/12/RBAC%E7%99%BB%E5%BD%95%E6%8E%A5%E5%8F%A3%E7%AE%80%E5%8D%95%E5%AE%9E%E7%8E%B0/"/>
      <url>/2023/11/12/RBAC%E7%99%BB%E5%BD%95%E6%8E%A5%E5%8F%A3%E7%AE%80%E5%8D%95%E5%AE%9E%E7%8E%B0/</url>
      
        <content type="html"><![CDATA[<p>课上实践—实现RBAC登录功能</p><h2 id="🍎一、构建前端UI"><a href="#🍎一、构建前端UI" class="headerlink" title="🍎一、构建前端UI"></a>🍎一、构建前端UI</h2><h3 id="1-创建工程"><a href="#1-创建工程" class="headerlink" title="1.创建工程"></a>1.创建工程</h3><pre class="line-numbers language-Shell" data-language="Shell"><code class="language-Shell">vue create rbac-vue<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>选择<code>Babel</code>,<code>Router</code>,<code>Vuex</code>和<code>Css Pre-processors</code>组件。</p><p><strong>源码****目录结构：</strong></p><ul><li>components：包含了项目中所有的公共组件，例如表格、树形菜单、图表等组件。</li><li>api: 包含了项目中所有的后端接口相关的文件，包括接口的封装和请求方式的定义等。</li><li>router：包含了项目中的前端路由配置文件，用于定义前端路由规则。</li><li>store：包含了项目中的 Vuex 状态管理模块，用于管理应用程序的状态和数据流。</li><li>views：包含了项目中所有的业务组件，例如系统管理、任务调度等组件，每个组件对应一个页面。</li><li>utils：包含了项目中的工具类文件，例如日期处理、字符串处理、请求(axios)封装等工具类文件。</li><li>layout：用于存放系统的基本布局模板。该目录下的文件通常包括顶部导航栏、左侧菜单栏、底部版权信息等。</li></ul><h3 id="2-安装-Element-UI"><a href="#2-安装-Element-UI" class="headerlink" title="2. 安装 Element-UI"></a><strong>2. 安装 Element-UI</strong></h3><p>在项目中安装 Element-UI：</p><pre class="line-numbers language-Shell" data-language="Shell"><code class="language-Shell">npm install element-ui --save<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="3-配置-Element-UI"><a href="#3-配置-Element-UI" class="headerlink" title="3.配置 Element-UI"></a>3.配置 <strong>Element-UI</strong></h3><p>在 <code>main.js</code> 中导入 Element-UI 和它的样式：</p><pre class="line-numbers language-JavaScript" data-language="JavaScript"><code class="language-JavaScript">import ElementUI from 'element-ui';import 'element-ui/lib/theme-chalk/index.css';Vue.use(ElementUI);<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>完整代码如下：</p><pre class="line-numbers language-JavaScript" data-language="JavaScript"><code class="language-JavaScript">import Vue from 'vue'import ElementUI from 'element-ui';import 'element-ui/lib/theme-chalk/index.css';import App from './App.vue'import router from './router'import store from './store'Vue.config.productionTip = falseVue.use(ElementUI);new Vue({  router,  store,   render: h =&gt; h(App)})  .$mount('#app')<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="4-创建Layout通用布局"><a href="#4-创建Layout通用布局" class="headerlink" title="4. 创建Layout通用布局"></a><strong>4. 创建Layout通用布局</strong></h3><ul><li><code>layout</code> 目录：用于存放系统的基本布局模板。该目录下的文件通常包括顶部导航栏、左侧菜单栏、底部版权信息等。</li></ul><p><strong>layout/index.vue</strong>：</p><pre class="line-numbers language-HTML" data-language="HTML"><code class="language-HTML">&lt;template&gt;  &lt;div&gt;      &lt;div class="side-bar"&gt;          &lt;el-menu class="el-menu-vertical-demo" background-color="#545c64" text-color="#fff" active-text-color="#ffd04b"&gt;              &lt;el-menu-item index="/" @click="$router.push('/')"&gt;                  &lt;i class="el-icon-house"&gt;&lt;/i&gt;                  &lt;span slot="title"&gt;首页&lt;/span&gt;              &lt;/el-menu-item&gt;              &lt;el-menu-item index="/rbac/user/list" @click="$router.push('/rbac/user/list')" &gt;                  &lt;i class="el-icon-menu"&gt;&lt;/i&gt;                  &lt;span slot="title"&gt;用户列表&lt;/span&gt;              &lt;/el-menu-item&gt;              &lt;el-menu-item index="/rbac/user/add" @click="$router.push('/rbac/user/add')"&gt;                  &lt;i class="el-icon-setting"&gt;&lt;/i&gt;                  &lt;span slot="title"&gt;添加用户&lt;/span&gt;              &lt;/el-menu-item&gt;          &lt;/el-menu&gt;          &lt;div class="main-content"&gt;              &lt;router-view/&gt;          &lt;/div&gt;      &lt;/div&gt;  &lt;/div&gt;&lt;/template&gt;&lt;style lang="scss" scoped&gt;.side-bar {display: flex;height: 100vh;}.main-content {flex: 1;padding: 20px;}&lt;/style&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="5-配置路由"><a href="#5-配置路由" class="headerlink" title="5. 配置路由"></a><strong>5. 配置路由</strong></h3><p><strong>router</strong><strong>/index.js</strong>：</p><pre class="line-numbers language-JavaScript" data-language="JavaScript"><code class="language-JavaScript">import Vue from 'vue'import VueRouter from 'vue-router'/* Layout */import Layout from '@/layout'Vue.use(VueRouter)const routes = [  {    path: '/',    component: Layout, // 修改为 Layout 组件    children: [      {        path: '',        component: () =&gt; import( '../views/HomeView.vue'),        name: 'home'      }    ]  },]const router = new VueRouter({  mode: 'history',  base: process.env.BASE_URL,  routes})export default router<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>App.vue</strong>：</p><pre class="line-numbers language-HTML" data-language="HTML"><code class="language-HTML">&lt;template&gt;  &lt;div id="app"&gt;    &lt;router-view/&gt;  &lt;/div&gt;&lt;/template&gt;&lt;script&gt;export default {  name: 'App',}&lt;/script&gt;&lt;style&gt;/* 在这里添加你的样式 */&lt;/style&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>views/HomeView.vue</strong>：</p><pre class="line-numbers language-HTML" data-language="HTML"><code class="language-HTML">&lt;template&gt;  &lt;div class="login-container"&gt;    &lt;el-tag&gt;标签一&lt;/el-tag&gt;    &lt;el-tag type="success"&gt;标签二&lt;/el-tag&gt;    &lt;el-tag type="info"&gt;标签三&lt;/el-tag&gt;    &lt;el-tag type="warning"&gt;标签四&lt;/el-tag&gt;    &lt;el-tag type="danger"&gt;标签五&lt;/el-tag&gt;  &lt;/div&gt;&lt;/template&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="6-实现用户管理页面"><a href="#6-实现用户管理页面" class="headerlink" title="6. 实现用户管理页面"></a><strong>6. 实现用户管理页面</strong></h3><p><strong>views/User/List.vue</strong>：</p><pre class="line-numbers language-HTML" data-language="HTML"><code class="language-HTML">&lt;template&gt;  &lt;div class="user-list"&gt;    &lt;el-table :data="users" style="width: 100%"&gt;      &lt;el-table-column prop="username" label="用户名"&gt;&lt;/el-table-column&gt;      &lt;el-table-column prop="name" label="姓名"&gt;&lt;/el-table-column&gt;      &lt;el-table-column prop="gender" label="性别"&gt;&lt;/el-table-column&gt;      &lt;el-table-column prop="phone" label="手机号"&gt;&lt;/el-table-column&gt;    &lt;/el-table&gt;  &lt;/div&gt;&lt;/template&gt;&lt;script&gt;export default {  name: "UserList",  data() {    return {      users: [        {          username: "user1",          name: "张三",          gender: "男",          phone: "13812345678",        },        {          username: "user2",          name: "李四",          gender: "女",          phone: "13987654321",        },        // more users...      ],    };  },};&lt;/script&gt;&lt;style&gt;.user-list {  padding: 20px;}&lt;/style&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>views/User/Add.vue</strong>：</p><pre class="line-numbers language-HTML" data-language="HTML"><code class="language-HTML">&lt;template&gt;  &lt;div class="add-user"&gt;    &lt;h1&gt;添加用户&lt;/h1&gt;    &lt;el-form ref="form" :model="user" :rules="rules" label-width="100px"&gt;      &lt;el-form-item label="用户名" prop="username"&gt;        &lt;el-input v-model="user.username"&gt;&lt;/el-input&gt;      &lt;/el-form-item&gt;      &lt;el-form-item label="姓名" prop="name"&gt;        &lt;el-input v-model="user.name"&gt;&lt;/el-input&gt;      &lt;/el-form-item&gt;      &lt;el-form-item label="性别" prop="gender"&gt;        &lt;el-radio-group v-model="user.gender"&gt;          &lt;el-radio label="男"&gt;男&lt;/el-radio&gt;          &lt;el-radio label="女"&gt;女&lt;/el-radio&gt;        &lt;/el-radio-group&gt;      &lt;/el-form-item&gt;      &lt;el-form-item label="手机号" prop="phone"&gt;        &lt;el-input v-model="user.phone"&gt;&lt;/el-input&gt;      &lt;/el-form-item&gt;      &lt;el-form-item&gt;        &lt;el-button type="primary" @click="submitForm"&gt;提交&lt;/el-button&gt;        &lt;el-button @click="resetForm"&gt;重置&lt;/el-button&gt;      &lt;/el-form-item&gt;    &lt;/el-form&gt;  &lt;/div&gt;&lt;/template&gt;&lt;script&gt;export default {  name: "AddUser",  data() {    return {      user: {        username: "",        name: "",        gender: "",        phone: "",      },      rules: {        username: [          { required: true, message: "请输入用户名", trigger: "blur" },        ],        name: [{ required: true, message: "请输入姓名", trigger: "blur" }],        gender: [{ required: true, message: "请选择性别", trigger: "change" }],        phone: [{ required: true, message: "请输入手机号", trigger: "blur" }],      },    };  },  methods: {    submitForm() {      this.$refs.form.validate(valid =&gt; {        if (valid) {          // TODO: send user data to backend          console.log(this.user);        } else {          console.log("form validation failed");        }      });    },    resetForm() {      this.$refs.form.resetFields();    },  },};&lt;/script&gt;&lt;style&gt;.add-user {  padding: 20px;}&lt;/style&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>router</strong><strong>/index.js</strong>：</p><pre class="line-numbers language-JavaScript" data-language="JavaScript"><code class="language-JavaScript">{    path: '/rbac',    component: Layout,    children: [{        path: 'user/list',        component:() =&gt; import( '../views/User/List.vue')      },      {        path: 'user/add',        component:() =&gt; import( '../views/User/Add.vue')      }    ]  },<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>防止连续点击多次路由报错：</strong></p><pre class="line-numbers language-JavaScript" data-language="JavaScript"><code class="language-JavaScript">// 防止连续点击多次路由报错let routerPush = VueRouter.prototype.push;VueRouter.prototype.push = function push(location) {  return routerPush.call(this, location).catch(err =&gt; err)}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="7-运行项目"><a href="#7-运行项目" class="headerlink" title="7. 运行项目"></a><strong>7. 运行项目</strong></h3><pre class="line-numbers language-Bash" data-language="Bash"><code class="language-Bash">npm run serve<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="👍二、实现登录功能"><a href="#👍二、实现登录功能" class="headerlink" title="👍二、实现登录功能"></a>👍二、实现登录功能</h2><h3 id="1-设计登录页面"><a href="#1-设计登录页面" class="headerlink" title="1. 设计登录页面"></a><strong>1. 设计登录页面</strong></h3><p><strong>views/Login.vue</strong>：</p><pre class="line-numbers language-HTML" data-language="HTML"><code class="language-HTML">&lt;template&gt;  &lt;div class="login-container"&gt;    &lt;div class="login-box"&gt;      &lt;div class="login-logo"&gt;        &lt;a href="#"&gt;          &lt;img src="../assets/logo.png" alt="logo"&gt;        &lt;/a&gt;      &lt;/div&gt;      &lt;div class="login-form"&gt;        &lt;h3&gt;用户登录&lt;/h3&gt;        &lt;el-form ref="form" :model="loginForm" :rules="rules" label-position="left" label-width="0"&gt;          &lt;el-form-item prop="username"&gt;            &lt;el-input v-model="loginForm.username" placeholder="请输入用户名"&gt;&lt;/el-input&gt;          &lt;/el-form-item&gt;          &lt;el-form-item prop="password"&gt;            &lt;el-input type="password" v-model="loginForm.password" placeholder="请输入密码"&gt;&lt;/el-input&gt;          &lt;/el-form-item&gt;          &lt;el-form-item&gt;            &lt;el-button type="primary" @click="do_login" :loading="loading"&gt;登录&lt;/el-button&gt;          &lt;/el-form-item&gt;        &lt;/el-form&gt;      &lt;/div&gt;    &lt;/div&gt;  &lt;/div&gt;&lt;/template&gt;&lt;script&gt;export default {  data() {    return {      loginForm: {        username: '',        password: ''      },      rules: {        username: [{ required: true, message: '请输入用户名', trigger: 'blur' }],        password: [{ required: true, message: '请输入密码', trigger: 'blur' }]      },      loading: false    }  },  methods: {    do_login() {      this.$refs.form.validate(valid =&gt; {        if (valid) {          this.loading = true        }      })    }  }}&lt;/script&gt;&lt;style lang="scss"&gt;.login-container {  height: 100%;  display: flex;  justify-content: center;  align-items: center;  .login-box {    width: 400px;    height: 400px;    border-radius: 5px;    box-shadow: 0px 0px 10px #ccc;    .login-logo {      height: 100px;      display: flex;      justify-content: center;      align-items: center;      img {        height: 80%;      }    }    .login-form {      padding: 20px;      h3 {        font-size: 24px;        margin-bottom: 20px;        text-align: center;      }    }  }}&lt;/style&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="2-配置路由"><a href="#2-配置路由" class="headerlink" title="2. 配置路由"></a><strong>2. 配置路由</strong></h3><p><strong>router</strong><strong>/index.js</strong>：</p><pre class="line-numbers language-JavaScript" data-language="JavaScript"><code class="language-JavaScript">{    path: '/login',    name: 'login',    component: () =&gt; import('../views/Login.vue')},<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="3-封装axios请求"><a href="#3-封装axios请求" class="headerlink" title="3. 封装axios请求"></a><strong>3. 封装axios请求</strong></h3><p>在项目中安装 axios：</p><pre class="line-numbers language-JavaScript" data-language="JavaScript"><code class="language-JavaScript">npm install axios --save<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><strong>utils/request.js</strong>：</p><pre class="line-numbers language-JavaScript" data-language="JavaScript"><code class="language-JavaScript">import axios from 'axios';const service = axios.create({  baseURL: 'https://mock.apifox.cn/m1/2428381-0-default/admin-api',  timeout: 5000});service.interceptors.request.use(  config =&gt; {    // 在请求发送之前对请求数据进行处理    // ...    return config;  },  error =&gt; {    // 对请求错误做些什么    console.log(error);    return Promise.reject(error);  });service.interceptors.response.use(  response =&gt; {    // 对响应数据进行处理    // ...    return response.data;  },  error =&gt; {    // 对响应错误做些什么    console.log(error);    return Promise.reject(error);  });export default service;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="4-封装-Login-api-请求"><a href="#4-封装-Login-api-请求" class="headerlink" title="4. 封装 Login api****请求"></a><strong>4. 封装 Login</strong> <strong>api****请求</strong></h3><p><strong>api</strong><strong>/login.js</strong>：</p><pre class="line-numbers language-JavaScript" data-language="JavaScript"><code class="language-JavaScript">import request from '@/utils/request'// 用户登录export function login(username, password) {  const data = {    username,    password  }  return request({    url: '/user/login',    method: 'post',    data: data  })}// 获取用户信息export function getInfo() {  return request({    url: '/user/getInfo',    method: 'get'  })}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="5-处理登录操作"><a href="#5-处理登录操作" class="headerlink" title="5. 处理登录操作"></a><strong>5. 处理登录操作</strong></h3><p><strong>views/login.vue</strong>：</p><pre class="line-numbers language-JavaScript" data-language="JavaScript"><code class="language-JavaScript">import {login} from '@/api/login.js'          // 登录处理逻辑中增加网络请求          login(this.loginForm.username,this.loginForm.password).then(res =&gt;{              this.$router.push({ path: '/' })            }).catch(() =&gt; {              // 登录失败，显示错误提示              this.$message.error('用户名或密码错误')              this.loading = false            })<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>views/HomeView.vue</strong>：</p><pre class="line-numbers language-HTML" data-language="HTML"><code class="language-HTML">&lt;template&gt;  &lt;div class="success-page"&gt;    &lt;el-main&gt;      &lt;div class="content"&gt;        &lt;h1&gt;Login Successful!&lt;/h1&gt;        &lt;p&gt;Welcome, {{ username }}!&lt;/p&gt;      &lt;/div&gt;    &lt;/el-main&gt;  &lt;/div&gt;&lt;/template&gt;&lt;script&gt;import { getInfo } from "@/api/login";export default {  name: "SuccessPage",  data() {    return {      username: "",    };  },  mounted() {    getInfo().then((res) =&gt; {      this.username = res.data.username;    });  },};&lt;/script&gt;&lt;style scoped&gt;.success-page {  height: 100%;}.content {  margin: 20px;  padding: 20px;  background-color: #ffffff;  border-radius: 4px;  box-shadow: 0 2px 12px 0 rgba(0, 0, 0, 0.1);}&lt;/style&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="6-后端实现登录及获取用户信息接口"><a href="#6-后端实现登录及获取用户信息接口" class="headerlink" title="6. 后端实现登录及获取用户信息接口"></a><strong>6. 后端实现登录及获取用户信息接口</strong></h3><h4 id="1-创建Springboot工程（略）"><a href="#1-创建Springboot工程（略）" class="headerlink" title="1.创建Springboot工程（略）"></a>1.创建Springboot工程（略）</h4><h4 id="2-添加依赖"><a href="#2-添加依赖" class="headerlink" title="2.添加依赖"></a>2.添加依赖</h4><pre class="line-numbers language-XML" data-language="XML"><code class="language-XML">&lt;dependency&gt;    &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;    &lt;artifactId&gt;spring-boot-starter-web&lt;/artifactId&gt;&lt;/dependency&gt;&lt;dependency&gt;    &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;    &lt;artifactId&gt;spring-boot-devtools&lt;/artifactId&gt;    &lt;scope&gt;runtime&lt;/scope&gt;    &lt;optional&gt;true&lt;/optional&gt;&lt;/dependency&gt;&lt;dependency&gt;    &lt;groupId&gt;org.projectlombok&lt;/groupId&gt;    &lt;artifactId&gt;lombok&lt;/artifactId&gt;    &lt;optional&gt;true&lt;/optional&gt;&lt;/dependency&gt;&lt;dependency&gt;    &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;    &lt;artifactId&gt;spring-boot-starter-test&lt;/artifactId&gt;    &lt;scope&gt;test&lt;/scope&gt;&lt;/dependency&gt;&lt;!-- MySQL JDBC driver --&gt;&lt;dependency&gt;    &lt;groupId&gt;mysql&lt;/groupId&gt;    &lt;artifactId&gt;mysql-connector-java&lt;/artifactId&gt;    &lt;version&gt;8.0.33&lt;/version&gt;&lt;/dependency&gt;&lt;!-- MyBatis Spring Boot Starter --&gt;&lt;dependency&gt;    &lt;groupId&gt;org.mybatis.spring.boot&lt;/groupId&gt;    &lt;artifactId&gt;mybatis-spring-boot-starter&lt;/artifactId&gt;    &lt;version&gt;2.2.0&lt;/version&gt;&lt;/dependency&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="3-yml配置文件"><a href="#3-yml配置文件" class="headerlink" title="3.yml配置文件"></a>3.yml配置文件</h4><pre class="line-numbers language-YAML" data-language="YAML"><code class="language-YAML">server:  port: 80#??Mybatis????spring:  datasource:    url: jdbc:mysql://localhost:3306/mydb?characterEncoding=utf-8&amp;serverTimezone=UTC    username: root    password: 123456    driver-class-name: com.mysql.cj.jdbc.Drivermybatis:  mapper-locations: classpath:mapper/*Mapper.xml  #mapper??????  type-aliases-package: com.zjz.rbactest.domain     #???????????????<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="4-数据库构建"><a href="#4-数据库构建" class="headerlink" title="4.数据库构建"></a>4.数据库构建</h4><pre class="line-numbers language-SQL" data-language="SQL"><code class="language-SQL">CREATE DATABASE `mydb`;USE mydb;CREATE TABLE `mydb`.`sys_user`  (  `id` int NOT NULL,  `username` varchar(255) NULL,  `password` varchar(255) NULL,  PRIMARY KEY (`id`));INSERT INTO sys_user (id, username, password)    VALUES    (1, "zjz", "123456");<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="5-代码编写"><a href="#5-代码编写" class="headerlink" title="5.代码编写"></a>5.代码编写</h4><p>实体类domain</p><pre class="line-numbers language-Java" data-language="Java"><code class="language-Java">@Data@AllArgsConstructor@NoArgsConstructorpublic class User {    private Integer id;    private String username;    private String password;}@Datapublic class returnData {    private  Integer id;    private String username;    private String token;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>controller层</p><pre class="line-numbers language-Java" data-language="Java"><code class="language-Java">@RestControllerpublic class UserController {    @Autowired    private UserService userService;    @PostMapping("/user/login")    public CommonResult&lt;?&gt; login(@RequestBody User user){        User user1 = userService.login(user);        if(user1 !=null){            returnData returnData = new returnData();            returnData.setId(user1.getId());            returnData.setUsername(user1.getUsername());            returnData.setToken("weerrerrerer");            return CommonResult.success(returnData);        }        else            return CommonResult.error(400,"用户名或密码错误");    }}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>service层</p><pre class="line-numbers language-Java" data-language="Java"><code class="language-Java">@Servicepublic class UserService {    @Autowired    private UserMapper userMapper;    public User login(User user){        return userMapper.login(user);    }}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>mapper层</p><pre class="line-numbers language-Java" data-language="Java"><code class="language-Java">@Mapperpublic interface UserMapper {    User login(User user);}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>UserMapper.xml</p><pre class="line-numbers language-Java" data-language="Java"><code class="language-Java">&lt;?xml version="1.0" encoding="UTF-8" ?&gt;&lt;!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" &gt;&lt;mapper namespace="com.zjz.rbactest.mapper.UserMapper"&gt;    &lt;select id="login" resultType="com.zjz.rbactest.domain.User"&gt;        select * from sys_user where username=#{username} and password=#{password}    &lt;/select&gt;&lt;/mapper&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>跨域配置</p><pre class="line-numbers language-Java" data-language="Java"><code class="language-Java">@Configurationpublic class WebMvcConfig implements WebMvcConfigurer {    @Override    public void addCorsMappings(CorsRegistry registry) {        registry.addMapping("/**")                .allowedOriginPatterns("*") // 使用allowedOriginPatterns替代allowedOrigins                .allowedMethods("GET", "POST", "PUT", "DELETE", "PATCH", "OPTIONS")                .allowedHeaders("Authorization", "Cache-Control", "Content-Type")                .allowCredentials(true)                .maxAge(3600);    }}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="7-前端解决调试时跨域问题"><a href="#7-前端解决调试时跨域问题" class="headerlink" title="7.前端解决调试时跨域问题"></a>7.前端解决调试时跨域问题</h3><p>跨域问题，是因为浏览器的同源策略限制了不同源的站点之间的请求。</p><p><strong>设置 Axios 的基础</strong> <strong>URL</strong>：</p><pre class="line-numbers language-JavaScript" data-language="JavaScript"><code class="language-JavaScript">axios.defaults.baseURL = '/api'<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>这里，<code>axios.defaults.baseURL = '/api'</code> 是将 Axios 的基础 URL 设置为 ‘/api’。这意味着所有的 Axios 请求都会自动在 URL 前面加上 ‘/api’ 前缀。</p><p><strong>配置 devServer</strong>：</p><p>在 <code>vue.config.js</code> 文件中配置 <code>devServer</code> 属性：</p><pre class="line-numbers language-JavaScript" data-language="JavaScript"><code class="language-JavaScript">module.exports =     {          devServer: {                proxy: {                      "/api": {                            target: "[实际请求的目标地址]",                             changeOrigin: true,                             pathRewrite: {                               "^/api": ""                             }                       }                 }           }       }<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li><code>devServer.proxy</code> 是一个代理配置，所有的 API 请求都会通过这个代理。</li><li><code>"/api"</code> 指的是当请求 URL 前缀为 ‘/api’ 的时候，代理就会生效。</li><li><code>target</code> 是实际 API 服务器的地址。</li><li><code>changeOrigin</code> 是一个选项，将其设置为 <code>true</code> 来代理目标的主机源。</li><li><code>pathRewrite</code> 是一个选项，可以重写请求的路径。<code>"^/api": ""</code> 将 URL 中 ‘/api’ 的部分移除。</li></ul><p><strong>重启****服务</strong>：</p><p>重启server才能使配置生效。</p><p><strong>实际执行过程</strong>：</p><ol><li>首先，你的 Axios 请求的 URL 会自动加上 ‘/api’ 前缀。</li><li>然后，当你发送一个请求时，devServer 代理会拦截以 ‘/api’ 开头的请求，并将其代理到你在 <code>target</code> 中配置的实际 API 服务器。</li><li><code>pathRewrite</code> 会去除 URL 中的 ‘/api’ 前缀，因为实际的 API 服务器可能不识别这个前缀。</li></ol><p>代理配置可以在本地开发环境中解决跨域问题，但需要注意的是，这种配置只在开发环境中有效。在生产环境中，你可能需要在服务器端处理跨域问题。</p>]]></content>
      
      
      <categories>
          
          <category> SpringBoot </category>
          
      </categories>
      
      
        <tags>
            
            <tag> rbac </tag>
            
            <tag> vue </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>分治问题</title>
      <link href="/2023/11/12/%E5%88%86%E6%B2%BB%E9%97%AE%E9%A2%98/"/>
      <url>/2023/11/12/%E5%88%86%E6%B2%BB%E9%97%AE%E9%A2%98/</url>
      
        <content type="html"><![CDATA[<h1 id="分治算法🦀"><a href="#分治算法🦀" class="headerlink" title="分治算法🦀"></a>分治算法🦀</h1><p>分治算法，其本质就是将一个大规模的问题分解为若干个规模较小的相同子问题，分而治之。</p><h3 id="分治算法解题方法"><a href="#分治算法解题方法" class="headerlink" title="分治算法解题方法"></a>分治算法解题方法</h3><h4 id="1-分解"><a href="#1-分解" class="headerlink" title="1.分解"></a>1.分解</h4><p> 将要解决的问题分解为若干个规模较小、相互独立、与原问题形式相同的子问题。</p><h4 id="2-治理"><a href="#2-治理" class="headerlink" title="2.治理"></a>2.治理</h4><p>求解各个子问题。由于各个子问题与原问题形式相同，只是规模较小而已，而当子问题划分得足够小时，就可以用简单的方法解决。</p><h4 id="3-合并"><a href="#3-合并" class="headerlink" title="3.合并"></a>3.合并</h4><p>按原问题的要求，将子问题的解逐层合并构成原问题的解。</p><h4 id="注意🆘"><a href="#注意🆘" class="headerlink" title="注意🆘"></a>注意🆘</h4><p>在整数二分搜索算法中，为了防止在更新搜索区间时产生死循环，需要保证区间的左界（L）或右界（R）在每次迭代时都能够逐渐接近目标值。如果我们不合理地更新这两个界限，有可能会出现无法缩小区间的情况。</p><p>通常情况下，中点（Mid）的计算方式是 <code>(L + R) / 2</code>。当 <code>L</code> 和 <code>R</code> 相邻时（即 <code>L = R - 1</code>），中点的计算可能会导致 <code>L</code> 始终等于 <code>Mid</code>。具体来说：</p><ul><li>当 <code>L = R - 1</code> 时，计算 <code>Mid = (L + R) / 2</code> 将得到 <code>Mid = (L + L + 1) / 2</code>（因为此时 <code>R = L + 1</code>）。</li><li>根据整数除法向下取整的规则，我们得到 <code>Mid = 2L + 1 / 2</code>，进一步简化后 <code>Mid = L</code>（整数部分）。</li></ul><p>这种情况下，如果我们将左界更新为 <code>L = Mid</code>，那么左界实际上并没有变化，因此搜索区间并没有缩小，可能会导致死循环。</p><p>为了解决这个问题，当我们需要更新左界时，中点的计算应该稍作修改，以确保左界能够向右移动。这可以通过在计算中点时加1来实现，即使用 <code>Mid = (L + R + 1) / 2</code>。这样即使在 <code>L</code> 和 <code>R</code> 相邻的情况下，中点也会等于 <code>R</code>，从而避免死循环。具体的数学推导如下：</p><ul><li>令 <code>Mid = (L + R + 1) / 2</code>。</li><li>当 <code>L = R - 1</code> 时，<code>Mid = (L + L + 1 + 1) / 2 = (2L + 2) / 2 = L + 1</code>。</li><li>因此，<code>Mid = R</code>，而不是 <code>L</code>。</li></ul><p>当我们需要更新 <code>L</code> 为 <code>Mid</code> 时，使用修改后的中点计算方法可以保证区间大小在每一步都会减少，从而保证算法能够收敛。</p><h3 id="🐡🐡经典题目"><a href="#🐡🐡经典题目" class="headerlink" title="🐡🐡经典题目"></a>🐡🐡经典题目</h3><h4 id="一、👥归并排序"><a href="#一、👥归并排序" class="headerlink" title="一、👥归并排序"></a>一、👥归并排序</h4><h5 id="方法"><a href="#方法" class="headerlink" title="方法"></a>方法</h5><p>步骤一：首先将待排序的元素分成大小大致相同的两个序列。</p><p>步骤二：再把子序列分成大小大致相同的两个子序列。</p><p>步骤三：如此下去，直到分解成一个元素停止，这时含有一个元素的子序列都是有序的。</p><p>步骤四：进行合并操作，将两个有序的子序列合并为一个有序序列，如此下去，直到所有的元素都合并为一个有序序列。</p><img src="/2023/11/12/%E5%88%86%E6%B2%BB%E9%97%AE%E9%A2%98/fd1e5ee39edc41ff812daad1fbe18e2d.png" class="" title="img"><h5 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h5><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">#include&lt;bits/stdc++.h&gt;using namespace std;int a[100010];void merge(int* a,int low,int mid,int high){    int* b = new int[high-low+1];    int i = low,j = mid+1,k = 0;    while(i &lt;= mid &amp;&amp; j &lt;= high){        if(a[i] &lt;= a[j])        b[k++] = a[i++];        else        b[k++] = a[j++];     }    while(i &lt;= mid)    b[k++] = a[i++];    while (j &lt;= high)    {        b[k++] = a[j++];    }    k = 0;    //注意    for(int i = low;i &lt;= high;i++)    a[i] = b[k++];    delete[] b;}void mergeSort(int* a,int low,int high){    if(low &lt; high){        int mid = (low + high) / 2;        mergeSort(a,low,mid);        mergeSort(a,mid+1,high);        merge(a,low,mid,high);    }}int main(){    int n;    cin &gt;&gt; n;    for(int i = 0;i &lt; n;i++)    cin &gt;&gt; a[i];    mergeSort(a,0,n-1);    for(int i = 0;i &lt; n;i++)    cout &lt;&lt; a[i] &lt;&lt; " ";    return 0;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>转载自<a href="https://blog.csdn.net/weixin_45031801/article/details/127034720">【精选】归并排序算法C++实现（超详细解析！！！！）_c++归并排序-CSDN博客</a></p><h4 id="二、⬆️⬇️逆序对问题"><a href="#二、⬆️⬇️逆序对问题" class="headerlink" title="二、⬆️⬇️逆序对问题"></a>二、⬆️⬇️逆序对问题</h4><p><strong>描述：</strong></p><p>给定一个长度为 <code>n</code> 的整数数列，你的目标是计算出数列中逆序对的总数。</p><p>逆序对定义为数列中一对元素 <code>(a[i], a[j])</code>，其中 <code>i &lt; j</code> 且 <code>a[i] &gt; a[j]</code>。</p><p><strong>输入格式：</strong></p><p>第一行包含一个整数 <code>n</code>，表示数列中的元素个数。</p><p>第二行包含 <code>n</code> 个整数，表示数列的元素，元素之间由一个空格分隔。</p><p><strong>输出格式：</strong></p><p>输出一个整数，表示数列中逆序对的总数。</p><p><strong>数据范围：</strong></p><p>1≤n≤100,000</p><p>数列中的每个元素都是 1≤元素值≤1091≤元素值≤109 的整数。</p><p><strong>样例输入：</strong></p><pre class="line-numbers language-none"><code class="language-none">59 7 8 3 2<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><strong>样例输出：</strong></p><pre class="line-numbers language-none"><code class="language-none">7<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><strong>说明：</strong></p><p>请不要使用简单的双重循环来直接计算逆序对的数量，因为这种方法在最坏的情况下的时间复杂度为 O(n^2)，可能无法在合理的时间内处理大数据量。推荐使用分治策略，如通过修改归并排序算法来计算逆序对，以实现更高效的解法。</p><h5 id="思路："><a href="#思路：" class="headerlink" title="思路："></a><strong>思路：</strong></h5><p>使用分治法求解逆序对问题时，考虑逆序对出现的三种不同情况是很重要的。这三种情况指的是两个元素 A[i]和 A[j]形成逆序对 i&lt;j时，这两个元素可以位于：</p><ol><li><strong>左半部分</strong>：这意味着逆序对都位于分治法中左边的部分。在这种情况下，左半部分的递归调用将会计算出这些逆序对。</li><li><strong>右半部分</strong>：这意味着逆序对都位于分治法中右边的部分。同样，右半部分的递归调用将会找到这些逆序对。</li><li><strong>跨越中点</strong>：这是最关键的情况，逆序对的一个元素在左半部分，而另一个元素在右半部分。这些逆序对不能单独在左半部分或右半部分的递归调用中找到，因为它们跨越了两部分。它们必须在合并这两个有序子数组的过程中被计算出来。</li></ol><p>在归并排序的合并阶段，对于最后一种情况，即跨越中点的逆序对，我们可以这样计算：当我们从左半部分取出元素 L[i] 并且这个元素大于从右半部分取出的元素 R[j] 时，不仅 L[i]和 R[j] 形成了逆序对，L[i]与 R 中 j 之后的所有元素也都将形成逆序对，因为右半部分已经是有序的。因此，我们可以直接添加逆序对的数量为 mid−i+1（如果 mid 是左半部分的最后一个元素的索引）。</p><p>这种分治的方法允许我们在 O(nlogn)时间内计算出整个数组的逆序对数量，这是非常高效的，尤其是对于大数据集来说。</p><h5 id="代码-1"><a href="#代码-1" class="headerlink" title="代码"></a>代码</h5><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">#include&lt;bits/stdc++.h&gt;using namespace std;int a[100010];int b[100010];long long merge_sort(int l,int r){    if(l &gt;= r) return 0;    int mid = (l+r) &gt;&gt; 1;        long long ans = 0;    ans = merge_sort(l,mid) + merge_sort(mid+1,r);   //递归计算左右两边逆序对    //合并时计算跨越中点的逆序对数    int i  = l,j = mid +1,k = 0;    while(i &lt;= mid &amp;&amp; j &lt;= r){        if(a[i] &lt;= a[j])  b[k++] = a[i++];        else{            b[k++] = a[j++];            ans += mid - i + 1;    //理解a[i]与a[j]成逆序，a[i]~a[mid]都与a[j]成逆序        }    }    while(i &lt;= mid) b[k++] = a[i++];    while(j &lt;= r)  b[k++] = a[j++];    for(int i = l,k = 0;i &lt;= r;k++,i++) a[i] = b[k];    return ans;}int main(){     int n;     cin &gt;&gt; n;     for(int i = 0;i &lt; n;i++){        cin &gt;&gt; a[i];     }     long long res = merge_sort(0,n-1);     cout &lt;&lt; res;     return 0;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="三、🙉快速选择"><a href="#三、🙉快速选择" class="headerlink" title="三、🙉快速选择"></a>三、🙉快速选择</h4><p><strong>描述：</strong></p><p>给定一个长度为 <code>n</code> 的整数数列和一个整数 <code>k</code>，你需要编写一个程序，使用快速选择算法找出并返回数列中第 <code>k</code> 小的元素。</p><p><strong>输入格式：</strong></p><p>第一行包含两个整数 <code>n</code> 和 <code>k</code>。</p><p>第二行包含 <code>n</code> 个整数，这些整数构成你需要处理的数列，每两个整数之间用空格分隔。</p><p><strong>输出格式：</strong></p><p>输出仅包含一个整数，即数列中第 <code>k</code> 小的元素。</p><p><strong>数据范围：</strong></p><p>1≤n≤100,000</p><p>1≤k≤n</p><p>数列中的每个元素都是一个 1≤元素值≤10^9</p><p><strong>样例输入：</strong></p><pre class="line-numbers language-none"><code class="language-none">7 410 7 8 9 1 5 2<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><strong>样例输出：</strong></p><pre class="line-numbers language-none"><code class="language-none">7<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><strong>说明：</strong></p><p>在编写程序时，应当使用快速选择算法的原理来实现找到第 <code>k</code> 小的元素。快速选择是快速排序算法的一个变种，它采用了类似于快速排序的分治策略来寻找未排序数列中第 <code>k</code> 小的元素。快速选择算法的平均时间复杂度为 O(n)，但最坏情况下会退化到 O(n2)。请尽量实现一个效率较高的快速选择算法，以处理大数据量的输入。</p><h5 id="代码-2"><a href="#代码-2" class="headerlink" title="代码"></a>代码</h5><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">#include&lt;iostream&gt;using namespace std;int a[100010];int quick_sel(int l,int h,int k){    if(l == h) return a[l];    //保证k在区间(l,r)内，当区间中只有一个数时，就是排第k的数    int x = a[l];    int i = l-1;    int j = h+1;    while(i &lt; j){        while(a[++i] &lt; x);        while(a[--j] &gt; x);        if(i &lt; j) swap(a[i],a[j]);    }    int m = j - l + 1;//求出区间的长度，之所以用j，是因为这个是由下面如何递归决定的。递归的是solve(l,j,k)，说明区间长度就是j-l+1。如果换成i，就必须用递归区间为i的方式    if(k &lt;= m)        return quick_sel(l,j,k);    else        return quick_sel(j+1,h,k-m);}int main(){    int n,k;    cin &gt;&gt; n &gt;&gt; k;    for(int i = 0;i &lt; n;i++)        cin &gt;&gt; a[i];        cout &lt;&lt; quick_sel(0,n-1,k);    return 0;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="四、👇🏻最大子数组和"><a href="#四、👇🏻最大子数组和" class="headerlink" title="四、👇🏻最大子数组和"></a>四、👇🏻<strong>最大子数组和</strong></h4><p><strong>描述：</strong></p><p>给定一个整数数组 <code>nums</code>，找出其中的连续子数组（至少包含一个元素）使得该子数组的和最大，并返回这个最大的和。</p><p><strong>输入：</strong></p><ul><li>第一行数组长度<code>n</code></li><li>一个整数数组 <code>nums</code>，其中 <code>1 &lt;= nums.length &lt;= 1000</code> 且 <code>-10^4 &lt;= nums[i] &lt;= 10^4</code>。</li></ul><p><strong>输出：</strong></p><ul><li>返回该数组中具有最大和的连续子数组的和。</li></ul><h5 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h5><p>分治法求解最大子序和算法，递归地将数组分为两个部分，并分别求解这两部分的最大子序和，最后它会找出横跨两个部分的最大子序和，从而计算出整个区间的最大子序和。</p><p>以下是算法的主要步骤：</p><ol><li><strong>基本情况处理</strong>：如果当前区间只有一个元素，即<code>l == r</code>，则最大子序和就是该元素本身，因为没有其他选择。</li><li><strong>分解问题</strong>：<ul><li>找到中间点<code>m</code>，将当前区间分为<code>[l, m]</code>和<code>[m+1, r]</code>两部分。</li></ul></li><li><strong>递归解决子问题</strong>：<ul><li>递归计算左半部分的最大子序和<code>L</code>；</li><li>递归计算右半部分的最大子序和<code>R</code>。</li></ul></li><li><strong>合并解决方案</strong>：<ul><li>通过计算横跨中间的最大子序和<code>LR</code>，这涉及从中间向左扫描求左半边最大值，以及从中间向右扫描求右半边最大值，最后相加。</li><li>三者中的最大值即为当前区间的最大子序和，可以通过<code>max(max(L,R),LR)</code>来计算。</li></ul></li><li><strong>返回结果</strong>：<ul><li>最后，<code>max_sum(1, n)</code>返回的就是整个数组的最大子序和。</li></ul></li></ol><h5 id="代码-3"><a href="#代码-3" class="headerlink" title="代码"></a>代码</h5><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">#include&lt;iostream&gt;using namespace std;int a[1010];int abc(int l,int m,int r){    int ansL = a[m],ansR = a[m+1];    int sumL = 0,sumR = 0;    for(int i = m;i &gt;= l;i--){        sumL += a[i];        ansL = max(sum,ansL);    }    for(int i = m+1;i &lt;= r;i++){        sumR += a[i];        ansR = max(sumR,ansR);    }    return ansR + ansL;}int max_sum(int l,int r){    if(l == r) return a[l];  //结束条件    int m = l + r &gt;&gt; 1;    int L = max_sum(l,m);   //最大连续子数组在左边    int R = max_sum(m+1,r);  //最大连续子数组在右边    //横跨左右子数组    int LR = abc(l,m,r);    return max(max(L,R),LR); }int main(){    int n;    cin &gt;&gt; n;    for(int i = 0;i &lt; n;i++){        cin &gt;&gt; a[i];    }    cout &lt;&lt; max_sum(0,n-1);    return 0;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="👣二分查找"><a href="#👣二分查找" class="headerlink" title="👣二分查找"></a>👣二分查找</h2><h3 id="整数二分搜索步骤"><a href="#整数二分搜索步骤" class="headerlink" title="整数二分搜索步骤"></a><strong>整数二分搜索步骤</strong></h3><p>整数二分搜索的四个基本步骤，具体内容如下：</p><ol><li><strong>区间确定</strong>：确定一个区间 [L, R]（注意此时是<strong>左闭右闭</strong>区间）。使得答案一定在这区间中。</li><li><strong>条件判断</strong>：确定一个判断条件。使得判断条件关于答案具有二段性，并且答案一定是该二段性的分界点。。</li><li><strong>中点计算</strong>：令 Mid = (L + R) / 2。通过判断条件在Mid是否成立，缩小区间；</li><li><strong>区间缩小</strong>：根据判断条件，更新L 或 R（<code>R=Mid</code> 或 <code>L=Mid</code>），缩小区间（注意也必须是<strong>左闭右闭</strong>区间）。</li></ol><h3 id="例题"><a href="#例题" class="headerlink" title="例题"></a>例题</h3><h4 id="一、🪆有序数组中查找数"><a href="#一、🪆有序数组中查找数" class="headerlink" title="一、🪆有序数组中查找数"></a>一、🪆有序数组中查找数</h4><p>给定一个严格单调递增的序列，这个序列经过一次旋转后，可能在某个枢轴点上发生了旋转，导致原有序列被分为两部分，前面部分的所有元素都大于后面部分的所有元素，如下图所示：</p><pre class="line-numbers language-none"><code class="language-none">原始序列：1 -&gt; 2 -&gt; 3 -&gt; 4 -&gt; 5 -&gt; 6 -&gt; 7旋转后的序列：4 -&gt; 5 -&gt; 6 -&gt; 7 -&gt; 1 -&gt; 2 -&gt; 3<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>旋转后的序列依旧保持了分段的单调递增特性。请编写一个算法，找出并返回旋转后序列中的最小元素。</p><p>假设序列中不存在重复元素。</p><p><strong>输入</strong>：</p><ul><li>第一行 n, (0 &lt; n &lt; 10000000)</li><li>第二行，n个整数，一个整数数组，代表旋转后的序列。</li></ul><p><strong>输出</strong>：序列中的最小元素。</p><p><strong>示例</strong>：</p><p><strong>输入:</strong></p><pre class="line-numbers language-none"><code class="language-none">74 5 6 7 0 1 2<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><strong>输出:</strong></p><pre class="line-numbers language-none"><code class="language-none">0<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h5 id="思路-1"><a href="#思路-1" class="headerlink" title="思路"></a>思路</h5><p>这个问题可以通过二分查找算法高效地解决。基本思想是，通过比较中间元素和序列最右边的元素来决定最小值是在左边还是右边的分段中。</p><ul><li>如果中间元素大于最右边的元素，则最小值一定在中间元素的右边。</li><li>如果中间元素小于最右边的元素，则最小值一定在中间元素的左边（包括它自己）。</li></ul><p>通过不断地缩小搜索范围来查找最小元素。</p><h5 id="代码-4"><a href="#代码-4" class="headerlink" title="代码"></a>代码</h5><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">#include&lt;iostream&gt;using namespace std;int a[10000010];int main(){    int n;    cin &gt;&gt; n;    for(int i = 0;i &lt; n;i++){        scanf("%d",&amp;a[i]);             //这里用scanf,因为效率高    }    int l = 0,r = n-1;    while(l &lt; r){        int mid =l+r &gt;&gt; 1;        if(a[mid] &gt; a[r])            l = mid + 1;            else            r = mid;     //a[mid]可能是答案    }    cout &lt;&lt; a[r] &lt;&lt; endl;    return 0;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="二、🤿有序数组中查找数"><a href="#二、🤿有序数组中查找数" class="headerlink" title="二、🤿有序数组中查找数"></a>二、🤿<strong>有序数组中查找数</strong></h4><p>实现一个算法，在一个升序排列的整数数组中找到一个给定整数 <code>k</code> 的起始位置和终止位置。如果这个整数在数组中出现多次，起始位置指的是 <code>k</code> 首次出现的索引(索引从0开始计算)，终止位置是 <code>k</code> 最后一次出现的索引。如果 <code>k</code> 在数组中没有出现，则需要返回一对 <code>-1</code>。</p><p><strong>输入格式：</strong></p><ul><li>第一行包含两个整数 <code>n</code> 和 <code>q</code>，其中 <code>n</code> 是数组的长度，<code>q</code> 是查询的次数。</li><li>第二行包含 <code>n</code> 个升序排列的整数，表示数组的内容。</li><li>接下来的 <code>q</code> 行，每行包含一个整数 <code>k</code>，表示需要查询的数字。</li></ul><p><strong>输出格式：</strong></p><ul><li>对于每个查询，输出一行，包含两个整数，即数字 <code>k</code> 的起始位置和终止位置。</li><li>如果数组中不存在该元素，则输出 <code>-1 -1</code>。</li></ul><p><strong>数据范围：</strong></p><ul><li><code>1 ≤ n ≤ 100000</code></li><li><code>1 ≤ q ≤ 10000</code></li><li>数组中的整数和查询的整数 <code>k</code> 的取值范围都是 <code>1</code> 到 <code>10000</code>。</li></ul><p><strong>输入样例：</strong></p><pre class="line-numbers language-none"><code class="language-none">6 31 2 3 3 3 4345<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>输出样例：</strong></p><pre class="line-numbers language-none"><code class="language-none">2 45 5-1 -1<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h5 id="思路-2"><a href="#思路-2" class="headerlink" title="思路"></a>思路</h5><p>同样用二分的思路，先找要找数字的左边界，如果能找到左边界，再确定右边界，否则输出<code>-1 -1</code></p><h5 id="代码-5"><a href="#代码-5" class="headerlink" title="代码"></a>代码</h5><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">#include&lt;iostream&gt;using namespace std;int a[100010];int main(){    int n,k;    cin &gt;&gt; n &gt;&gt; k;    for(int i = 0;i &lt; n;i++)        cin &gt;&gt; a[i];    while(k--){        int t;        cin &gt;&gt; t;        int l = 0,r = n-1;        while(l &lt; r){            int m = l+r &gt;&gt; 1;            if(a[m] &gt;= t)                r = m;            else                l = m + 1;        }        if(a[r] == k){        cout &lt;&lt; r &lt;&lt; " ";        //找结束位置        r = n-1;           //l已经是左边界，无需定义        while(l &lt; r){            int m = l+r+1 &gt;&gt; 1;            if(a[m] &lt;= t)                l = m;            else                r = m - 1;         }        cout &lt;&lt; l &lt;&lt; endl;    }else        cout &lt;&lt; "-1 -1" &lt;&lt; endl;    }    return 0;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="三、👨‍👧‍👦数的三次方根"><a href="#三、👨‍👧‍👦数的三次方根" class="headerlink" title="三、👨‍👧‍👦数的三次方根"></a>三、👨‍👧‍👦<strong>数的三次方根</strong></h4><p><strong>题目描述：</strong></p><p>编写一个程序来找出一个给定的浮点数 n� 的三次方根。</p><p><strong>输入格式：</strong></p><p>输入只有一行，这一行包含一个浮点数 n�。</p><p><strong>输出格式：</strong></p><p>输出也是一行，包含一个浮点数，即 n� 的三次方根。输出结果需保留六位小数。</p><p><strong>数据范围：</strong></p><p>−10000≤n≤10000−10000≤�≤10000</p><p><strong>样例：</strong></p><p>输入：</p><pre class="line-numbers language-none"><code class="language-none">-1000.00<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>输出：</p><pre class="line-numbers language-none"><code class="language-none">-10.000000<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h5 id="思路-3"><a href="#思路-3" class="headerlink" title="思路"></a>思路</h5><p>由于是浮点数，不用担心会陷入死循环，但是左右边界只会无限接近，由于题目要求精确到小数点后六位，所有只要左右边界的误差小于<code>1e-6</code>即可输出边界值</p><h5 id="代码-6"><a href="#代码-6" class="headerlink" title="代码"></a>代码</h5><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">#include&lt;iostream&gt;#include&lt;iomanip&gt;using namespace std;int main(){    double n;    cin &gt;&gt; n;    double l = -10000,r = 10000;    while(r - l &gt; 1e-8){        double m = (l + r) / 2.0;    if(m*m*m &lt;= n)          l = m;        else          r = m;    }    //cout&lt;&lt;fixd&lt;&lt;setprecision(6)&lt;&lt; endl;    printf("%lf",l);return 0;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="四、🌲🌳🌴砍树"><a href="#四、🌲🌳🌴砍树" class="headerlink" title="四、🌲🌳🌴砍树"></a>四、🌲🌳🌴<strong>砍树</strong></h4><p><strong>题目描述：</strong></p><p>在一片森林里，有 n 棵树，每棵树的高度不尽相同。伐木工人需要从这些树中砍下 k 段等长的木材。为了使得所砍的木材尽可能地长，需要确定砍树时每段木材的最大可能长度。要求输出的木材长度是整数。</p><p><strong>输入说明：</strong></p><ul><li>第一行输入包含两个整数 n 和 k，其中 n 表示树的总数，k 表示需要砍下的木材段数。</li><li>第二行输入包含 n 个整数，每个整数表示一棵树的高度。</li></ul><p><strong>输出说明：</strong></p><ul><li>输出一个整数，表示伐木工人能砍得的最长木材长度。</li></ul><p><strong>输入示例：</strong></p><p><strong>输入：</strong></p><pre class="line-numbers language-none"><code class="language-none">3 43 5 4<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><strong>输出：</strong></p><pre class="line-numbers language-none"><code class="language-none">2<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><strong>数据范围：</strong></p><ul><li>1 &lt;=<code>n</code>&lt;= 10^5</li><li>1 &lt;=<code>k</code>&lt;= 10^8</li><li>1 &lt;=<code>L_i</code>&lt;= 10^8 代表每棵树的长度</li></ul><h5 id="代码-7"><a href="#代码-7" class="headerlink" title="代码"></a>代码</h5><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">#include&lt;iostream&gt;using namespace std;int a[100010];int main(){    int n,k;    cin &gt;&gt; n &gt;&gt; k;    int l = 0,r = 0,ans = 0;             //确定可行解区间     for(int i = 0;i &lt; n;i++){        cin &gt;&gt; a[i];        if(a[i] &gt; r)            r = a[i];     }    while(l &lt; r){        int m = l+r+1 &gt;&gt; 1;        long long sum = 0;        for(int i = 0;i &lt; n;i++){            sum += a[i]/m;        }        if(sum &lt; k)            r = m -1;        else        {            l = m;            ans = m;        }    }    cout &lt;&lt; ans &lt;&lt; endl;    return 0;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="五、🐸数列分段"><a href="#五、🐸数列分段" class="headerlink" title="五、🐸数列分段"></a>五、🐸<strong>数列分段</strong></h4><p><strong>题目描述：</strong></p><p>对于一个长度为 N 的正整数数列，现要将其分成 M 段（M ≤ N），要求每段连续，并使每段的和的最大值尽可能小。</p><p><strong>输入格式：</strong></p><ul><li>第一行包含两个正整数 N 和 M。</li><li>第二行包含 N 个由空格隔开的非负整数，表示数列中的每个元素。</li></ul><p><strong>输出格式：</strong></p><ul><li>输出一个正整数，表示分段后每段和的最大值的最小可能值。</li></ul><p><strong>示例：</strong></p><p><strong>输入：</strong></p><pre class="line-numbers language-none"><code class="language-none">5 34 2 4 5 1<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><strong>输出：</strong></p><pre class="line-numbers language-none"><code class="language-none">6<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><strong>数据范围：</strong></p><ul><li>1 &lt; <code>M &lt;= N</code> &lt; 1e5</li><li><code>A_i</code> &lt; 1e9</li></ul><h5 id="代码-8"><a href="#代码-8" class="headerlink" title="代码"></a>代码</h5><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">#include&lt;iostream&gt;using namespace std;int a[100010];int n,m;bool check(long long mid){    int cnt = 1;    int sum = 0;    for(int i = 0;i &lt; n;i++){        if(a[i] &gt; mid) return false;        if(sum + a[i] &gt; mid)        {            cnt++;            sum = a[i];        }else{            sum+=a[i];        }    }    return cnt &lt;= m;}int main(){    cin &gt;&gt; n &gt;&gt; m;    int l = 0,r = 0;    for(int i = 0;i &lt; n;i++){        //确定好初始边界        cin &gt;&gt; a[i];        l = max(a[i],l);        r += a[i];    }    long long ans = 0;    while(l &lt;= r){        long long mid = (l + r) &gt;&gt; 1;        if(check(mid)){            r = mid - 1;            ans = mid;        }else        {            l = mid + 1;        }    }    cout &lt;&lt; ans &lt;&lt; endl;    return 0;    }<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>期末可能会考二分查找次数，给个序列，问查找次数</p><img src="/2023/11/12/%E5%88%86%E6%B2%BB%E9%97%AE%E9%A2%98/image-20231115095239468.png" class="" title="image-20231115095239468">]]></content>
      
      
      <categories>
          
          <category> Algorithm </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 分治 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>自然辩证法与马克思主义思想中的知识建构</title>
      <link href="/2023/11/11/%E8%87%AA%E7%84%B6%E8%BE%A9%E8%AF%81%E6%B3%95%E4%B8%8E%E9%A9%AC%E5%85%8B%E6%80%9D%E4%B8%BB%E4%B9%89%E6%80%9D%E6%83%B3%E4%B8%AD%E7%9A%84%E7%9F%A5%E8%AF%86%E5%BB%BA%E6%9E%84/"/>
      <url>/2023/11/11/%E8%87%AA%E7%84%B6%E8%BE%A9%E8%AF%81%E6%B3%95%E4%B8%8E%E9%A9%AC%E5%85%8B%E6%80%9D%E4%B8%BB%E4%B9%89%E6%80%9D%E6%83%B3%E4%B8%AD%E7%9A%84%E7%9F%A5%E8%AF%86%E5%BB%BA%E6%9E%84/</url>
      
        <content type="html"><![CDATA[<h3 id="自然辩证法与马克思主义思想中的知识建构"><a href="#自然辩证法与马克思主义思想中的知识建构" class="headerlink" title="自然辩证法与马克思主义思想中的知识建构"></a>自然辩证法与马克思主义思想中的知识建构</h3><h4 id="引言"><a href="#引言" class="headerlink" title="引言"></a>引言</h4><p>​在人类思想史上，马克思主义以其深刻的社会分析和综合性的思考而引起广泛关注。本文将聚焦于马恩主义思想中的自然辩证法，并通过对恩格斯未完成著作《自然辩证法》的解读，探讨自然辩证法在知识建构中的作用。通过对自然辩证法和马克思恩格斯本人的思想的回顾，我们将探索这一综合性思维在当代教育和知识体系构建中的启示。</p><h4 id="自然辩证法的哲学基础"><a href="#自然辩证法的哲学基础" class="headerlink" title="自然辩证法的哲学基础"></a>自然辩证法的哲学基础</h4><ol><li><p><strong>发展和变化的观念</strong></p><p>自然辩证法强调一切事物都处于不断发展和变化之中。这种哲学基础反映在对社会历史发展的分析上，认为社会制度和经济关系也随着历史的推移而发生演变。</p></li><li><p><strong>内在矛盾和对立的推动</strong></p><p>自然辩证法认为一切事物内部都包含着矛盾和对立。类似地，马克思主义视角下，社会中存在的阶级对立和经济矛盾推动着社会的发展。</p></li></ol><h4 id="马克思主义思想的博学综合性"><a href="#马克思主义思想的博学综合性" class="headerlink" title="马克思主义思想的博学综合性"></a>马克思主义思想的博学综合性</h4><ol><li><p><strong>多领域涉猎</strong></p><p>马克思和恩格斯的博学综合性，在阅读《自然辩证法》一书的过程中，深刻地感受到了他们对自然科学、哲学、历史等领域的涉猎，体现了对于社会现象的全面关注。自然辩证法为这种多领域涉猎提供了理论支持，强调事物内在的复杂性和多样性。</p></li><li><p><strong>否定之否定的观念</strong></p><p>马克思主义思想中的”否定之否定”的概念与自然辩证法有关。在社会变革的过程中，旧的制度被否定，但同时也包含了新的发展方向。这种观念反映了自然辩证法中事物发展的阶段性和渐进性。</p></li></ol><h4 id="知识建构与自然辩证法的结合"><a href="#知识建构与自然辩证法的结合" class="headerlink" title="知识建构与自然辩证法的结合"></a>知识建构与自然辩证法的结合</h4><ol><li><p><strong>对知识的整合和连接</strong></p><p>自然辩证法的思想启示我们在知识建构中要注重对事物整体的理解，将不同领域的知识进行有机整合。马克思主义的博学综合性为构建这种全面的知识网络提供了理论基础。</p></li><li><p><strong>理论与实践相结合</strong></p><p>马克思主义思想中强调理论与实践的相互关系，这与自然辩证法的观点相契合。知识不仅仅是对于事物本质的理论认知，还需要通过实践去检验和发展。</p></li></ol><h4 id="对自然辩证法和知识建构的思考"><a href="#对自然辩证法和知识建构的思考" class="headerlink" title="对自然辩证法和知识建构的思考"></a>对自然辩证法和知识建构的思考</h4><ol><li><p><strong>跨学科思考与综合性学科研究</strong></p><p>自然辩证法的思想启发我们在知识建构中要进行跨学科思考，打破学科之间的界限。这与你提出的构建知识网络的主张相契合，有助于形成更为有机的知识结构。</p></li><li><p><strong>对分工的反思</strong></p><p>马克思主义思想中对分工的批判与自然辩证法对于事物内在矛盾的强调呼应。在当代社会，对于学科分工是否同样导致了对知识的局限性值得深入思考。</p></li></ol><h4 id="结论"><a href="#结论" class="headerlink" title="结论"></a>结论</h4><p>通过对自然辩证法和马克思主义思想的回顾，我们看到了一种对于知识的全面关注和综合性思考。自然辩证法的哲学基础为对事物发展的理解提供了一种框架，而马克思主义的博学综合性则为跨学科思考和综合性学科研究提供了理论基础。在当代，我们或许可以从这一综合性思维中得到启示，构建更加有机、全面的知识体系，以推动社会和个体的全面发展。</p>]]></content>
      
      
      <categories>
          
          <category> HomeWork </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 自然辩证法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>动态规划之石子合并</title>
      <link href="/2023/11/10/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92%E4%B9%8B%E7%9F%B3%E5%AD%90%E5%90%88%E5%B9%B6/"/>
      <url>/2023/11/10/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92%E4%B9%8B%E7%9F%B3%E5%AD%90%E5%90%88%E5%B9%B6/</url>
      
        <content type="html"><![CDATA[<h1 id="动态规划之石子合并"><a href="#动态规划之石子合并" class="headerlink" title="动态规划之石子合并"></a>动态规划之石子合并</h1><p>经典的动态规划问题，期末考试复习用，一般有三种情况</p><h3 id="一、🍀任意合并"><a href="#一、🍀任意合并" class="headerlink" title="一、🍀任意合并"></a>一、🍀任意合并</h3><p>有N堆石子，现要将石子有序的合并成一堆，规定如下：每次只能移动任意的2堆石子合并，合并花费为新合成的一堆石子的数量。求将这N堆石子合并成一堆，输出最少花费</p><p>这个属于贪心问题，和哈夫曼树的思想一致，优先挑选数量最少的两堆石头合并即可，不过多讨论。</p><h3 id="二、🔗相邻合并"><a href="#二、🔗相邻合并" class="headerlink" title="二、🔗相邻合并"></a>二、🔗相邻合并</h3><p>有N堆石子，现要将石子有序的合并成一堆，规定如下：每次只能移动相邻的2堆石子合并，合并花费为新合成的一堆石子的数量。求将这N堆石子合并成一堆的总花费最小。</p><p>设有四堆石子数量分别为num[N]</p><p>1 3 5 2</p><p>使用二维数组<code>dp[i][j]</code>来代表合并第i堆到第j堆需要的最小花费</p><table><thead><tr><th align="center">i   j</th><th align="center">1</th><th align="center">2</th><th align="center">3</th><th align="center">4</th></tr></thead><tbody><tr><td align="center">1</td><td align="center">0</td><td align="center">4</td><td align="center">？</td><td align="center">？</td></tr><tr><td align="center">2</td><td align="center"></td><td align="center">0</td><td align="center">8</td><td align="center">？</td></tr><tr><td align="center">3</td><td align="center"></td><td align="center"></td><td align="center">0</td><td align="center">7</td></tr><tr><td align="center">4</td><td align="center"></td><td align="center"></td><td align="center"></td><td align="center">0</td></tr></tbody></table><p>上面 <code>i=j</code>时很显然<code>dp[i][j]</code> = 0</p><p>i与j相邻时,<code>dp[i][j]</code> = num[i] + num[j] ，表格中打问号的值无法直接得到？</p><p>我们设<code>s[i][j]</code>为第i堆到第j堆石子的数量之和,有：</p><p><code>dp[1][3] = min(dp[1][1] + dp[2][3],dp[1][2] + dp[3][3]) + sum[1][3]</code></p><p><code>dp[2][4] = min(dp[2][2] + dp[3][4],dp[2][3] + dp[4][4]) + sum[2][4]</code></p><p><code>dp[1][4] = min(dp[1][1] + dp[2][4],dp[1][2] + dp[3][4],dp[1][3] + dp[4][4]) + sum[1][4]  </code></p><p>根据分析可以列出状态转移方程：<br>$$<br>\begin{cases}<br>dp[i][j]= 0 \                                                \ i = j; \<br>dp[i][j]= min(dp[i][k]+dp[k+1][j]) + sum[i][j]   \          \  i != j;     \<br>\end{cases}<br>$$<br>按这个思路实现代码：</p><p>优化一下s数组，s[i]表示第1堆到第i堆的数量总和，那么s[j]-s[i-1]就是第i堆到第j堆的数量之和。</p><pre class="line-numbers language-none"><code class="language-none">#include &lt;iostream&gt; #include &lt;cstring&gt; using namespace std;const int N = 310; int n; int a[N], s[N]; // s数组用于前缀和优化int dp[N][N]; // f[i][j]表示合并第i~j堆石子的最小代价 int main() { cin &gt;&gt; n; for (int i = 1; i &lt;= n; i ++ ) cin &gt;&gt; a[i]; // 前缀和优化for (int i = 1; i &lt;= n; i ++ ) s[i] = s[i - 1] + a[i];memset(dp, 0x3f, sizeof dp); // 初值无穷大for (int i = 1; i &lt;= n; i ++ ) dp[i][i] = 0; // 一堆石子不需要合并// 枚举区间长度for (int len = 2; len &lt;= n; len ++ ){    // 枚举区间起点    for (int i = 1; i + len - 1 &lt;= n; i ++ )    {        int j = i + len - 1; // 区间终点        // 枚举划分位置        for (int k = i; k &lt; j; k ++ )        {            dp[i][j] = min(dp[i][j], dp[i][k] + dp[k + 1][j] + s[j] - s[i - 1]);        }    }}cout &lt;&lt; dp[1][n] &lt;&lt; endl;return 0;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="三、🌍环形合并"><a href="#三、🌍环形合并" class="headerlink" title="三、🌍环形合并"></a>三、🌍环形合并</h3><p>下次吧，今天累了</p>]]></content>
      
      
      <categories>
          
          <category> Algorithm </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 动态规划 </tag>
            
            <tag> 石子合并 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>动态规划之背包问题</title>
      <link href="/2023/11/08/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92%E4%B9%8B%E8%83%8C%E5%8C%85%E9%97%AE%E9%A2%98/"/>
      <url>/2023/11/08/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92%E4%B9%8B%E8%83%8C%E5%8C%85%E9%97%AE%E9%A2%98/</url>
      
        <content type="html"><![CDATA[<h1 id="joy-动态规划之背包问题"><a href="#joy-动态规划之背包问题" class="headerlink" title=":joy:动态规划之背包问题"></a><span class="github-emoji"><span>😂</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f602.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span>动态规划之背包问题</h1><p>经典的背包问题，期末考试复习用</p><h4 id="一、01背包问题"><a href="#一、01背包问题" class="headerlink" title="一、01背包问题"></a>一、01背包问题</h4><p><strong>Description</strong></p><p>给定 N 件物品和一个容量为 V 的背包。每件物品只能使用一次。</p><p>第<code>i</code>件物品的体积是<code>vi</code>，价值是<code>wi</code>。</p><p>你的任务是决定将哪些物品装入背包，以使得这些物品的总体积不超过背包容量，同时总价值最大。请输出最大价值。</p><p><strong>Input</strong></p><ul><li>第一行包含两个整数，分别为<code>N</code>和<code>V</code>，表示物品数量和背包容量。</li><li>接下来的 N 行，每行包含两个整数<code>vi</code>和<code>wi</code>，表示第<code>i</code>件物品的体积和价值。</li></ul><p><strong>Output</strong></p><p>输出一个整数，表示最大价值。</p><p>Sample Input 1 </p><pre class="line-numbers language-none"><code class="language-none">4 51 22 43 44 5<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>Sample Output 1</p><pre class="line-numbers language-none"><code class="language-none">8<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>01背包在于每件物品只有一个，要么装，要么不装</p><h5 id="1、思路"><a href="#1、思路" class="headerlink" title="1、思路"></a>1、思路</h5><h5 id="每个物品有两个状态，装与不装。构造dp数组记录每一种情况"><a href="#每个物品有两个状态，装与不装。构造dp数组记录每一种情况" class="headerlink" title="每个物品有两个状态，装与不装。构造dp数组记录每一种情况"></a>每个物品有两个状态，装与不装。构造dp数组记录每一种情况</h5><p>根据以上例子构建dp数组，第一维代表第i个物品，第二维代表背包当前容积，所以**<code>dp[i][j]</code>代表i个物品，背包容积为j时能够装到的最大价值**</p><p>下面是模拟过程的矩阵</p><table><thead><tr><th align="center">i j</th><th align="center">0</th><th align="center">1</th><th align="center">2</th><th align="center">3</th><th align="center">4</th><th align="center">5</th></tr></thead><tbody><tr><td align="center">0</td><td align="center">0</td><td align="center">0</td><td align="center">0</td><td align="center">0</td><td align="center">0</td><td align="center">0</td></tr><tr><td align="center">1</td><td align="center">0</td><td align="center">2</td><td align="center">2</td><td align="center">2</td><td align="center">2</td><td align="center">2</td></tr><tr><td align="center">2</td><td align="center">0</td><td align="center">2</td><td align="center">4</td><td align="center">6</td><td align="center">6</td><td align="center">6</td></tr><tr><td align="center">3</td><td align="center">0</td><td align="center">2</td><td align="center">4</td><td align="center">6</td><td align="center">6</td><td align="center">8</td></tr><tr><td align="center">4</td><td align="center">0</td><td align="center">2</td><td align="center">4</td><td align="center">6</td><td align="center">6</td><td align="center">8</td></tr></tbody></table><p>状态转移方程为</p><p>if 当前物品体积 &gt; 当前背包容积：</p><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">dp[i][j] = dp[i-1][j]<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>else</p><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">dp[i][j] = max(dp[i-1][j],dp[i-1][j-当前物品体积]+当前物品价值)   //判断装这个物品是否会价值变大<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h5 id="2、代码"><a href="#2、代码" class="headerlink" title="2、代码"></a>2、代码</h5><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">#include&lt;iostream&gt;#include&lt;vector&gt;using namespace std;int main(){    int N,V;    vector&lt;int&gt; v(N+1);    vector&lt;int&gt; w(N+1);    cin &gt;&gt; N &gt;&gt; V;    for(int i = 1;i &lt;= N;i++){        cin &gt;&gt; v[i] &gt;&gt; w[i];    }    vector&lt;vector&lt;int&gt;&gt; dp(N+1,vector&lt;int&gt;(V+1));    for(int i = 1;i &lt;= N;i++){        for(int j = 1;j &lt;= V;j++)        {              if(j &lt; v[i])       //如果前物品体积大于当前背包容积，则取未装该物品时能够得到的最大价值            dp[i][j] = dp[i-1][j];            else             //否则判断是否值得装这件物品            dp[i][j] = max(dp[i-1][j],dp[i-1][j-v[i]]+w[i]);        }          }    cout &lt;&lt; dp[N][V] &lt;&lt; endl;    return 0;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="二、完全背包"><a href="#二、完全背包" class="headerlink" title="二、完全背包"></a>二、完全背包</h4><p><strong>Description</strong></p><p>有一个背包，它的容量为<code>V</code>。还有<code>N</code>种不同类型的物品，每种物品都有无限数量可供选择。</p><p>每种物品的体积为<code>v_i</code>，价值为<code>w_i</code>。</p><p>请你确定如何选择物品放入背包，以确保物品的总体积不超过背包的容量，并且物品的总价值达到最大。你需要输出最大的价值。</p><p><strong>Input</strong></p><ul><li>第一行：两个整数，分别代表物品的种数<code>N</code>和背包的容积<code>V</code>。</li><li>接下来的<code>N</code>行：每行包含两个整数，分别代表一种物品的体积<code>v_i</code>和价值<code>w_i</code>。</li></ul><p><strong>Output</strong></p><ul><li>输出一个整数，表示能够获得的最大价值。</li></ul><p>Sample Input 1 </p><pre class="line-numbers language-none"><code class="language-none">4 51 22 43 44 5<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>Sample Output 1</p><pre class="line-numbers language-none"><code class="language-none">10<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h5 id="1、思路-1"><a href="#1、思路-1" class="headerlink" title="1、思路"></a>1、思路</h5><p>物品还是只有两种状态，装与不装，不过现在每件物品有无限多个而已</p><p>此时**<code>dp[i][j]</code>代表装第i种物品，背包容积为j时能够装到的最大价值**</p><p>模拟矩阵</p><table><thead><tr><th align="center">i j</th><th align="center">0</th><th align="center">1</th><th align="center">2</th><th align="center">3</th><th align="center">4</th><th align="center">5</th></tr></thead><tbody><tr><td align="center">0</td><td align="center">0</td><td align="center">0</td><td align="center">0</td><td align="center">0</td><td align="center">0</td><td align="center">0</td></tr><tr><td align="center">1</td><td align="center">0</td><td align="center">2</td><td align="center">4</td><td align="center">6</td><td align="center">8</td><td align="center">10</td></tr><tr><td align="center">2</td><td align="center">0</td><td align="center">2</td><td align="center">4</td><td align="center">6</td><td align="center">8</td><td align="center">10</td></tr><tr><td align="center">3</td><td align="center">0</td><td align="center">2</td><td align="center">4</td><td align="center">6</td><td align="center">8</td><td align="center">10</td></tr><tr><td align="center">4</td><td align="center">0</td><td align="center">2</td><td align="center">4</td><td align="center">6</td><td align="center">6</td><td align="center">10</td></tr></tbody></table><p>状态转移方程为</p><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">for(int i = 1;i &lt;= N;i++){        for(int j = 1;j &lt;= V;j++){            if(v[i] &gt; j)            dp[i][j] = dp[i-1][j];            else{                for(int k = 0;k * v[i] &lt;= j; k++)                 dp[i][j] = max(dp[i-1][j],dp[i-1][j-k*v[i]]+k*w[i]);            }        }    }<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="2、代码-1"><a href="#2、代码-1" class="headerlink" title="2、代码"></a>2、代码</h5><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">#include&lt;iostream&gt;#include&lt;vector&gt;using namespace std;int main(){    int N,V;    cin &gt;&gt; N &gt;&gt; V;    vector&lt;int&gt; v(N+1);    vector&lt;int&gt; w(N+1);        for(int i = 1;i &lt;= N;i++){        cin &gt;&gt; v[i] &gt;&gt; w[i];    }    vector&lt;vector&lt;int&gt;&gt; dp(N+1,vector&lt;int&gt;(V+1));    for(int i = 1;i &lt;= N;i++){        for(int j = 1;j &lt;= V;j++){            if(v[i] &gt; j)            dp[i][j] = dp[i-1][j];            else{                for(int k = 0;k * v[i] &lt;= j; k++)                 dp[i][j] = max(dp[i-1][j],dp[i-1][j-k*v[i]]+k*w[i]);            }        }    }    cout &lt;&lt; dp[N][V] &lt;&lt; endl;    return 0;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="3、优化"><a href="#3、优化" class="headerlink" title="3、优化"></a>3、优化</h5><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">if(v[i] &gt; j)      dp[i][j] = dp[i-1][j];      else{               for(int k = 0;k * v[i] &lt;= j; k++)                dp[i][j] = max(dp[i-1][j],dp[i-1][j-k*v[i]]+k*w[i]);           }<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>可以优化成</p><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">if(j &lt; vv[i])       dp[i][j] = dp[i-1][j];              else{                    dp[i][j] = max(dp[i-1][j],                                     dp[i][j-vv[i]] + ww[i]);                }<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>可以理解为既然能放第i件物品，就只用考虑用不用放最后一件物品i <span class="github-emoji"><span>😕</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f615.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span></p><h4 id="二、多重背包"><a href="#二、多重背包" class="headerlink" title="二、多重背包"></a>二、多重背包</h4><p><strong>Description</strong></p><p>你有一个背包，容量为<code>V</code>，以及<code>N</code>种不同类型的物品。每种物品有限数量供选择。</p><p>对于第<code>i</code>种物品：</p><ul><li>它有<code>s_i</code>件可用。</li><li>每件的体积是<code>v_i</code>。</li><li>每件的价值是<code>w_i</code>。</li></ul><p>请确定如何选择物品放入背包，以确保所选物品的总体积不超过背包的容量，并使所选物品的总价值最大化。输出能够获得的最大价值。</p><p><strong>Input</strong></p><ul><li>第一行：两个整数，分别代表物品的种数<code>N</code>和背包的容积<code>V</code>。</li><li>接下来的<code>N</code>行：每行包含三个整数，代表一种物品的体积<code>v_i</code>、价值<code>w_i</code>和数量<code>s_i</code>。</li></ul><p><strong>Output</strong></p><ul><li>输出一个整数，表示能够获得的最大价值。</li></ul><p>Sample Input 1 </p><pre class="line-numbers language-none"><code class="language-none">4 51 2 32 4 13 4 34 5 2<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>Sample Output 1</p><pre class="line-numbers language-none"><code class="language-none">10<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h5 id="1、思路-2"><a href="#1、思路-2" class="headerlink" title="1、思路"></a>1、思路</h5><p>物品还是只有两种状态，装与不装，不过现在每件物品有多个而已</p><p>此时**<code>dp[i][j]</code>代表装第i种物品，背包容积为j时能够装到的最大价值**</p><p>状态矩阵如下：</p><table><thead><tr><th align="center">i j</th><th align="center">0</th><th align="center">1</th><th align="center">2</th><th align="center">3</th><th align="center">4</th><th align="center">5</th></tr></thead><tbody><tr><td align="center">0</td><td align="center">0</td><td align="center">0</td><td align="center">0</td><td align="center">0</td><td align="center">0</td><td align="center">0</td></tr><tr><td align="center">1</td><td align="center">0</td><td align="center">2</td><td align="center">4</td><td align="center">6</td><td align="center">6</td><td align="center">6</td></tr><tr><td align="center">2</td><td align="center">0</td><td align="center">2</td><td align="center">4</td><td align="center">6</td><td align="center">8</td><td align="center">10</td></tr><tr><td align="center">3</td><td align="center">0</td><td align="center">2</td><td align="center">4</td><td align="center">6</td><td align="center">6</td><td align="center">10</td></tr><tr><td align="center">4</td><td align="center">0</td><td align="center">2</td><td align="center">4</td><td align="center">6</td><td align="center">6</td><td align="center">10</td></tr></tbody></table><p>转移方程略有变化</p><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">if(当前物品体积 &gt; 当前背包容积)dp[i][j] = dp[i-1][j];else{                当前背包可以装下物品i的数量 = j/v[i];                if(当前背包可以装下物品i的数量 &lt;= 物品i的数量)                dp[i][j] = max(dp[i-1][j],dp[i][j- 当前背包可以装下物品i的数量 * v[i] ]+当前背包可以装下物品i的数量 * w[i]);                else                   dp[i][j] = max(dp[i-1][j],dp[i][j-物品i的数量*v[i]] + 物品i的数量 * w[i]);}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="2、代码-2"><a href="#2、代码-2" class="headerlink" title="2、代码"></a>2、代码</h5><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">#include&lt;iostream&gt;#include&lt;vector&gt;using namespace std;int main(){    int N,V;    cin &gt;&gt; N &gt;&gt; V;    vector&lt;int&gt; v(N+1);    vector&lt;int&gt; w(N+1);    vector&lt;int&gt; t(N+1);        for(int i = 1;i &lt;= N;i++){        cin &gt;&gt; v[i] &gt;&gt; w[i] &gt;&gt; t[i];    }    vector&lt;vector&lt;int&gt;&gt; dp(N+1,vector&lt;int&gt;(V+1));    for(int i = 1;i &lt;= N;i++){        for(int j = 1;j &lt;= V;j++){            if(v[i] &gt; j)            dp[i][j] = dp[i-1][j];            else{                for(int k = 0;k &lt;= t[i] &amp;&amp; k * v[i] &lt;= j; k++)                 dp[i][j] = max(dp[i][j],dp[i-1][j-k*v[i]]+k*w[i]);            }        }    }    cout &lt;&lt; dp[N][V] &lt;&lt; endl;    return 0;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>暂时到这里吧！<span class="github-emoji"><span>🌟</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f31f.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span></p>]]></content>
      
      
      <categories>
          
          <category> Algorithm </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 动态规划 </tag>
            
            <tag> 背包 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>vue使用下拉树组件@riophae/vue-treeselect</title>
      <link href="/2023/11/06/vue%E4%BD%BF%E7%94%A8%E4%B8%8B%E6%8B%89%E6%A0%91%E7%BB%84%E4%BB%B6-riophae-vue-treeselect/"/>
      <url>/2023/11/06/vue%E4%BD%BF%E7%94%A8%E4%B8%8B%E6%8B%89%E6%A0%91%E7%BB%84%E4%BB%B6-riophae-vue-treeselect/</url>
      
        <content type="html"><![CDATA[<blockquote><p>在vue中, 因为element-ui 2.X是没有tree-select组件的，到了element-plus就有了 @riophae/vue-treeselect是一个基于 Vue.js 的树形选择器组件，可以用于选择树形结构的数据。它支持多选、搜索、异步加载等功能，可以自定义选项的样式和模板。该组件易于使用和扩展，适用于各种类型的项目。</p></blockquote><ol><li>安装第三方包</li></ol><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">npm i @riophae/vue-treeselect<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ol start="2"><li>导入并注册</li></ol><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">import</span> Treeselect <span class="token keyword">from</span> <span class="token string">'@riophae/vue-treeselect'</span><span class="token keyword">import</span> <span class="token string">'@riophae/vue-treeselect/dist/vue-treeselect.css'</span><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">{</span>  <span class="token literal-property property">components</span><span class="token operator">:</span> <span class="token punctuation">{</span> Treeselect <span class="token punctuation">}</span> <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>转载自：<a href="https://blog.csdn.net/qq_43340606/article/details/132755638">https://blog.csdn.net/qq_43340606/article/details/132755638</a></p>]]></content>
      
      
      <categories>
          
          <category> Vue </category>
          
      </categories>
      
      
        <tags>
            
            <tag> vue-treeselect </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Request failed with status code 405解决方法</title>
      <link href="/2023/11/04/Request-failed-with-status-code-405%E8%A7%A3%E5%86%B3%E6%96%B9%E6%B3%95/"/>
      <url>/2023/11/04/Request-failed-with-status-code-405%E8%A7%A3%E5%86%B3%E6%96%B9%E6%B3%95/</url>
      
        <content type="html"><![CDATA[<h3 id="报错Request-failed-with-status-code-405"><a href="#报错Request-failed-with-status-code-405" class="headerlink" title="报错Request failed with status code 405"></a>报错Request failed with status code 405</h3><blockquote><p>在编写RBAC权限管理系统的删除用户接口时，出现了这个错误</p></blockquote><h4 id="我的主要后端代码如下："><a href="#我的主要后端代码如下：" class="headerlink" title="我的主要后端代码如下："></a>我的主要后端代码如下：</h4><p>Controller层</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">@RestController@RequestMapping("user")public class UserController{/**     * 删除用户     * @param id     * @return     */    @DeleteMapping("/{id}")    public ResponseResult delUser(@PathVariable Long id){        return userService.delUser(id);    }}}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>service实现层</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">@Service("userService")public class UserServiceImpl extends ServiceImpl&lt;UserMapper, User&gt; implements UserService { @Autowired    private UserMapper userMapper;      @Override    public ResponseResult delUser(Long id) {        userMapper.deleteById(id);        return ResponseResult.okResult();    }}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>看起来没啥问题，跨域配置也没问题</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">@Configurationpublic class WebMvcConfig implements WebMvcConfigurer {    @Override    public void addCorsMappings(CorsRegistry registry) {        registry.addMapping("/**")                .allowedOriginPatterns("*") // 使用allowedOriginPatterns替代allowedOrigins                .allowedMethods("GET", "POST", "PUT", "DELETE", "PATCH", "OPTIONS")                .allowedHeaders("Authorization", "Cache-Control", "Content-Type")                .allowCredentials(true)                .maxAge(3600);    }}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>允许删除了<span class="github-emoji"><span>💢</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f4a2.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span></p><h4 id="看看前端吧"><a href="#看看前端吧" class="headerlink" title="看看前端吧"></a>看看前端吧</h4><pre class="line-numbers language-vue" data-language="vue"><code class="language-vue">import {  delUser }   from '@/api/user' /** 删除按钮操作 */    handleDelete(row) {      const ids = row.id || this.ids      this.$confirm('是否确认删除用户编号为"' + ids + '"的数据项？')        .then(function () {          return delUser(ids)        })        .then(() =&gt; {          this.getList()          this.$modal.msgSuccess('删除成功')        })        .catch(() =&gt; { })    },<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// 删除用户</span><span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">delUser</span><span class="token punctuation">(</span><span class="token parameter">userId</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">return</span> <span class="token function">request</span><span class="token punctuation">(</span><span class="token punctuation">{</span>    <span class="token literal-property property">url</span><span class="token operator">:</span> <span class="token string">'/user/'</span> <span class="token operator">+</span> userId<span class="token punctuation">,</span>    <span class="token literal-property property">method</span><span class="token operator">:</span> <span class="token string">'delete'</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><span class="github-emoji"><span>😢</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f622.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span>前端我不是很懂，看起来没啥问题</p><p>打开浏览器，调用接口查看一下</p><img src="/2023/11/04/Request-failed-with-status-code-405%E8%A7%A3%E5%86%B3%E6%96%B9%E6%B3%95/image-20231104142944725.png" class="" title="image-20231104142944725"><p>发现请求URL有问题，少了后面的用户id</p><h4 id="问题出现在前端"><a href="#问题出现在前端" class="headerlink" title="问题出现在前端"></a>问题出现在前端</h4><p>所以应该前端没有传回用户id，这就好办了🤪</p><p>看前端代码这段</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> ids <span class="token operator">=</span> row<span class="token punctuation">.</span>id <span class="token operator">||</span> <span class="token keyword">this</span><span class="token punctuation">.</span>ids<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>row.id应替换成row.userid,这个要和你表格的id字段的prop值相同</p><p>重新调用删除接口发现问题解决了</p><img src="/2023/11/04/Request-failed-with-status-code-405%E8%A7%A3%E5%86%B3%E6%96%B9%E6%B3%95/image-20231104152700661.png" class="" title="image-20231104152700661"><p>但是新的问题是，报错</p><p> “Invalid bound statement (not found): com.zjz.rbacmybatisplus.mapper.UserMapper.deleteById”</p><p>看样子mybatis-plus配置出问题了，在网上查了好多，发现我这里的问题是<strong>实体类发现没有加主键注解，</strong></p><p>该死😤，在userid上加@TableId即可</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">@Data@AllArgsConstructor@NoArgsConstructor@TableName("sys_user")public class User  {    //主键    @TableId    private Long userid;    //用户名    private String username;    //密码    private String password;    //账号状态（0正常 1停用）    private String status;    //邮箱    private String email;    //手机号    private String phone;    @TableField(exist = false)    private Long[] roleIds;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><img src="/2023/11/04/Request-failed-with-status-code-405%E8%A7%A3%E5%86%B3%E6%96%B9%E6%B3%95/image-20231104153206733.png" class="" title="image-20231104153206733"><p>成功删除！<img src="/2023/11/04/Request-failed-with-status-code-405%E8%A7%A3%E5%86%B3%E6%96%B9%E6%B3%95/c9b0bf9d9c4b554e7c241f19f2177be5.gif" class="" title="img"></p>]]></content>
      
      
      <categories>
          
          <category> Bug </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Vue </tag>
            
            <tag> Mybatis-plus </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hexo博客加速</title>
      <link href="/2023/11/02/Hexo%E5%8D%9A%E5%AE%A2%E5%8A%A0%E9%80%9F/"/>
      <url>/2023/11/02/Hexo%E5%8D%9A%E5%AE%A2%E5%8A%A0%E9%80%9F/</url>
      
        <content type="html"><![CDATA[<p>博客存的资源多了，打开太慢，得加速</p><p>转载自:<a href="https://github.com/Colsrch/hexo-offline-popup">Colsrch/hexo-offline-popup: 一个增强Hexo站点的插件 (github.com)</a></p><h1 id="hexo-offline-popup"><a href="#hexo-offline-popup" class="headerlink" title="hexo-offline-popup"></a><a href="https://github.com/Colsrch/hexo-offline-popup#hexo-offline-popup">hexo-offline-popup</a></h1><p>hexo-offline-popup 是一个 <a href="https://hexo.io/">hexo</a> 插件， 它可加速您的Hexo网站的加载速度，以及网站内容更新弹窗提示。</p><p>该插件基于停止维护已久的hexo-service-worker插件，并在它的基础上加以改进。</p><h2 id="Install"><a href="#Install" class="headerlink" title="Install"></a><a href="https://github.com/Colsrch/hexo-offline-popup#install">Install</a></h2><pre class="line-numbers language-none"><code class="language-none">npm i hexo-offline-popup --save<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>安装后, 运行 <code>hexo clean &amp;&amp; hexo generate</code> 激活插件.</p><h2 id="Usage"><a href="#Usage" class="headerlink" title="Usage"></a><a href="https://github.com/Colsrch/hexo-offline-popup#usage">Usage</a></h2><p>如果网站提供的所有内容来自原始服务器，你不需要添加任何配置。只需安装和运行 <code>hexo clean &amp;&amp; hexo generate</code>。</p><p>在博客根目录的 <code>_config.yml</code> 中添加以下配置.</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"># offline config passed to sw-precache.service_worker:  maximumFileSizeToCacheInBytes: 5242880  staticFileGlobs:  - public/**/*.{js,html,css,png,jpg,gif,svg,eot,ttf,woff,woff2}  stripPrefix: public  verbose: true<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>如果你有CDN资源，例：</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml">- https://cdn.some.com/some/path/some-script.js- http://cdn.some-else.org/some/path/deeply/some-style.css<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>将此配置添加到根目录的 <code>_config.yml</code></p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml">service_worker:  runtimeCaching:    - urlPattern: /*      handler: cacheFirst      options:        origin: cdn.some.com    - urlPattern: /*      handler: cacheFirst      options:        origin: cdn.some-else.org<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Hexo </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 博客 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hexo博客添加评论模块</title>
      <link href="/2023/11/02/Hexo%E5%8D%9A%E5%AE%A2%E6%B7%BB%E5%8A%A0%E8%AF%84%E8%AE%BA%E6%A8%A1%E5%9D%97/"/>
      <url>/2023/11/02/Hexo%E5%8D%9A%E5%AE%A2%E6%B7%BB%E5%8A%A0%E8%AF%84%E8%AE%BA%E6%A8%A1%E5%9D%97/</url>
      
        <content type="html"><![CDATA[<p>转载自:<a href="https://www.cnblogs.com/jijunhao/p/17235903.html">Hexo-Matery主题评论插件 - 季俊豪 - 博客园 (cnblogs.com)</a></p><p><code>matery</code>主题集成了各种评论模块，例如 <strong>gitalk</strong>、<strong>gitment</strong>、<strong>disqus</strong>、<strong>livere</strong>、<strong>valine</strong>、<strong>waline</strong>、<strong>Twikoo</strong>、<strong>utteranc</strong> 等，我尝试了 <code>utteranc</code> 这种集成在github种的评论插件，并且能够做到github邮箱通知。</p><h3 id="1-新建一个评论仓库"><a href="#1-新建一个评论仓库" class="headerlink" title="1. 新建一个评论仓库#"></a>1. 新建一个评论仓库<a href="https://www.cnblogs.com/jijunhao/p/17235903.html#1-%E6%96%B0%E5%BB%BA%E4%B8%80%E4%B8%AA%E8%AF%84%E8%AE%BA%E4%BB%93%E5%BA%93">#</a></h3><p>首先创建一个公开的评论仓库&lt;自定义名称&gt;<strong>！注意一定要公开，否则别人无法评论</strong></p><h3 id="2-安装utterances"><a href="#2-安装utterances" class="headerlink" title="2. 安装utterances"></a>2. 安装utterances</h3><ul><li>进入<a href="https://github.com/apps/utterances">utterances</a>，点击 <code>install</code></li></ul><p><a href="https://blog-1314109265.cos.ap-nanjing.myqcloud.com/202303111940868.png"><img src="/2023/11/02/Hexo%E5%8D%9A%E5%AE%A2%E6%B7%BB%E5%8A%A0%E8%AF%84%E8%AE%BA%E6%A8%A1%E5%9D%97/202303111940868.png" class="" title="img"></a></p><ul><li>选择刚刚创建的自定义评论仓库，点击<code>install</code></li></ul><p><a href="https://blog-1314109265.cos.ap-nanjing.myqcloud.com/202303111940318.png"><img src="/2023/11/02/Hexo%E5%8D%9A%E5%AE%A2%E6%B7%BB%E5%8A%A0%E8%AF%84%E8%AE%BA%E6%A8%A1%E5%9D%97/202303111940318.png" class="" title="img"></a></p><h3 id="3-配置评论风格configuration"><a href="#3-配置评论风格configuration" class="headerlink" title="3. 配置评论风格configuration"></a>3. 配置评论风格configuration</h3><ul><li><p>首先输入自己的刚刚新建的评论仓库</p></li><li><img src="/2023/11/02/Hexo%E5%8D%9A%E5%AE%A2%E6%B7%BB%E5%8A%A0%E8%AF%84%E8%AE%BA%E6%A8%A1%E5%9D%97/image-20231102141200666.png" class="" title="image-20231102141200666"></li><li><p>其他按照自己的需要挑战，把最后生成的配置，<code>copy</code> 下来</p></li></ul><img src="/2023/11/02/Hexo%E5%8D%9A%E5%AE%A2%E6%B7%BB%E5%8A%A0%E8%AF%84%E8%AE%BA%E6%A8%A1%E5%9D%97/image-20231102141231593.png" class="" title="image-20231102141231593"><h3 id="4-添加配置到matery主题"><a href="#4-添加配置到matery主题" class="headerlink" title="4. 添加配置到matery主题"></a>4. 添加配置到matery主题</h3><ul><li>修改matery主题的配置文件 <code>themes/hexo-theme-matery/_config.yml</code> ，开启utteranc功能</li></ul><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"># utteranc config, default disabled# utteranc 评论模块的配置，默认为不激活utteranc:  enable: true<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><ul><li>修改博客文章 <code>themes/hexo-theme-matery/layout/_partial/post-detail.ejs</code></li></ul><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token operator">&lt;</span><span class="token operator">%</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>theme<span class="token punctuation">.</span>utteranc <span class="token operator">&amp;&amp;</span> theme<span class="token punctuation">.</span>utteranc<span class="token punctuation">.</span>enable<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token operator">%</span><span class="token operator">&gt;</span><span class="token operator">&lt;</span><span class="token operator">%</span><span class="token operator">-</span> <span class="token function">partial</span><span class="token punctuation">(</span><span class="token string">'_partial/utteranc'</span><span class="token punctuation">)</span> <span class="token operator">%</span><span class="token operator">&gt;</span><span class="token operator">&lt;</span><span class="token operator">%</span> <span class="token punctuation">}</span> <span class="token operator">%</span><span class="token operator">&gt;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>该处改动的目的是为了在所有博客文章中统一在底部加入一个评论模块，这个改动很关键、所放位置也很重要。</p><ul><li>新增一个文件 <code>themes/hexo-theme-matery/layout/_partial/utteranc.ejs</code></li></ul><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token operator">&lt;</span>div <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"card"</span> data<span class="token operator">-</span>aos<span class="token operator">=</span><span class="token string">"fade-up"</span><span class="token operator">&gt;</span>    <span class="token operator">&lt;</span>div id<span class="token operator">=</span><span class="token string">"utteranc-container"</span> <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"card-content"</span><span class="token operator">&gt;</span>        <span class="token operator">&lt;</span>script src<span class="token operator">=</span><span class="token string">"https://utteranc.es/client.js"</span>                repo<span class="token operator">=</span><span class="token string">"jijunhao/utterances"</span>                issue<span class="token operator">-</span>term<span class="token operator">=</span><span class="token string">"pathname"</span>                theme<span class="token operator">=</span><span class="token string">"github-light"</span>                crossorigin<span class="token operator">=</span><span class="token string">"anonymous"</span>                async<span class="token operator">&gt;</span>        <span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">&gt;</span>    <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">&gt;</span><span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">&gt;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>所有的留言都会出现在自定义评论仓库 <code>issues</code> 的，并且会每次给邮箱发消息。</p><h3 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h3><p>如果博客中还有单独的一个留言板模块，需要改 <code>themes/hexo-theme-matery/layout/contact.ejs</code></p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token operator">&lt;</span><span class="token operator">%</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>theme<span class="token punctuation">.</span>utteranc <span class="token operator">&amp;&amp;</span> theme<span class="token punctuation">.</span>utteranc<span class="token punctuation">.</span>enable<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token operator">%</span><span class="token operator">&gt;</span>    <span class="token operator">&lt;</span><span class="token operator">%</span><span class="token operator">-</span> <span class="token function">partial</span><span class="token punctuation">(</span><span class="token string">'_partial/utteranc'</span><span class="token punctuation">)</span> <span class="token operator">%</span><span class="token operator">&gt;</span><span class="token operator">&lt;</span><span class="token operator">%</span> <span class="token punctuation">}</span> <span class="token operator">%</span><span class="token operator">&gt;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>最后重启hexo，就能在网页拥有评论功能了。</p><p>哈哈哈，项目下面的评论<span class="github-emoji"><span>😆</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f606.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <span class="github-emoji"><span>😂</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f602.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span></p><img src="/2023/11/02/Hexo%E5%8D%9A%E5%AE%A2%E6%B7%BB%E5%8A%A0%E8%AF%84%E8%AE%BA%E6%A8%A1%E5%9D%97/image-20231102141449835.png" class="" title="image-20231102141449835">]]></content>
      
      
      <categories>
          
          <category> hexo </category>
          
      </categories>
      
      
        <tags>
            
            <tag> utterances </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>LeetCode3</title>
      <link href="/2023/11/02/LeetCode3/"/>
      <url>/2023/11/02/LeetCode3/</url>
      
        <content type="html"><![CDATA[<h3 id="LeetCode3-无重复字符的最长子串"><a href="#LeetCode3-无重复字符的最长子串" class="headerlink" title="LeetCode3. 无重复字符的最长子串"></a><a href="https://leetcode.cn/problems/longest-substring-without-repeating-characters/">LeetCode3. 无重复字符的最长子串</a></h3><p>给定一个字符串 <code>s</code> ，请你找出其中不含有重复字符的 <strong>最长子串</strong> 的长度。</p><p><strong>滑动窗口</strong>解这道题很丝滑</p><h4 id="思路"><a href="#思路" class="headerlink" title="思路"></a><strong>思路</strong></h4><p>限定窗口，当前窗口内没有重复的字符<span class="github-emoji"><span>💹</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f4b9.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> 用哈希表<span class="github-emoji"><span>#⃣</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/0023-20e3.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> 记录当前窗口内的字符,遍历字符串时，查找该字符是否在当前窗口中存在，存在则将该字符踢出哈希表，并将窗口左端右移，用maxlen记录窗口的最大值</p><h4 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h4><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">class Solution {public:    int lengthOfLongestSubstring(string s) {        if(s.size() == 0) return 0;         int left = 0;         int maxlen = 0;         unordered_set&lt;char&gt; index;         for(int i = 0;i &lt; s.size();i++){             while(index.find(s[i]) != index.end()){                 index.erase(s[left]);                 left++;             }            index.insert(s[i]);            maxlen = max(maxlen,i-left+1);         }          return maxlen;    }};<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><span class="github-emoji"><span>👿</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f47f.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span></p>]]></content>
      
      
      <categories>
          
          <category> Basic </category>
          
      </categories>
      
      
        <tags>
            
            <tag> LeetCode </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>心动!搭建无限量免费图床</title>
      <link href="/2023/11/01/%E5%BF%83%E5%8A%A8-%E6%90%AD%E5%BB%BA%E6%97%A0%E9%99%90%E9%87%8F%E5%85%8D%E8%B4%B9%E5%9B%BE%E5%BA%8A/"/>
      <url>/2023/11/01/%E5%BF%83%E5%8A%A8-%E6%90%AD%E5%BB%BA%E6%97%A0%E9%99%90%E9%87%8F%E5%85%8D%E8%B4%B9%E5%9B%BE%E5%BA%8A/</url>
      
        <content type="html"><![CDATA[<p><strong>拥有图床多是一件美式</strong> 免费不限量<span class="github-emoji"><span>🙀</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f640.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span>！</p><h3 id="一、拥有GitHub账号，fork项目Telegraph-Image"><a href="#一、拥有GitHub账号，fork项目Telegraph-Image" class="headerlink" title="一、拥有GitHub账号，fork项目Telegraph-Image"></a>一、拥有GitHub账号，fork项目<a href="https://github.com/summerbird-1/Telegraph-Image">Telegraph-Image</a></h3><h3 id="二、打开cloudflare官网-注册账号"><a href="#二、打开cloudflare官网-注册账号" class="headerlink" title="二、打开cloudflare官网,注册账号"></a>二、打开<a href="https://dash.cloudflare.com/">cloudflare</a>官网,注册账号</h3><img src="/2023/11/01/%E5%BF%83%E5%8A%A8-%E6%90%AD%E5%BB%BA%E6%97%A0%E9%99%90%E9%87%8F%E5%85%8D%E8%B4%B9%E5%9B%BE%E5%BA%8A/image-20231101170127709.png" class="" title="image-20231101170127709"><p>由于我做过了，下面步骤显示不了，反正都默认选项，最后保存部署，部署完成后会提供一个域名，打开会显示这个</p><img src="/2023/11/01/%E5%BF%83%E5%8A%A8-%E6%90%AD%E5%BB%BA%E6%97%A0%E9%99%90%E9%87%8F%E5%85%8D%E8%B4%B9%E5%9B%BE%E5%BA%8A/image-20231101170501868.png" class="" title="image-20231101170501868"><p>上传图片就会有返回图片链接，把链接输入浏览器搜索栏就可以打开图片了。</p><h3 id="三、管理图片"><a href="#三、管理图片" class="headerlink" title="三、管理图片"></a>三、管理图片</h3><h5 id="1、创建命名空间"><a href="#1、创建命名空间" class="headerlink" title="1、创建命名空间"></a>1、创建命名空间</h5><img src="/2023/11/01/%E5%BF%83%E5%8A%A8-%E6%90%AD%E5%BB%BA%E6%97%A0%E9%99%90%E9%87%8F%E5%85%8D%E8%B4%B9%E5%9B%BE%E5%BA%8A/image-20231101170827207.png" class="" title="image-20231101170827207"><blockquote><p>==更正==：命名改为==img_url==吧</p></blockquote><h5 id="2、绑定命名空间"><a href="#2、绑定命名空间" class="headerlink" title="2、绑定命名空间"></a>2、绑定命名空间</h5><img src="/2023/11/01/%E5%BF%83%E5%8A%A8-%E6%90%AD%E5%BB%BA%E6%97%A0%E9%99%90%E9%87%8F%E5%85%8D%E8%B4%B9%E5%9B%BE%E5%BA%8A/image-20231101171230255.png" class="" title="image-20231101171230255"><p>添加绑定</p><img src="/2023/11/01/%E5%BF%83%E5%8A%A8-%E6%90%AD%E5%BB%BA%E6%97%A0%E9%99%90%E9%87%8F%E5%85%8D%E8%B4%B9%E5%9B%BE%E5%BA%8A/image-20231101171325433.png" class="" title="image-20231101171325433"><img src="/2023/11/01/%E5%BF%83%E5%8A%A8-%E6%90%AD%E5%BB%BA%E6%97%A0%E9%99%90%E9%87%8F%E5%85%8D%E8%B4%B9%E5%9B%BE%E5%BA%8A/image-20231101215723892.png" class="" title="image-20231101215723892"><p>==注意:==这里变量名称应为==img_url==！！</p><h5 id="3、设置环境变量（用户名密码）"><a href="#3、设置环境变量（用户名密码）" class="headerlink" title="3、设置环境变量（用户名密码）"></a>3、设置环境变量（用户名密码）</h5><img src="/2023/11/01/%E5%BF%83%E5%8A%A8-%E6%90%AD%E5%BB%BA%E6%97%A0%E9%99%90%E9%87%8F%E5%85%8D%E8%B4%B9%E5%9B%BE%E5%BA%8A/image-20231101171623990.png" class="" title="image-20231101171623990"><h5 id="4、重新部署"><a href="#4、重新部署" class="headerlink" title="4、重新部署"></a>4、重新部署</h5><img src="/2023/11/01/%E5%BF%83%E5%8A%A8-%E6%90%AD%E5%BB%BA%E6%97%A0%E9%99%90%E9%87%8F%E5%85%8D%E8%B4%B9%E5%9B%BE%E5%BA%8A/image-20231101171733712.png" class="" title="image-20231101171733712"><img src="/2023/11/01/%E5%BF%83%E5%8A%A8-%E6%90%AD%E5%BB%BA%E6%97%A0%E9%99%90%E9%87%8F%E5%85%8D%E8%B4%B9%E5%9B%BE%E5%BA%8A/image-20231101171758480.png" class="" title="image-20231101171758480"><h5 id="5、进入图片管理界面"><a href="#5、进入图片管理界面" class="headerlink" title="5、进入图片管理界面"></a>5、进入图片管理界面</h5><p>以上步骤操作完就实现了图床系统的管理后台功能和登录验证功能的设置，可以输入图床域名+<code>/admin</code>路径，就能打开管理后台了。例如：<code>https://telegraph-image-xxx.pages.dev/admin</code>:</p><img src="/2023/11/01/%E5%BF%83%E5%8A%A8-%E6%90%AD%E5%BB%BA%E6%97%A0%E9%99%90%E9%87%8F%E5%85%8D%E8%B4%B9%E5%9B%BE%E5%BA%8A/image-20231101221729398.png" class="" title="image-20231101221729398"><h3 id="四、开启内容审查"><a href="#四、开启内容审查" class="headerlink" title="四、开启内容审查"></a>四、开启内容审查</h3><p>​图床中上传的图片或视频默认是不经过审查的，上传后就可以被访问了。作为一个上传无需登录的图床，没有审核还是很危险的。如果被人恶意上传了不法内容，作为域名持有人，躺枪荣获”银手镯”就不妙了。Telegraph支持使用“moderatecontent”来进行自动内容审查，下面进行简单的配置就可以开启这项功能，<strong>强烈建议开启</strong>！</p><h5 id="1、获取API-Key"><a href="#1、获取API-Key" class="headerlink" title="1、获取API Key"></a><strong>1、获取API Key</strong></h5><p>打开”moderatecontent.com”网站，点击<code>SIGN UP</code>，输入你的邮箱，点击<code>SUBMIT</code>，界面上就直接为你生成<code>API Key</code>，复制并保存下来：</p><img src="/2023/11/01/%E5%BF%83%E5%8A%A8-%E6%90%AD%E5%BB%BA%E6%97%A0%E9%99%90%E9%87%8F%E5%85%8D%E8%B4%B9%E5%9B%BE%E5%BA%8A/image-20231101221212231.png" class="" title="image-20231101221212231"><p><strong>2、设置环境变量</strong></p><p>与上文中<code>设置管理后台登录验证</code>的步骤一样，到项目的<code>设置</code>——&gt;<code>环境界面中</code>，添加一个环境变量，名称为：<code>ModerateContentApiKey</code>，值就是上面获得的API Key。</p><img src="/2023/11/01/%E5%BF%83%E5%8A%A8-%E6%90%AD%E5%BB%BA%E6%97%A0%E9%99%90%E9%87%8F%E5%85%8D%E8%B4%B9%E5%9B%BE%E5%BA%8A/image-20231101224120509.png" class="" title="image-20231101224120509"><p><strong>3、重新部署</strong></p><p>同样的，做完以上的操作并不会立即生效，需要重新部署下系统才可以。</p><blockquote><p>特别说明：开启图片审查后，因为审查需要时间，首次的图片加载将会变得缓慢，审查完成后的图片加载由于存在缓存，就不会受到影响了。</p></blockquote><h3 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h3><p>注意的事项，主要有以下方面：</p><ul><li>每天最多<strong>100,000</strong>次免费读取操作，图片每加载一次都会占用该额度。建议在Cloudflare上开启域名缓存设置，这样仅当缓存未命中时才会占用该额度。如果额度用完了，则黑白名单等功能可能会失效。</li><li>每天最多<strong>1,000</strong>次免费删除操作，每有一条图片记录都会占用该额度，超过了将无法删除图片记录。</li><li>每天最多<strong>1,000</strong>次免费列出操作，每打开或刷新一次后台<code>/admin</code>都会占用该额度，超过了将无法进行后台图片管理。</li></ul><p>如果你搭建的图床仅供自己使用，以上限制其实可以忽略。绝大多数情况下，免费额度都基本够用，并且可以稍微超出一点，不是一超出就立马停用了，而且每项额度都是单独计算。某项操作超出免费额度后只会停用该项操作，不影响其他的功能。例如免费写入额度用完了，读取功能不受影响，图片能够正常加载，只是不能在图片管理后台看到新的图片了。</p><p>另外，还有一些特殊的注意事项，需要关注下：</p><ul><li><p>上传的单个文件最大支持<strong>5MB</strong>，有大文件需求的可以直接拜拜了。</p></li><li><p>开启图片审查后，不良图片会被自动屏蔽，不支持加载。</p></li><li><p>加入白名单中的内容可绕过图片审查结果，无论是否通过都能正常加载。而加入黑名单的图片将无法正常加载。</p></li><li><p>每次修改部署项目的KV、环境变量等，记得要<strong>重新部署</strong>，否则不会生效</p></li></ul><p>部分转载自：<a href="https://baijiahao.baidu.com/s?id=1777556287468058410&amp;wfr=spider&amp;for=pc">https://baijiahao.baidu.com/s?id=1777556287468058410&amp;wfr=spider&amp;for=pc</a></p><p>如果想要更换自定义域名也移步此处</p>]]></content>
      
      
      <categories>
          
          <category> Basic </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 图床 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>自然辩证法笔记</title>
      <link href="/2023/10/31/%E8%87%AA%E7%84%B6%E8%BE%A9%E8%AF%81%E6%B3%95%E7%AC%94%E8%AE%B0/"/>
      <url>/2023/10/31/%E8%87%AA%E7%84%B6%E8%BE%A9%E8%AF%81%E6%B3%95%E7%AC%94%E8%AE%B0/</url>
      
        <content type="html"><![CDATA[<p>转载自 <a href="https://blog.creativecc.cn/go.html?u=aHR0cHM6Ly9qYWNraGNjLmdpdGh1Yi5pbw==">杰克成</a></p><h1 id="smile-自然辩证法笔记"><a href="#smile-自然辩证法笔记" class="headerlink" title=":smile:自然辩证法笔记"></a><span class="github-emoji"><span>😄</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f604.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span>自然辩证法笔记</h1><h1 id="世界科技体制的形成和中国科技体制的变革"><a href="#世界科技体制的形成和中国科技体制的变革" class="headerlink" title="世界科技体制的形成和中国科技体制的变革"></a><a href="https://github.com/JackHCC/PKU-Lessons-Summary/edit/master/Introduction_to_Dialectics_of_Nature/README.md#%E4%B8%96%E7%95%8C%E7%A7%91%E6%8A%80%E4%BD%93%E5%88%B6%E7%9A%84%E5%BD%A2%E6%88%90%E5%92%8C%E4%B8%AD%E5%9B%BD%E7%A7%91%E6%8A%80%E4%BD%93%E5%88%B6%E7%9A%84%E5%8F%98%E9%9D%A9">世界科技体制的形成和中国科技体制的变革</a></h1><p><strong>定义</strong>：</p><ul><li>科技体制：<ul><li>组织结构和运行机制：<ul><li>科技体制是指<strong>科学技术的组织设置及其相互之间的组织性制约关系</strong>；</li><li>其机制是指科学技术在内外动力作用下产生动态过程的各相关因素互相制约的一般模式</li></ul></li></ul></li><li>原则：<ul><li><strong>科技体制化</strong>是科学技术产物发展的必然产物</li><li>科技体制的形成与建设过程充分显示了社会对科技发展的或促进或制约的过程</li><li>中国科技体制是<strong>移植国外的，而非内生的，其有深刻的历史合理性与必然性</strong></li></ul></li></ul><h2 id="1-世界科学技术"><a href="#1-世界科学技术" class="headerlink" title="1. 世界科学技术"></a><a href="https://github.com/JackHCC/PKU-Lessons-Summary/edit/master/Introduction_to_Dialectics_of_Nature/README.md#1-%E4%B8%96%E7%95%8C%E7%A7%91%E5%AD%A6%E6%8A%80%E6%9C%AF">1. 世界科学技术</a></h2><blockquote><ul><li>从小科学到大科学</li><li>哥白尼天体运行论</li><li>牛顿-自然哲学中的数学原理</li><li>爱因斯坦-相对论</li></ul></blockquote><ul><li>近代科学体系的建立：<ul><li>两个特点：<strong>逻辑演绎+实验验证</strong></li></ul></li><li>小科学特点：<ul><li><strong>个体行为</strong>（个人独立完成，无经费）</li><li><strong>追求知识</strong>（无实际效益）</li><li><strong>自由探索</strong>（兴趣使然，无具体目标）</li></ul></li><li>大科学：<strong>大目标，大投入，大设备，大协作，大效益</strong></li></ul><blockquote><p>曼哈顿就工程，阿波罗计划，国际空间站等</p><p>中国神六，嫦娥卫星：万人一杆枪</p><p>中国：从陈景润到王选、袁隆平</p></blockquote><h2 id="2-世界科技体制的形成"><a href="#2-世界科技体制的形成" class="headerlink" title="2. 世界科技体制的形成"></a><a href="https://github.com/JackHCC/PKU-Lessons-Summary/edit/master/Introduction_to_Dialectics_of_Nature/README.md#2-%E4%B8%96%E7%95%8C%E7%A7%91%E6%8A%80%E4%BD%93%E5%88%B6%E7%9A%84%E5%BD%A2%E6%88%90">2. 世界科技体制的形成</a></h2><ul><li><p>古希腊：</p><ul><li>毕达哥拉斯，“伦理-政治学园”</li><li><strong>柏拉图：柏拉图学园</strong>：<strong>ACADEMY学院、研究院、学会</strong></li><li>亚里士多德：吕克昂学园</li><li>亚历山大时期：谬赛昂学院，图书馆</li></ul><p>就科学而言，<strong>没有形成集体系统的研究，没有形成共同体，没有形成完整的体制</strong></p><ul><li>科学：近代科学</li><li>体制：近代科学的体制</li><li>英国皇家学会、法国科学院</li></ul></li></ul><h3 id="意大利-世俗大学"><a href="#意大利-世俗大学" class="headerlink" title="意大利-世俗大学"></a><a href="https://github.com/JackHCC/PKU-Lessons-Summary/edit/master/Introduction_to_Dialectics_of_Nature/README.md#%E6%84%8F%E5%A4%A7%E5%88%A9-%E4%B8%96%E4%BF%97%E5%A4%A7%E5%AD%A6">意大利-世俗大学</a></h3><blockquote><p>8世纪开始，教堂建立寺院学校</p><p>意大利波轮首先出现世俗的法律学校</p><p>12世纪，加上医学院和法学院，成为伯伦那大学</p><p>15世纪，欧洲共有80所大学，意大利20所</p><p>1603-1630，罗马成立猞狸学社</p></blockquote><ul><li>基础教育有7科：文法、修辞、逻辑、算术、几何、天文学、音乐</li><li>世俗大学教师出现，处于外围和业余地位，有若干专门职位</li><li>1400年，伯伦那大学教席数目：<ul><li>科学（自然哲学、物理学、占星学）3</li><li>医学 11人</li></ul></li></ul><h3 id="英语-皇家学会"><a href="#英语-皇家学会" class="headerlink" title="英语-皇家学会"></a><a href="https://github.com/JackHCC/PKU-Lessons-Summary/edit/master/Introduction_to_Dialectics_of_Nature/README.md#%E8%8B%B1%E8%AF%AD-%E7%9A%87%E5%AE%B6%E5%AD%A6%E4%BC%9A">英语-皇家学会</a></h3><blockquote><p>皇家学会前身-无形学院</p><p>非正式小组-哲学学会</p><p>1660.11.28:英国皇家学会成立</p><p>1662-1669:获得皇家各种特许证，英女皇成为学会保护人，称“伦敦皇家自然知识促进学会”</p></blockquote><ul><li><p>世界首个有影响的科学家组织正式开始自己的历史</p></li><li><p>皇家学会宣布科学的价值与功能，规定了科学活动的规范</p><ul><li><strong>组织定型</strong></li><li><strong>章程明确</strong></li><li><strong>活动记录完整</strong></li></ul><p><strong>标志着科学活动在英国社会中得到正式承认，宣布了科学活动的体制化</strong></p></li></ul><blockquote><ul><li>学会宗旨是促进自然科学的发展，是世界上历史最长而又从未中断过的科学学会</li><li>皇家学会没有政府拨款，会员定期缴纳会费，每周固定集会</li><li>1664年专门的委员会：机械69人，手工业35人，农业32人，天文学15人</li><li>1665年，出版物直属刊物《哲学会刊》，开辟科学团体出版社杂志的先河，成为学术共同体形成与成熟的重要标志</li></ul></blockquote><ul><li>特点与局限性：<strong>独立团体，自主性强，成员混杂，业余科学，科学体制化的初步阶段，非职业化</strong></li></ul><h3 id="法国-科学院"><a href="#法国-科学院" class="headerlink" title="法国-科学院"></a><a href="https://github.com/JackHCC/PKU-Lessons-Summary/edit/master/Introduction_to_Dialectics_of_Nature/README.md#%E6%B3%95%E5%9B%BD-%E7%A7%91%E5%AD%A6%E9%99%A2">法国-科学院</a></h3><blockquote><p>私人赞助科学，规模较小，不稳定</p><p>科学考察、实验、仪器、原料费用增强</p><p>科学家提议，建立由国家支持的专门机构—自然科学院</p><p>国王：通过科学为王权增光</p><p>1666年，法国科学院成立</p><p>1699年，改组学会</p><p>法国科学院的宗旨：<strong>鼓励与保护研究精神，致力于提高教育和出版物质量并致力于维护法兰西科学用语的纯洁性及其作用</strong></p><p>法国科学院由院士、外国合作院士和通讯院士组成</p></blockquote><ul><li>历史上第一个“官办”科学机构<ul><li>经费国家提供，科学家专心致力于研究</li><li>只吸收各领域的专门学者</li><li>吸收国外著名科学家作为院士</li></ul></li><li>特点与局限性：<ul><li><strong>仅限于少数高级精英分子</strong></li><li><strong>院士有年薪和助手配置，由国家财政支持</strong></li><li><strong>承担行政与管理使命：管理公共事务、处理市政、军事、教育及工农业方面的科学问题</strong></li><li><strong>是一个管理机构而非纯粹的研究组织</strong></li></ul></li><li>影响：<ul><li>开始独立科学研究机构的先例</li><li>德国、俄罗斯、中国先后受其影响建立自己的国家级科学院</li><li><strong>法国科学院成立及制度成立标志科学可以成为有经济收入的专门职业</strong></li><li>RS会员交会费，法国科学院拿薪水</li></ul></li></ul><h3 id="德国-研究型大学"><a href="#德国-研究型大学" class="headerlink" title="德国-研究型大学"></a><a href="https://github.com/JackHCC/PKU-Lessons-Summary/edit/master/Introduction_to_Dialectics_of_Nature/README.md#%E5%BE%B7%E5%9B%BD-%E7%A0%94%E7%A9%B6%E5%9E%8B%E5%A4%A7%E5%AD%A6">德国-研究型大学</a></h3><blockquote><p>德国大学19世纪演变为研究型大学，大学教师必须进行科学研究</p><p>1917，蔡元培回国，大学不是神官发财的地方，是做学问的地方</p><p>德国大学：猞狸正教授席位；青年学者可以授课，晋升必须有独立研究成果</p><p>私人教师成立教授后备军。德国大学发展为现代以科学研究为主体的大学</p><ul><li>教学实验室的出现</li><li><strong>SEMINAR的出现：科学研究不再局限于精英科学家</strong></li><li>科学研究与工业结合</li></ul></blockquote><ul><li>特点与局限：<ul><li><strong>大学没有系，只有教授席位</strong></li><li><strong>教授与助教、研究生关系类似于企业主与雇主的关系</strong></li><li><strong>助教难以开展独立自由的研究，科研人才成长受阻</strong></li><li><strong>学科体系僵硬，不利于新学科发展</strong></li></ul></li></ul><h3 id="美国-现代大学-研究生院-工业实验室"><a href="#美国-现代大学-研究生院-工业实验室" class="headerlink" title="美国-现代大学-研究生院-工业实验室"></a><a href="https://github.com/JackHCC/PKU-Lessons-Summary/edit/master/Introduction_to_Dialectics_of_Nature/README.md#%E7%BE%8E%E5%9B%BD-%E7%8E%B0%E4%BB%A3%E5%A4%A7%E5%AD%A6-%E7%A0%94%E7%A9%B6%E7%94%9F%E9%99%A2-%E5%B7%A5%E4%B8%9A%E5%AE%9E%E9%AA%8C%E5%AE%A4">美国-现代大学-研究生院-工业实验室</a></h3><ul><li>美国大学：系的建立，系代表大学科，容量远大于教授席位；克服教授席位等级森严僵硬等问题；科学研究以课题为基础，比席位更加灵活，人员流动性强</li><li>研究生院出现：哈佛，耶鲁，斯坦福，康奈尔；培养大批研究生；主要方式SEMINAR；直接把研究生带到科学研究的前沿；财政资助；奖学金</li><li>工业实验室：贝尔实验室；企业提供雄厚科研经费与优越条件；加强科学研究与企业之间的相互交流，形成工业-大学联合体</li><li>美国国家实验室：80多个部，局，委员会有半数以上设立科学研究机构；原子能委员会5大研究基地；NASA；科学家参与国家科学事业，与大学、工业形成三足鼎立局面</li><li>大学科体制<ul><li>科学-技术一体化（国家工程研究中心）</li><li>科学-工业一体化（企业博士后流动站，科学园，科学孵化器）</li><li>科学-军事一体化</li><li>科学-工业-军事一体化</li><li>科研全球化（国际科学学会）</li><li>跨国公司研发机构</li></ul></li></ul><h3 id="小结"><a href="#小结" class="headerlink" title="小结"></a><a href="https://github.com/JackHCC/PKU-Lessons-Summary/edit/master/Introduction_to_Dialectics_of_Nature/README.md#%E5%B0%8F%E7%BB%93">小结</a></h3><p>两种模式：</p><ul><li><strong>分散性：英国、美国</strong></li><li><strong>集中性：法国、俄罗斯</strong></li><li>集中性：中国<ul><li>中科院法律地位：<strong>国家知识创新体系核心</strong></li></ul></li></ul><h2 id="3-中国科技体制的历史演变"><a href="#3-中国科技体制的历史演变" class="headerlink" title="3. 中国科技体制的历史演变"></a><a href="https://github.com/JackHCC/PKU-Lessons-Summary/edit/master/Introduction_to_Dialectics_of_Nature/README.md#3-%E4%B8%AD%E5%9B%BD%E7%A7%91%E6%8A%80%E4%BD%93%E5%88%B6%E7%9A%84%E5%8E%86%E5%8F%B2%E6%BC%94%E5%8F%98">3. 中国科技体制的历史演变</a></h2><blockquote><p>国人对科学技术认识过程：</p><ul><li>1582，利玛窦，开始接触西方技术</li><li>李鸿章</li><li>张之洞</li><li>陈独秀、胡适等</li><li>毛泽东</li><li>周恩来</li><li>邓小平</li><li>江泽民</li><li>胡锦涛</li></ul></blockquote><ul><li>科学团体自主发展阶段</li></ul><blockquote><ul><li>1915，中国科学社成立</li><li>1916，地质调查所成立</li><li>社会现代人-人的现代化-观念的现代化</li><li>中国第一位数学博士胡明复</li></ul></blockquote><ul><li>国家科技体制初步确定阶段</li></ul><blockquote><ul><li>1928，中央研究院成立（法国体制）</li><li>1937，成立评议会</li><li>1948，建立院士制</li><li>1949，科技人员满打满算5万人，机构30多个</li></ul></blockquote><ul><li>旧中国科研机构的一元化改造</li></ul><blockquote><ul><li>1949，中科院成立</li><li>1955，成立学部</li><li>1950，中华全国自然科学专门学会联合会成立</li><li>1958，国防科技委员会成立</li><li>1958，国家科学技术委员会成立</li><li>1958，中国科学技术协会成立</li></ul></blockquote><ul><li><p>新中国科学研究系统<strong>五大方面军</strong></p><ul><li><strong>中国科学院</strong></li><li><strong>高等院校</strong></li><li><strong>中央产业部门科研机构</strong></li><li><strong>地方研究机构</strong></li><li><strong>国防科研机构</strong></li></ul><p>集中力量，形成拳头，进行突破</p></li><li><p>新中国科技制简评</p><ul><li><p>特点：</p><ul><li>科技体制建立在<strong>公有制基础</strong>上，R&amp;D机构基本为国有</li><li>科技体制建立的基点是<strong>依靠自己的力量，自主发展科技事业</strong></li><li>政府<strong>直接组织</strong>科研规范、计划的制定和实施</li><li>中央政府是<strong>国家科学机制的中心</strong></li><li>科技体制是在不稳定模式中发展的，科技自身发展与对经济、社会的贡献两者始终难以协调</li></ul></li><li><p>优点</p><p>：</p><ul><li><strong>好钢用在刀刃上，集中力量打击歼灭战</strong></li><li>在国际封锁、国内资源稀缺条件下，这一体制<strong>能够将有限资源向战略目标领域动员与集中，迅速建立比较完整的组织体系和基础设施</strong></li><li>在<strong>当时历史条件下这一体制基本上是成功和有效的</strong>，两弹一星一潜艇</li></ul></li><li><p>缺点</p><p>：</p><ul><li>是一个<strong>自封闭的垂直结构体系，科研单位对上级领导部门负责而缺少与社会及独立单位之间的横向联系。</strong></li><li><strong>缺少一种公平的科技成果有偿转让机制，不利于研究成果扩散</strong></li><li>国家用<strong>行政手段直接管理过多，科研单位缺乏自主权</strong></li><li>科研机构<strong>自成体系、条块分隔严重，科技资源严重分散，也导致人员结构与知识结构僵化</strong></li></ul></li></ul></li></ul><h2 id="4-当前中国科技体制改革简述"><a href="#4-当前中国科技体制改革简述" class="headerlink" title="4. 当前中国科技体制改革简述"></a><a href="https://github.com/JackHCC/PKU-Lessons-Summary/edit/master/Introduction_to_Dialectics_of_Nature/README.md#4-%E5%BD%93%E5%89%8D%E4%B8%AD%E5%9B%BD%E7%A7%91%E6%8A%80%E4%BD%93%E5%88%B6%E6%94%B9%E9%9D%A9%E7%AE%80%E8%BF%B0">4. 当前中国科技体制改革简述</a></h2><ul><li>科技体制改革试点阶段：</li></ul><blockquote><ul><li>背景：军事竞赛、经济竞赛</li><li>1978，邓小平：科学技术是生产力等，陈景润报告</li><li>1982，赵紫阳，经济建设必须依靠科学技术</li><li>1980，中关村走向中国硅谷的起点</li></ul></blockquote><ul><li>科技体制改革全面发展展开阶段</li></ul><blockquote><ul><li>改革拨款制度，放松科研机构把管制</li><li>落实“面向”、“依靠”，堵死一头，网开一面</li><li>1985，《专利法》</li><li>1985，深圳科技工业园创办</li><li>1986，国家自然科学基金委员会成立</li></ul></blockquote><ul><li>科技体制改革调整深化阶段</li></ul><blockquote><ul><li>稳住一头，放开一片</li><li>科技大战三个层次：<strong>面向经济主战场，发展高科技及产业，加强基础研究</strong></li><li>“面向”，“依靠”，“攀高峰”</li><li>1993，《中华人民共和国科学技术进步法》</li><li>1995，《关于加速科学技术进步的决定》</li><li>1996，《中华人民共和国促进科技成果转化法》</li><li>1994，中国工程院成立</li></ul></blockquote><ul><li>建设国家创新体系阶段：</li></ul><blockquote><ul><li>1998，中科院：《迎接知识经济时代，建设国家创新体系》</li><li>1998以后，国家部委376个技术开发型研究院</li><li>1999，《国家科学技术奖励条例》</li></ul></blockquote><h2 id="5-当前中国科技体制改革主要措施"><a href="#5-当前中国科技体制改革主要措施" class="headerlink" title="5. 当前中国科技体制改革主要措施"></a><a href="https://github.com/JackHCC/PKU-Lessons-Summary/edit/master/Introduction_to_Dialectics_of_Nature/README.md#5-%E5%BD%93%E5%89%8D%E4%B8%AD%E5%9B%BD%E7%A7%91%E6%8A%80%E4%BD%93%E5%88%B6%E6%94%B9%E9%9D%A9%E4%B8%BB%E8%A6%81%E6%8E%AA%E6%96%BD">5. 当前中国科技体制改革主要措施</a></h2><p>中国科技体制主要<strong>目标</strong>：<strong>使科技人员作用得到充分发挥，使科学技术成果迅速广泛用于生产，提高科技生产力，促进科学技术和社会发展</strong>。改革围绕运行机制展开<strong>措施</strong>：</p><ul><li><p><strong>在经费拨款方面</strong>：对从事不同类型工作的研究机构实行不同的拨款办法和管理办法，逐步减少事业费拨款而加大对项目的资助</p></li><li><p>在研究所体制改革方面</p><p>：</p><ul><li>政研职责分开，直接控制转间接控制；</li><li>扩大研究所自主权，实行所长制</li><li>鼓励研究、教育、设计机构与生产单位相互之间的联系合作</li><li>鼓励技术发展型科技机构进入企业</li><li>实行课题组长负责制</li></ul></li><li><p><strong>在人才制度方面</strong>：促使研究机构更加开发，加强科研机构同大学与企业之间人员的信息的交流与横向联合</p></li><li><p>在强调为国民经济服务的同时，继续<strong>重视基础研究</strong>。</p></li></ul><h2 id="6-当前中国科技体制改革的主要成效"><a href="#6-当前中国科技体制改革的主要成效" class="headerlink" title="6. 当前中国科技体制改革的主要成效"></a><a href="https://github.com/JackHCC/PKU-Lessons-Summary/edit/master/Introduction_to_Dialectics_of_Nature/README.md#6-%E5%BD%93%E5%89%8D%E4%B8%AD%E5%9B%BD%E7%A7%91%E6%8A%80%E4%BD%93%E5%88%B6%E6%94%B9%E9%9D%A9%E7%9A%84%E4%B8%BB%E8%A6%81%E6%88%90%E6%95%88">6. 当前中国科技体制改革的主要成效</a></h2><ul><li>科技与经济结合方面取得了一定成效，并未根本解决（经济创新与科学创新）</li><li>资源配置改善，但未优化（课题制）</li><li>科学产出增加，质量有待提高（SCI）</li></ul><p>在组织结构方面出现新的生长点，但研究所作用削弱</p><ul><li>1980s，重点实验室，开放实验室</li><li>1990s，工程研究中心，技术开发中心</li><li>博士后流动站</li><li>高新技术产业开发区</li><li>民间科技机构，科技中介机构</li><li>外商设计的科研机构（微软亚研院）</li><li>吴明翰</li><li>中国科技经历三次飞跃<ul><li><ol><li><strong>1956年制定12年科技发展远景规划，中国走上现代化轨道</strong></li><li><strong>1978年全国科学大会</strong></li><li><strong>当今时代自主创新，建设创新型国家</strong></li></ol></li></ul></li></ul><h2 id="7-国家重大科技计划"><a href="#7-国家重大科技计划" class="headerlink" title="7. 国家重大科技计划"></a><a href="https://github.com/JackHCC/PKU-Lessons-Summary/edit/master/Introduction_to_Dialectics_of_Nature/README.md#7-%E5%9B%BD%E5%AE%B6%E9%87%8D%E5%A4%A7%E7%A7%91%E6%8A%80%E8%AE%A1%E5%88%92">7. 国家重大科技计划</a></h2><ul><li>国家科技攻关计划<ul><li>1982年实施</li><li>面向国民经济建设主战场</li><li>中国累计投资最大，人员最多</li></ul></li><li>863计划<ul><li>4位重量级科学家：<strong>应用光学王大珩，核物理王淦昌，空间自动控制杨嘉墀，无线电电子陈芳允</strong>给中共中央写信，提出跟踪世界先进技术水平；国务院批准《高技术研究发展计划（863计划）纲要》</li><li>有限目标，突出重点</li><li>选择生物技术，航天技术，信息技术，激光技术，自动化技术，能源技术和新材料7的领域15个主题作为研究重点</li><li>目标：<ul><li><strong>在几个重要高技术领域，跟踪国际水平，缩小同国外的差距</strong></li><li><strong>培养新一代高水平科技人才</strong></li><li><strong>通过伞型辐射，带动相关方面的科学技术进步</strong></li><li><strong>为下世纪初经济发展和国防建设奠定比较先进的基础</strong></li><li><strong>把阶段性研究成果同其他推广应用计划密切衔接，迅速地转化为生产力，发挥经济效益</strong></li></ul></li><li>缺陷：高技术，产业化</li></ul></li><li>星火计划<ul><li>1986，实施第一个依靠科学技术促进农村经济发展的计划</li><li>宗旨：把先进技术引进农村，提高农村科技水平和生产率</li><li>1994，重新确认第一批国家星火计划基地42个</li></ul></li><li>攀登计划<ul><li>1991年实施</li><li>为了加强基础性研究制定的计划，“稳住一头”政策的重要实施</li><li>实现科技的纵深部署，吸引一批学术带头人形成队伍，集中力量发展优势领域突破</li><li>46个计划先后列入</li></ul></li></ul><h2 id="8-单元总结"><a href="#8-单元总结" class="headerlink" title="8. 单元总结"></a><a href="https://github.com/JackHCC/PKU-Lessons-Summary/edit/master/Introduction_to_Dialectics_of_Nature/README.md#8-%E5%8D%95%E5%85%83%E6%80%BB%E7%BB%93">8. 单元总结</a></h2><ul><li><strong>古希腊情况-ACADEMY来历</strong></li><li><strong>英法的不同科学体制类型，科学职业化</strong></li><li><strong>德国研究型大学出现，seminar，科学实验室出现；美国大学中系、研究生院建立，工业实验室建立</strong></li><li><strong>中国科技体制：五大主力军，四大紧急措施，优势与短处，改革的目标与主要措施，重大计划（863）</strong></li></ul><h1 id="科普的定位和职业化问题"><a href="#科普的定位和职业化问题" class="headerlink" title="科普的定位和职业化问题"></a><a href="https://github.com/JackHCC/PKU-Lessons-Summary/edit/master/Introduction_to_Dialectics_of_Nature/README.md#%E7%A7%91%E6%99%AE%E7%9A%84%E5%AE%9A%E4%BD%8D%E5%92%8C%E8%81%8C%E4%B8%9A%E5%8C%96%E9%97%AE%E9%A2%98">科普的定位和职业化问题</a></h1><h2 id="1-背景"><a href="#1-背景" class="headerlink" title="1. 背景"></a><a href="https://github.com/JackHCC/PKU-Lessons-Summary/edit/master/Introduction_to_Dialectics_of_Nature/README.md#1-%E8%83%8C%E6%99%AF">1. 背景</a></h2><blockquote><ul><li>弗兰西斯培根：知识就是力量</li><li>阿基米德，牛顿，斯坦因门茨</li><li>法拉第，哈雷，罗伯特</li><li>贺麟</li><li>阿福莫夫</li><li>科普角色：培养人才，争取支持-公众理解，公众参与，协商（科普定位）</li><li>英国给理工科学生开设科学传播课程</li><li>钱学森科普印象</li></ul></blockquote><h2 id="2-科学在中国普及的简要历程-国人眼中的科学"><a href="#2-科学在中国普及的简要历程-国人眼中的科学" class="headerlink" title="2. 科学在中国普及的简要历程-国人眼中的科学"></a><a href="https://github.com/JackHCC/PKU-Lessons-Summary/edit/master/Introduction_to_Dialectics_of_Nature/README.md#2-%E7%A7%91%E5%AD%A6%E5%9C%A8%E4%B8%AD%E5%9B%BD%E6%99%AE%E5%8F%8A%E7%9A%84%E7%AE%80%E8%A6%81%E5%8E%86%E7%A8%8B-%E5%9B%BD%E4%BA%BA%E7%9C%BC%E4%B8%AD%E7%9A%84%E7%A7%91%E5%AD%A6">2. 科学在中国普及的简要历程-国人眼中的科学</a></h2><blockquote><ul><li>利玛窦，1582，中国开始接触西方科学技术</li><li>洋务运动-失败</li><li>师夷长技以制夷</li><li>明治维新</li><li>德国“铁血宰相”皮斯麦评价日本人与中国人留学</li><li>中央之国，方正之邦</li><li><strong>1905，科举制度废除，开始逐步系统学习科学知识</strong></li><li>三个变化：<ul><li><strong>知识：四书五经—科学知识</strong></li><li><strong>人：传统读书人—近代知识分子</strong></li><li><strong>体制：科举制度—科学教育、研究制度</strong></li></ul></li><li>1300年科学生态</li><li>严复回国后考举人</li><li>留学生一代，二代区别</li><li>杨振宁感慨</li><li>垄育之：现在船坚炮利的技术层面上，然后进入后面的声光化电知识层面，在深度到科学思想，科学精神层面</li><li>新文化运动<ul><li>1915年</li><li>赛先生—赛菩萨</li><li>北京大学科学与民主雕塑：SD定个O</li></ul></li><li>1922，梁启超：国人对于科学态度存在三点根本错误<ul><li>把科学看的<strong>太低太粗</strong></li><li>把科学看的<strong>太呆太窄</strong></li><li>把科学看的<strong>太势力太俗</strong></li></ul></li><li>建国后，1949，普及科学知识</li><li>1951，科普协会宗旨：普及自然科学知识，提高科学技术水平</li><li>1958，中国科协，6项基本任务：<ul><li>积极协助有关单位开展科学技术研究和技术改革工作</li><li>总结交流和推广科学技术的发明创造和先进经验</li><li>大力普及科学技术知识</li><li>采取各种业余教育办法，积极培养科学技术人才</li><li>经常开展学术讨论和学术批判，出版学术刊物，继续进行知识分子的团结和改造工作</li><li>加强与国际科学技术界的联系，促进国际学术交流和国际科学界的保卫和平斗争</li></ul></li><li>高士其</li><li>改革开放，以经济建设为中心，科学技术是第一生产力</li><li>1980s，中国《养鸡500天》，美国《宇宙》</li><li>赛先生—–赛财神</li><li>樊洪业：“传统科普”特点，四个方面：<ul><li><strong>第一，科普理念，是从主流意识形态的框架中衍生出来的。</strong></li><li><strong>第二，科普对象，定位于工农兵。</strong></li><li><strong>第三，科普方针，须紧密结合生产实际需要</strong></li><li><strong>第四，科普体制，中央集权制之下的一元化组织结构</strong></li></ul></li><li>90年代，提升全民科学素养</li><li>国内伪科学泛滥，国外PUS兴起，美国2061计划提出</li><li>1992，94，96，2001，03，05，07，09-10，2015，2018科学素养调查（0.3、0.2、0.3、1.4、1.98、1.6、2.25、3.27、6.2、8%）</li><li>1999，全民科学素质行动计划（2049计划）</li><li>2002，《科学技术普及法》</li><li>2003，19专题“创新文化与科学普及”</li><li><strong>2006，《全民科学素质行动计划纲要》方针</strong>：<strong>“政府推动，全民参与，提升素质，促进和谐”</strong></li><li>2015，《深化科技体制改革实施方案》，2020我国公民科学素养比例：10%</li></ul></blockquote><ul><li>中国人眼中的科学：<ul><li>政府，科学技术是第一生产力</li><li>公众，对科技信息感兴趣程度排第一位（83.19%的被调查公众）的是“致富信息，”(2003)</li></ul></li><li>86年前，梁启超：国人对于科学的态度存在三点根本错误：太低太粗，太呆太窄，太势力太俗</li></ul><h2 id="3-科普的定位"><a href="#3-科普的定位" class="headerlink" title="3. 科普的定位"></a><a href="https://github.com/JackHCC/PKU-Lessons-Summary/edit/master/Introduction_to_Dialectics_of_Nature/README.md#3-%E7%A7%91%E6%99%AE%E7%9A%84%E5%AE%9A%E4%BD%8D">3. 科普的定位</a></h2><ul><li>科普定义：<strong>指学校正规科学教育以外的、主要通过大众传媒以及各类宣传、展示等方式传播科学知识，提高国民科学素质的社会教育活动。</strong></li><li>科普对于提高国民科学素质的贡献或责任？</li><li>科普的角色：教育背后的影子？独立性？</li><li>科学教育与科学普及的关系，学校教育是科学普及的基础，科学普及是学校教育的补充和延续。</li><li>联合国《2002年人类发展报告》，1998年中国公民的中学净入学率仅为50%(美、英、法相应数据分别为90%、94%和94%)</li><li>与科学教育相比，科普的对象及需求更加参差多元且变化复杂，手段非强制性，内容上难以系统化、统一化、按部就班地进行普及提高全体国民科学素质中的科学数育与科学普及：“亡羊补牢”还是“亡羊找羊”？</li><li>科学知识无限，公众需求多元</li><li>专业之外的专家 = 公众？</li><li>科学知识的确定性？</li><li>最低的科学素养标准？</li><li>远离公众生活工作实际，接受？-缺失模型？</li><li>公众：参差多元、具体语境、变换复杂</li><li>PCST-9各国代表所采用的传播名称：“公众理解科学与工程”、“公众理解研究”、“公众参与科学”、“人民科学运动”、“公众对科学的认知”、“公众对科学的意识”、“科学普及”、“科学对话”</li><li>科学技术没有国界，但是科学普及却越来越需要和世界各国的历史传统、现实情以及自身需求结合起来其形式面对各国千整万别的从日常生活，到精神文化，到民主政等不同次的多元化需求，不断现出干姿百态的模式和形态<ul><li>英国：讨论潜在风险：印度：解决现实生存</li><li>中国公众，致富信息</li><li>发达国家公众，健康、环保</li></ul></li><li>对科学技术与公众关系的新认识</li><li>公众角色：被普及者（空瓶子）、纳税人</li><li>技术的社会形成(SST)</li><li>技术预见(TF)</li><li>公众参与科学</li><li>技术的社会形成<ul><li>(SST: Social Shaping of Technology— Donald Mackenzie. Robin Williams</li><li>线性模式(基研-应用开发-技术创新-经济增长)不符合科学技术发展的实际情況</li><li>技术是如何在特定的社会条件制约（组织的、政治的、经济的、文化的）下形成或定型的</li><li>技术的后果是来自社会的协商和解释，而不是来自技术自身的逻辑发展。</li><li>自行车，运动工具一交通工具，电话（中国，导弹，飞机-兰德公司2016年4月建议TW用导弹防御，放年飞机、军）</li><li>公众作为技术的使用者，消费者对技术的影响</li></ul></li><li>技术预见(TF: Technology Foresight):<ul><li>Ben R Martin,“技术预见是对科学、技术、经济环境和社会的远期未来进行有步骤的探索过程，其目的是选定产生最大经济与社会效益的战略领域和通用技术</li><li>不仅关注未来科技的自身推动因素，而且着眼于外部市场的求拉动作用，既包括对科学技术自身在机会的选择，也包括对经济发展、社会进步相关需求的识别：不仅关注未来技术对工业和经济的影响。</li><li>日本(1970-2006)：科技界、政府、企业、公众</li><li>公众是技术发展的利益相关者</li></ul></li><li><strong>丹麦的共识会议</strong>（外行公众参与的共识发展会议）<ul><li>步骤：选题、组建指导委员会、征集志愿者，第一次预备会、组织专家小组、第二次预备会、公众讨论会、广泛讨论征集意见</li><li>专家提供专业背景文献资料，回答询问问题给出意见和建议，更正报告表述性错误（保留公众小组对报告内容的完整控制权）</li><li>公众了解、咨询、提问、起草撰写报告，公众在科学技术问题或相关问题领域的评估中扮演重要角色”，“外行公民扮演关键性角色”——科学、科学家成为背景</li></ul></li><li>技术的社会形成(ssT)<ul><li>公众作为技术的使用者，消费者对技术的影响</li><li>技术预见：公众作为利益相关者</li><li>公众参与科学：公众作为政策参与者</li><li>澳大利亚科学对话，科学家与公众6：6，丹麦的共识会议，科学、科学家成为背景</li></ul></li><li>公众角色：被普及者、纳税人有权了解（均一化、同质化）<ul><li>公众的角色、身份需要引入新维度：科学技术的使用者，消费者，利益相关者，决策参与者</li></ul></li><li>以公众科学需求为导向，提供公众需要的知识（针对性）</li></ul><h2 id="4-科普的职业化"><a href="#4-科普的职业化" class="headerlink" title="4. 科普的职业化"></a><a href="https://github.com/JackHCC/PKU-Lessons-Summary/edit/master/Introduction_to_Dialectics_of_Nature/README.md#4-%E7%A7%91%E6%99%AE%E7%9A%84%E8%81%8C%E4%B8%9A%E5%8C%96">4. 科普的职业化</a></h2><ul><li>传统观点：<ul><li>1985年《英国：公众理解科学》：“每一个科学家的一个职业责任就是促进公众对科学的理解”，并希望科学家“真正认识到这是你义不容辞的工作”</li><li>1986年，美国西格玛希( Sigma X)科学研究会在庆祝其成立一百周年时提出，让公众理解科学技术是今后一百年间科技界最应首先考虑的问题</li><li>1999年，美国科学促进会主席格林伍德在美国科学年会上呼吁美国科学家“到美国各级学校兼职，直接参与加强科学教育和促进公众了解科学的工作</li><li>2000年，在中国际科普论坛上，中国科协主席同光召指出：“广大科技工作者是开展科普工作的主要力量。坚持不懈地开展科普工作，是科技工作者义不容辞的责任。”</li></ul></li><li>学者观点<ul><li>2010，PCST-11（印度）后续研讨会主题目：“培训科学家与媒介对话”</li><li>高士其：“科学普及是科学工作者的重要任务之一，只有把科学研究和科学普及相互结合才是一个完整的科学工作者。”</li><li>作为科学传播链中“第一发球员”的科学家们应当承担起科学普及的主体责任，多次发出了“科学普及太重要了，不能单由科普作家来担当”的呼吁</li><li>钱学森建议，研究生、博士生学位论文加一个副篇，用通俗语言对行外人讲清楚自己的研究题目</li></ul></li><li>大众传播学理论中有一个基本的信息传播模经过传播模型，包括信息传播者，信息，传播渠道，信息接受者四个基本要素：即<strong>模型1</strong>:<ul><li><strong>信息传播者→信息→传播渠道→信息接受者</strong></li><li><strong>信息生产者等于信息传播者</strong></li></ul></li><li><strong>科学家→科学知识→传播渠道→公众</strong></li><li><strong>三下乡：“文化、科技、卫生”进多村</strong></li><li><strong>四进社区：“科教、文体、卫生、法律”进社区</strong></li><li>科学家科普非常态化、追求科学家名声、追求新闻效应，科普工作形式化、脉冲式的运动式的</li><li>科普内容、方式的变化<ul><li>媒体，“科学”成为文字游戏的对象，通俗性（可读性）、时效性、新闻性等都高于科学性</li></ul></li><li>信息传播者→信息→传播道→信息接受者<ul><li>信息传播者：科学家？编辑记者？作家？</li><li>信息：科研论文？科技新闻（科普创作）？</li><li>2000,“通常认为科普创作者是主要的科学普及工作者，现在看来科学传播的主体可能主要是媒体科学传播工作者”</li><li>2002,“当前科学传播系统中有5个主体，即<strong>科学共同体、政府、媒体、公众以及非政府组织</strong>”</li></ul></li><li>模型2:<ul><li><strong>科学知识生产者&lt;-&gt;信息①&lt;-&gt;科学知识传播者&lt;-&gt;信息②&lt;-&gt;传播渠道&lt;-&gt;科学知识接受者</strong></li><li>“科学知识生产者”和“科学知识传播者”的区别<ul><li>信息①和信息②的区别</li><li>传统的科学家（科学知识生产者）与公众（科学知识接受者）之间的直接交流渠道仍然存在</li></ul></li></ul></li><li>(1)科学家不应是当今科普的职业主体。在科普主体中，“科学知识传播者”应属于其主要的职业化队伍，包括科技传媒、科普创作、科技展览、科普活动等</li><li>(2)科普作品应建立自己的评价体系，不应作为科学界的科研成果来评价。由于两者在语言规范、评价标准，交流对象等方面在在着诸多差异，因而科学界也始终难以认同科普类作品作为传统的科研成果</li><li>(3)科普不应当作为科学家的硬性的职业要求。由于科学普及正逐渐发展成为一个独立的职业，其规范和评价与科学家科研工作会有本质不同。</li><li>当代科学家的科普责任：<ul><li>把“科学家”作进一步的区分：科学家个人和科学家组织，分别探讨二者的科普责任有助于认清并进而缓解当前存在的尴尬局面。</li><li>科学家个人即指作为个体的科研工作者，</li><li>科学家组织则小到科学研究的课题组、实验室，大到科研院所、科技协会，直至整个科学共同体</li><li>就科学家个人而言，针对每一位科学家在科普方面提出，职业上的工作要求、甚至量化的考核指标是不现实的，但作为一种观念倡导和一份责任上的提醒，注意提高其自身的科普意识和能力是必要的。</li><li>科学家组织，除科研经费庞大、资源丰富、设施齐外，还有复杂程度不同的人员层次结构，除科学家(竺可桢、华罗、苏步青、张开逊，三人行)外，包括相当比例的如学术秘书、各级科研助手、研究生、各类科研期刊编辑、网络、管理、学会组织人员等，教育、人事、宣传、综合服务、工会等部门行政人员（也具有科研或科学教育背景，甚至由一线科学家兼任)</li><li>相对而言，由于科学家团体在经费、人力、设施等方面都有较为充分的资源保障和更大的选择空间，因而其科普责任可以比较明确的进行量化规定和评估</li></ul></li></ul><h2 id="5-单元总结"><a href="#5-单元总结" class="headerlink" title="5. 单元总结"></a><a href="https://github.com/JackHCC/PKU-Lessons-Summary/edit/master/Introduction_to_Dialectics_of_Nature/README.md#5-%E5%8D%95%E5%85%83%E6%80%BB%E7%BB%93">5. 单元总结</a></h2><ul><li><strong>科学家是科学知识的最初供给者：提高国民科学素质水平的主阵地在于学校科学教育，面向社会公众的科学普及的主渠道在于大众传媒：而科教的改革实践、科普的深入开展都离不开科学家的积极参与。科普需要协调与科研、教育、大众传媒相互之间的关系，建立密切的交流协作机制，进一步明确自己的角色定位。</strong></li><li><strong>在提高全体国民科学素质的目标下，只谈科学普及是远远不够的：再科学规划中，只谈科学家的责任和作用也是远远不够的。</strong></li><li><strong>相对于科学教育，科普更应以公众的各类科学需求为导向，建立高效的响应机制，提高国民科学素质的目标对于科普并不合适。</strong></li><li><strong>当前科普的职业化应体现在两个方面，一是科学共同体外部的科普职业队伍建设（主要部分），二是科学共同体内部的科普职业队伍建设。</strong></li><li><strong>从科学传播的角度看二者既有相互独立的地方，更有在传播链条上的依存合作关系。</strong></li><li><strong>职业化的科学普及无疑将为促进科学的传播以及科技与社会的和谐发展带来一个全新的局面，也将更加需要科学家的积极投入和配合，而绝不意味着科学家退出科普领域。</strong></li><li><strong>1897，“科学”一词由康有为译自日语，1905废除科举制度</strong></li><li><strong>PUS:公众理解科学（Public Understanding of Science）</strong></li><li><strong>《全民科学素质行动计划纲要(2006 2010-2020)》方针：“政府推动，全民参与，提升素质，促进和谐”</strong></li><li><strong>丹麦“共识会议”的全称：外行公众参与的共识发展会议</strong></li><li><strong>三下乡：“文化、科技、卫生”进乡村</strong></li><li><strong>四进社区：“科教、文体、卫生、法律”进社区</strong></li><li><strong>我国当前公众科学素质水平：8%</strong></li></ul><h1 id="科学共同体：分层与奖励"><a href="#科学共同体：分层与奖励" class="headerlink" title="科学共同体：分层与奖励"></a><a href="https://github.com/JackHCC/PKU-Lessons-Summary/edit/master/Introduction_to_Dialectics_of_Nature/README.md#%E7%A7%91%E5%AD%A6%E5%85%B1%E5%90%8C%E4%BD%93%E5%88%86%E5%B1%82%E4%B8%8E%E5%A5%96%E5%8A%B1">科学共同体：分层与奖励</a></h1><h2 id="1-科学共同体与范式"><a href="#1-科学共同体与范式" class="headerlink" title="1. 科学共同体与范式"></a><a href="https://github.com/JackHCC/PKU-Lessons-Summary/edit/master/Introduction_to_Dialectics_of_Nature/README.md#1-%E7%A7%91%E5%AD%A6%E5%85%B1%E5%90%8C%E4%BD%93%E4%B8%8E%E8%8C%83%E5%BC%8F">1. 科学共同体与范式</a></h2><ul><li>共同体( COMMUNITY)定义：通常译为“社区”，是社会学中的一个重要概念，一般指若干社会群体(民族、家庭等)或社会组织(机关、团体等)聚集在某一区域里，形成一个在生活上相互关联的大集体</li><li>科学共同体( SCIENTIFIC COMMUNITY)定义：<ul><li>英国学者坡兰依，1942，“科学的自主性”：把全社会从事科学研究的科学家作为个具有共同信念、共同价值、共同规范的和群体，以区别于一般的社会群体组织。</li><li>库恩、普赖斯、默顿</li><li>库恩，1960S-70S《科学革命的结构》，《必要的张力》：“科学共同体是由一些学有专长的实际工作者所组成。他们由所受教育和训练中的共同因素结合在一起，他们自认为也被认为专门探素一些共同的目标，也包括培养自己的接班人。”<ul><li>科学共同体是科学认识的主体：<strong>科学家个人→科学家集体</strong></li><li>“科学研究尽管是由个人进行的，而科学知识本质上是集团的产物，如不考虑创造这种知识的集团特殊性，那就无法理解知识的特有效能，也无法理解它的发展方式。从这一点说，我的书是属于社会学的，但也绝不允许这个问题离开认识论。”</li><li>通过科学共同体的研究把科学的认识论方面与社会学方面有机的结合了起来，使科学社会学发生了重要变化</li></ul></li></ul></li><li>科学共同体特点：<ul><li>由从事实际工作的<strong>科学家</strong>组成。</li><li>共同体组成分层次的：<strong>学科，专业，方向，研究领域</strong></li><li>专业一致的根本基础：<strong>专业教育相同，对专业问题的看法相似</strong></li><li>有共同的<strong>社会关系</strong></li><li>有共同的<strong>范式</strong></li></ul></li><li>范式(PARADIGM)：<ul><li>有20多种不同的提法</li><li>主要是指科学的认识标准以及科学活动。</li><li>世界观：免子变成狐狸？</li><li>科学成果、概念、原理、方法</li><li>实验程序、实验仪器</li><li>学科模式、活动规则、行为方式</li><li>一种科学的传统</li></ul></li><li>前范式阶段：<ul><li>观点林立、众说纷纭</li><li>同一域的科学家没有共同信念，没有公认的学科研究方法和评价标准，没有主导的理论学说</li><li>同一领域科学家无法相互协作、相互交流，从而形成不了共同体</li></ul></li><li>常规科学阶段：<ul><li>某一范式对一定时期的科学研究确立了支配的地位时，科学发展进入常规阶段。</li><li>科学家主要从事说明、完善、捍卫范式的研究，不再发明新理论。</li><li>判定重大事实：使事实更精确化</li><li>理论与事实更加相符</li><li>理论的细化、形式化、完美化。</li><li>科学发展进入高度累积的阶段</li></ul></li><li>后范式阶段：<ul><li>反常的情况不断出现，难以用常规的理论和方法解决</li><li>既不能排除，也不能同化。微粒说不能解释光的衍射现象。</li><li>反常影响到范式的基本原则时，常规科学陷入危机之中。</li><li>科学共同体内部开始出现不同的意见和声音，理论修改越来越缺乏一致意见。</li><li>新理论、新方法、新标准开始建立，旧的范式逐渐瓦解。</li></ul></li><li>新范式出现：<ul><li>住往由学科领域里的新手提出标新立异的观点，并常常遭到旧范式的抵制，</li><li>可能同时出现多个新的范式，相互之间形成竞争，最后或者统一、或者并存，形成几个科学共同体——产生不同的学派</li><li>新的范式经受住挑战，解决新的问题，包容旧的范式的内容，最后获得胜利</li></ul></li><li>范式与科学共同体：“粘合剂”<ul><li>范式为共同体的成员提供理论和方法上的信念</li><li>范式给出新理论、方法的标准，成为共同体的进入门槛</li><li>范式为科学共同体的交流提供了共同语言。为共同体下一代培养提供了内容标准</li><li>为共同体研究提供新的起点的平台，推进科学持续发展范式使得科学共同体独立于外部，其自主性得以保护</li></ul></li></ul><h2 id="2-科学共同体的形式"><a href="#2-科学共同体的形式" class="headerlink" title="2. 科学共同体的形式"></a><a href="https://github.com/JackHCC/PKU-Lessons-Summary/edit/master/Introduction_to_Dialectics_of_Nature/README.md#2-%E7%A7%91%E5%AD%A6%E5%85%B1%E5%90%8C%E4%BD%93%E7%9A%84%E5%BD%A2%E5%BC%8F">2. 科学共同体的形式</a></h2><p>形式：</p><ul><li><strong>内在形式：学派，无形学院</strong></li><li><strong>外在形式：学会，研究所，大学</strong></li></ul><p>学派( SCHOOL)：</p><ul><li>是科学家的一种特殊的创造性联合，往往由一代甚至几代具有很高学术水平和技能的科学家团结在一个或者几个科学大师周围，在某一研究方向上进行创造性的科研工作。</li><li>日心说、地心说</li><li>水成论、火成论、突变论</li><li>微粒说、波动说</li><li>燃素说、氧化说</li></ul><p>学派形成的条件</p><ul><li>以共同的范式为基础<ul><li>学派是不同范式在竞争中的科学社会组织的表现形式。</li><li>当科学理论内部显现危机时，不同学派的出现为科学理论的发展进步提供了新的生长点，扩展了理论领域和理论方法。</li></ul></li><li>以学术权威为核心<ul><li>学术权威为学派范式的理论基础做出了根本性贡献。</li><li>(1)与传统理论、观点、方法有明显的区别</li><li>(2)贡献是奠基性的，在此新方向上后来者可以有大量值得探讨的问题，从而形成共同的学术团体一学派</li></ul></li><li>以学派创始人为核心的创新集体<ul><li>学派内部有结构，学术权威为核心，周围有追随者、合作者、拥护者。</li><li>师生关系是学派的基本结构</li><li>形成学术图层：<ul><li>(1)核心是学派大师、领袖；</li><li>(2)学派大师直接领导下的科学家、学生；</li><li>(3)在学派基地外，但认同学派的观点和范式</li></ul></li></ul></li></ul><p>学派的功能</p><ul><li>培育科学新生长点的基地<ul><li>学派是新思想的孵化器、庇护所：如罗瓦的群论、孟德尔的遗传理论？</li><li>学派为新理论提供了生存空间，造成适宜的学术小气候</li><li>学派成员相互激励、交流，形成群体竟争优势，可与传统学派抗衡。</li></ul></li><li>是培养新一代科学家的摇篮<ul><li>“大科学家是大科学家挑选和培养出来的”</li><li>在研究风格和研究方法上的影响一隐性知识，“渔”非鱼也</li><li>卢瑟福指导过的科学家有11人获得诺奖，玻尔手下有7人获奖。</li><li>美国1901-1972,92位获奖者中有一半以上(48)其导师也是诺奖获得者</li><li>名师一高徒</li></ul></li><li>不同学派的存在是科学发展的组织保障<ul><li>不同学派的出现为科学发展创造了一个良性竞争的环境。</li><li>为不同的学术观点提供了发表的机会</li><li>保障了学术研究的自由。</li></ul></li></ul><p>学派领袖和学派风格：</p><ul><li>卢瑟福：独立思考、首创精神、个性（博士生）</li><li>尼尔斯玻尔：“哥本哈根精神”</li><li>学派领袖的阻碍作用：马太效应</li><li>科学学派的特征<ul><li>(1)科学带头人一大科学家</li><li>(2)科学带头人的教育技能，鉴定才能的能力</li><li>(3)特殊的科学气氛</li><li>(4)科学带头人的高品质，个人感召力</li><li>(5)学生的独立思考与首创力</li><li>(6)研究方法与解释现象的观点</li><li>(7)学生与科学带头人的经常交住与密切联系</li><li>(8)存在大批有才能的学生</li><li>(9)课题的统一</li><li>(10)独特的思维方式</li><li>(11)具有新奇的科学思想</li><li>(12)创立新的科学方向</li></ul></li><li><strong>无形学院</strong>( INVISIBLE COLLEGE)<ul><li>17世纪波义耳，“看不见的学院”（自发的、非正式的科学团体）。</li><li>普赖斯，将“无形学院”概念从科学史移植到科学社会学。认为科学共同体中有两类组织，一是正式的、有组织的科学家集团，一是非正式的、非组织化的科学家群体，后者主要通过科学交流、信息网络连接在一起，被称为无形学院。</li><li>默顿，“从社会学意义上，可以把“无形学院解释为地理上分散的科学家集簇，这些科学家处在较大的科学共同体中，但是，他们彼此之间在认识上的相互作用比其他科学家的相互影响更加频繁。”</li><li>克兰，“社会子”，重视科学中心的非正式社会组织在科学进步中的作用。</li></ul></li><li>现代科学知识发展的两种反向趋势：<ul><li>高度专门化：走向封闭性，科学共同体之间交流困难。</li><li>接受外部的学术思想：不同学科相互交叉和渗透，走向开放</li><li>开放性的表现即是无形学院</li></ul></li><li>无形学院特征<ul><li><strong>具有共同的专业研究领域。</strong></li><li><strong>具有趋同的学术思想和理论倾向</strong></li><li><strong>地域上存在空间跨度</strong></li><li><strong>社会结构是松散的、非正式的。</strong></li><li><strong>科学家之间主要通过信息媒介、交流网络来沟通，形成复杂的网络系统。</strong></li><li><strong>通过无形学院网络更容易了解研究前沿。（正式系统往往有滞后效应）</strong></li></ul></li><li>无形学院与科学交流：<ul><li>普赖斯：无形学院是科学家（作为信息传递者）通过信息交流形成的看不见的集体。</li><li>无形学院作为科学共同体的另一种社会形态，其重要指标是：无形学院有独特的、富有个性化的科学交流的信息网络。</li><li>科学家只进入正式的科学交流网络是不够的：学生要与导师打成一片。</li></ul></li><li>外在形式：学会、研究所、大学</li><li>学会<ul><li>科学共同体最为广泛的社会外在组织形式。</li><li>基本覆盖各国的科学共同体成员。</li><li>主要任务是学术交流。</li><li>各种学会常常是各国政府领导科学事业的思想库和咨询库。</li></ul></li><li>大学<ul><li>传统功能是教书育人。</li><li>现代大学还有科学研究功能一研究型大学</li><li>教师通过科学研究，发展新知识、传播新知识</li><li>服务社会、国家利益</li></ul></li><li>国家科研组织系统<ul><li>国立科研机构：侧重于关系国计民生、国家安全的综合应用研究及其相关基础研究。</li><li>企业研发中心：侧重于开发研究及相关的应用研究</li><li>大学：侧重基础研究</li><li>非政府、非营利科研机构：对上述各部分进行补充</li></ul></li></ul><h2 id="3-科学共同体的社会分层"><a href="#3-科学共同体的社会分层" class="headerlink" title="3. 科学共同体的社会分层"></a><a href="https://github.com/JackHCC/PKU-Lessons-Summary/edit/master/Introduction_to_Dialectics_of_Nature/README.md#3-%E7%A7%91%E5%AD%A6%E5%85%B1%E5%90%8C%E4%BD%93%E7%9A%84%E7%A4%BE%E4%BC%9A%E5%88%86%E5%B1%82">3. 科学共同体的社会分层</a></h2><ul><li><p><strong>分层</strong>定义：</p><ul><li>分层概念源于地质学，在地质剖面中可以看到地质发展史上不同时代的岩石具有不同的形状，形成若干岩层。</li><li>分层即是根据地质学知识对岩层进行鉴定以判定生成年代的过程。</li></ul></li><li><p>社会分层定义：</p><ul><li>由于社会成员之间有差异，可以根据差异程度把社会成员划分为若干不同的等级，形成社会的等级结构。处于不同等级地位上的社会成员就自然形成了不同的社会层次</li><li><strong>社会分层</strong>就是对人进行分类，依据一定的标准去衡量人们在整个社会生活和社会关系中的不同位置，从而把社会中的人划分为不同的阶层。</li></ul></li><li><p>社会分层的标准</p><ul><li>(1)根据人的自然属性：年龄、性别、种族、肤色等。</li><li>(2)根据人的社会属性：地位、教育程度、收入水平、权力、声望、行业、单位等。<ul><li>北大学费：30万-150万</li></ul></li></ul></li><li><p>现代社会的分层结构：</p><ul><li><strong>梨状体：处于最高层的人是极少数，但处于最低层的人也是少数，相当大部分的人处于中间位置。这在农业社会也是如此。</strong></li><li>社会越发达，处于中间位置的人（中产阶级）就越多，处于下层的人就越少</li><li>BNU英语老师：只要有工作就是中产阶级</li><li>鲁迅：社会三种人，维护传统-维持现状-改革创新</li></ul></li><li><p>朱克曼统计</p></li><li><p><strong>金字塔模型</strong></p><ul><li>1,美国诺贝尔奖获得者</li><li>13,美国科学院院士</li><li>2400,获得过博士学位的科学家</li><li>2600,载入《美国男女科学家》词典的科学家</li><li>4300,载入《科技人员登记册》的科学家</li><li>6800,自称的科学工作者</li><li>处于顶端的科学界超级精英于底层科学家比例：1：486</li><li>底层科学家通过高层道路极为艰难，机会很小</li></ul></li><li><p>年龄：</p><ul><li><p>1.科学是年轻人的事业。</p><ul><li>科研人员中25-44岁所占比例远高于一般职业雇员的相应比例。</li></ul></li><li><p>2.条理化程度高的学科年轻人出成果早，成名早</p></li><li><ol start="3"><li></li></ol><p>角色顺序</p><ul><li>科学家的4种角色：<strong>A研究，B教学，C行政管理，D鉴定和评审（守门员）</strong></li><li>科学家的科学生涯早期主要从事研究、教学工作，晚期渐渐从事行政管理和评审工作</li><li>科学的特征之一是老年人进行管理一科学中的“老人政治”。</li></ul></li></ul></li><li><p>性别：</p><ul><li>妇女进入科学界人数较少</li><li>不同学科比例有所不同</li><li>科学高层次中男女比例差异显著<ul><li>智商调查显示：博士学位获得者中女博士智商平均值稍高于男博士</li></ul></li><li>女性科研生产率低有社会因素<ul><li>流动性差</li><li>动力问题</li><li>性别歧视</li></ul></li></ul></li><li><p>学术声望（知名度）：</p><ul><li>1.是一种无形的社会承认，是科学家们自愿作出，受非科学因素影响小。<ul><li>国奖部奖不如学人的“心奖”（心服）</li><li>金杯银杯不如学界的“口碑”（口服）</li></ul></li><li>2.科学家发表论文数及被引证次数是知名度的经验测量指标<ul><li>科学家论文生产率的<strong>逆二次幂规律（洛特卡定律）</strong>：发表N篇论文作者人数与1/N平方成比例：相应发表一篇论文100人，2-25，3-11……</li><li>高水平科学家论文被大量引用，大多数论文被忽略</li></ul></li></ul></li><li><p>学术背景</p><ul><li>1.名师出高徒：约一半美国诺贝尔获得者导师也是诺贝尔奖获得者</li><li>2.著名机构的的优势积累，倍增效应</li></ul></li></ul><h2 id="4-科学的奖励制度：优先权"><a href="#4-科学的奖励制度：优先权" class="headerlink" title="4. 科学的奖励制度：优先权"></a><a href="https://github.com/JackHCC/PKU-Lessons-Summary/edit/master/Introduction_to_Dialectics_of_Nature/README.md#4-%E7%A7%91%E5%AD%A6%E7%9A%84%E5%A5%96%E5%8A%B1%E5%88%B6%E5%BA%A6%E4%BC%98%E5%85%88%E6%9D%83">4. 科学的奖励制度：优先权</a></h2><blockquote><ul><li>近300年的科学史上充满了大大小小的关于科学发现和发明的优先权争论。</li><li>17世纪，伽利略：《对巴兰德卡帕的谁谤和款诈的答辩》《试金者》</li><li>17世纪，牛顿</li><li>与胡克，光学、天体力学领域</li><li>与莱布尼兹，微积分发明（利用皇家学会会长权力中止相关调查委员会工作）</li><li>胡克与惠更斯，螺旋弹簧天平的发明权</li><li>18世纪，卡文迪许，普利斯特列，拉瓦锡：水的成分的组成</li><li>亚当斯，勒维列：海王星</li><li>琴纳，皮尔逊，拉包特：接种牛痘</li><li>19世纪，法拉弟，武拉斯顿，戴维：电磁感应现象</li><li>拉格朗日，高斯，伯努利家族，柯西等数学领域</li><li>20世纪，新特点：优先权之争出现在科研过程中了。</li><li>DNA发现过程：1953-1962</li><li>克里克、沃森；维尔金斯，弗兰克林；泡林</li></ul></blockquote><ul><li><p>优先权之争原因：</p><ul><li>同时发现必然导致优先权争议？</li><li>能量守恒定律：焦耳，迈尔，禁尔母霍，格罗夫，柯尔丁，卡诺，法拉弟，李比希，(相互谦让，达尔文华菜士)</li><li>默顿，科学体制本身的规范要求所致</li><li>创新是科学界的最高价值</li><li>原因不在于人类本性和个人品质，这仅只增加一些色彩和音调</li><li>科学体制内在要求使得科学家为维护自己的发明而斗争</li><li>对优先权的承认导致奖励制度的出现</li></ul></li><li><p>定义：</p><p>科学共同体对于科学家所作贡献的肯定和承认的体系。包括各种名目的，奖励和报酬制度。</p><ul><li>牛顿时代，达尔文时期，爱因斯坦世纪</li><li>哥白尼体系，胡克定律，哈雷彗星，普朗克常数</li><li>古生物学之父一居维叶，电工学之父ー法拉弟，实验心理学之父一冯特</li></ul></li><li><p>金钱：在科学报酬制度是不重要的，“科学王国基本的硬通货是</p><p>承认</p><p>“</p><ul><li>退却主义：孟德尔，迈尔</li></ul></li><li><p>科学体制</p><p>承认</p><p>：</p><p>主要是在科学的正式交流渠道中实现的。</p><ul><li>三个方面：<strong>论文和著作发表，被引证率，荣誉奖励</strong></li><li>两个类别：<strong>实际职位，名誉承认</strong></li><li><strong>承认与科学的生产率正相关</strong>：大科学家一般是高产的</li><li>研究工作的质量比单纯的数量要重要的多</li></ul></li><li><p>学院科学：纯科学</p><ul><li>规范： CUDOS= kudos</li><li>Communalism <strong>公有主义</strong></li><li>Universalism <strong>普遍主义</strong></li><li>Disinterestedness <strong>无私利性</strong></li><li>Originality <strong>独创性</strong></li><li>Organized skepticism <strong>有条理的怀疑主义</strong></li></ul></li><li><p>后学院科学：产业科学</p><ul><li>规范： PLACE</li><li>Proprietary 所有人的(专利的、所有权的)</li><li>Local 局部的，地方的</li><li>Authoritarian 权威的</li><li>Commissioned 定向的，任务导向的</li><li>Expert 专门的</li></ul></li><li><p>学院科学的奖励：</p><p>精神性、荣誉性</p><ul><li>同行承认</li><li>命名</li><li>称号</li><li>荣誉</li><li>精神</li></ul></li><li><p>后学院科学的奖励：</p><p>多元、多样、广泛</p><ul><li>多元：国家、企事、NGO、个人（饶毅个人放弃院士评选）</li><li>多样：荣誉、实物、金钱、股权、职位</li><li>广泛：基研、应用、开发</li><li>物质为主</li><li>精神为辅</li></ul></li><li><p>国家最高科学技术奖</p><ul><li>国家自然科学奖</li><li>国家技术发明奖</li><li>国家科学技术进步奖</li><li>中华人民共和国国际科学技术合作奖<ul><li>最高科学技术奖、国际科学技术合作奖不分等级</li><li>自然科学奖、技术发明奖、科学技术进步奖分一等奖、二等奖</li><li>自然科学奖、技术发明奖、科学技术进步奖每年奖励项目总数不细过400项。</li></ul></li></ul></li><li><p>国家最高科学技术奖</p><p>(2000—)</p><ul><li>(1)在当代科学技术前沿取得重大突破或者在科学技术发展中有卓越建树的</li><li>(2)在科学技术创新、科学技术成果转化和高技术产业化中，创造巨大经济效益或者社会效益的。<ul><li><strong>2000年度吴文俊、袁隆平</strong></li><li><strong>2001年度王选、黄昆。</strong></li><li><strong>2002年度金怡濂。</strong></li><li><strong>2003年度刘东生、王永志。</strong></li><li><strong>2004年首次空缺</strong></li><li><strong>2005年度叶笃正、吴孟超</strong></li><li><strong>2006年度李振声</strong></li><li><strong>2007年度闵恩泽、吴征镒</strong></li><li><strong>2008年度王忠诚、徐光宪</strong></li><li><strong>2009年度谷超豪、孙家栋</strong></li><li><strong>2010年度师昌绪、王振义</strong></li><li><strong>2011年度谢家麟、吴良镛</strong></li><li><strong>2012年度郑哲敏、王小谟</strong></li><li><strong>2013年度张存浩、陈开甲</strong></li><li><strong>2014年度于敏一氢弹</strong></li><li><strong>2016年度屠呦呦一三无科学家-2015诺奖</strong></li></ul></li></ul></li><li><p>国家自然科学奖</p><ul><li>在基础研究和应用基础研究中阐明自然现象、特征和规律，做出重大科学发现。</li><li>重大科学发现：<ul><li>(1)前人尚未发现或者尚未明</li><li>(2)具有重大科学价值</li><li>(3)得到国内外自然科学界公认</li></ul></li></ul></li><li><p>国家技术发明奖</p><ul><li>运用科学技术知识做出产品、工艺、材料及其系统等重大技术发明。</li><li>重大技术发明：<ul><li>(1)前人尚未发明或者尚未公开</li><li>(2)具有先进性和创造性</li><li>(3)经实施，创造显著经济效益或者社会效益。</li></ul></li></ul></li><li><p>国家科学技术进步奖</p></li><li><p>科学奖励的问题：“第四十一席位”</p><ul><li>朱克曼，《科学界的精英》</li><li>评议人的重要性：守门员</li></ul></li></ul><h2 id="5-科学的奖励机制：马太效应"><a href="#5-科学的奖励机制：马太效应" class="headerlink" title="5. 科学的奖励机制：马太效应"></a><a href="https://github.com/JackHCC/PKU-Lessons-Summary/edit/master/Introduction_to_Dialectics_of_Nature/README.md#5-%E7%A7%91%E5%AD%A6%E7%9A%84%E5%A5%96%E5%8A%B1%E6%9C%BA%E5%88%B6%E9%A9%AC%E5%A4%AA%E6%95%88%E5%BA%94">5. 科学的奖励机制：马太效应</a></h2><ul><li>马太效应<ul><li>马太效应的基础<ul><li>棘轮效应一科学家一旦做出了某种成就，获得了某种声望，他以后就不会再跌回原来的水平和位置，如同棘轮装置一样</li><li>诺贝奖获得者将终生带有这份荣誉，其光辉只可能由更光辉的新星出现而相对逊色，但其本人决不会倒回去。</li><li>棘轮效应引导科学家不断继续努力，获得更大的成就。</li><li>科学荣越高，科学共同体的期望值也越高，形成压力和动力。</li></ul></li><li>荣誉背景增强<ul><li>能见度</li></ul></li><li>荣誉背景的反溯增强作用：<ul><li>无名科学家经过不断努力，一且成名，人们会去回溯他以前的工作，其早期微不足道的工作也可能会受到重视和追捧、赞誉。</li><li>成名较晚的科学家，在早期其成就被低估了，在后期其成就又被高估了。</li></ul></li><li>马太效应的正面作用：<ul><li>促进交流，提高能见度<ul><li>阅读有声望的科学家的论文</li><li>新手最好先与名家合作发表研究成果，否则其成果可能永不见天日</li></ul></li><li>单位优势积累，群体效应<ul><li>进入优秀单位，加入先进群体</li><li>自我实现</li><li>运动队的冠军效应：信心一北大，哈佛的驴</li></ul></li></ul></li></ul></li></ul><h2 id="6-单元总结"><a href="#6-单元总结" class="headerlink" title="6. 单元总结"></a><a href="https://github.com/JackHCC/PKU-Lessons-Summary/edit/master/Introduction_to_Dialectics_of_Nature/README.md#6-%E5%8D%95%E5%85%83%E6%80%BB%E7%BB%93">6. 单元总结</a></h2><ul><li><strong>科学共同体、学派、无形学院</strong></li><li><strong>科学社会分层：金字塔模型</strong></li><li><strong>科学家的职业顺序</strong></li><li><strong>科学家论文生产率的逆二次幂规律</strong></li><li><strong>科学界的最高奖励是承认</strong></li><li><strong>国家最高科学技术奖</strong></li></ul><h1 id="科技政策与创新"><a href="#科技政策与创新" class="headerlink" title="科技政策与创新"></a><a href="https://github.com/JackHCC/PKU-Lessons-Summary/edit/master/Introduction_to_Dialectics_of_Nature/README.md#%E7%A7%91%E6%8A%80%E6%94%BF%E7%AD%96%E4%B8%8E%E5%88%9B%E6%96%B0">科技政策与创新</a></h1><h2 id="1-科技政策与创新"><a href="#1-科技政策与创新" class="headerlink" title="1. 科技政策与创新"></a><a href="https://github.com/JackHCC/PKU-Lessons-Summary/edit/master/Introduction_to_Dialectics_of_Nature/README.md#1-%E7%A7%91%E6%8A%80%E6%94%BF%E7%AD%96%E4%B8%8E%E5%88%9B%E6%96%B0">1. 科技政策与创新</a></h2><h3 id="定义"><a href="#定义" class="headerlink" title="定义"></a><a href="https://github.com/JackHCC/PKU-Lessons-Summary/edit/master/Introduction_to_Dialectics_of_Nature/README.md#%E5%AE%9A%E4%B9%89">定义</a></h3><ul><li><p>定义</p><ul><li>在英文文献里，科技政策最早主要是指科学政策( Science Policy),原因是在市场经济发达的国家，技术发展基本上是私人企业的行为，政府本身并不直接支持企业，政府的科技政策也因而主要集中在科学发展方面。但在实际用法中，科学和技术常常连在一起科学政策常常包含着应用科学以及技术发展，也就变成了科技政策。</li><li>科技政策有时用 Science and Technology Policy全称表示，有时用 Science Policy表示。</li><li>法国学者让·雅克・萨洛蒙（Jean- Jacques Salmon)：“政府采取的集中性的措施，一方面为了鼓励科学和技术研究的发展，另一方面为了利用这些研究的结果实现所期望的一般的社会、经济和政治目标</li><li><strong>”为科技的政策“和”利用科技的政策“</strong></li><li>将科技活动与政治、军事、经济和社会发进行系统整合</li><li>美国科技政策研究领军人物布鲁克斯（ Harvey Brooks)：科技政策议题分为两类：1.“为了科学发展的政策”，如支持和管理国家科学事业的政策、计划等；2.“包含科学因素的政策”，如非常依赖于科技因素的国家政治于管理议题</li><li>科技政策的功能不仅涉及科学技术自身的发展，而且涉及科技的应用，从而势必覆盖非常宽广的领域(科研机构、大学、工业等)需要一个开阔的视野。</li><li>科技政策议题不仅包括传统的国家安全、经济发展、社会进步、人民健康领域，而且包括环境保护、全球变化、电子商务、电子货币等新的、紧迫的问题</li><li>科技政策与经济政策、社会发展政策、教育政策等一起构成国家政策的不可缺少的一部分。</li></ul></li><li><p>科技政策的涵义：</p><ul><li>科技政策是为促进科学技术发展以及通过利用科学技术为国家目标（国防安全、经济增长、社会发展、环境、健康等）服务而采取的集中性和协调性的政策，是科学技术与国家发展的有机整合，通常在国家层面上使用。包括：对科技活动进行指导和管理的法律、法规、措施</li></ul></li><li><p>科技政策</p><p>两个相互补充的部分</p><p>：</p><ul><li><strong>为了科学的政策(Policy for Science);</strong></li><li><strong>通过科学的政策(Policy through science)</strong></li><li>(1)为了科学技术本身发展的科技政策</li><li>(2)通过利用科学技术研究的成果为国家目标服务的科技政策</li></ul></li><li><p>科技政策的</p><p>核心问题</p><ul><li><p>(1)</p><p>科学技术政策的制定</p><ul><li>三个层次：国家战略层次，发展计划层次，管理实施层次</li></ul></li><li><p>(2)<strong>科学技术资源的分配</strong>：科学技术资源及分配的基本原理和依据</p></li><li><p>(3)</p><p>对科学技术的规范和控制</p><ul><li>科学技术的奖励制度</li><li>2020,国家科技最高奖500-800万</li><li>但是，科学共同体硬通货，助教工资</li></ul></li></ul></li><li><p>当前全球性科技政策议题</p><ul><li>越来越多的科技政策议题包含科技与社会互动的内容，涉及到广泛的公众利益。</li><li>(1)国家安全领域：大规模杀伤武器核查：信息安全，个人信息安全</li><li>(2)经济发展领域：电子商务和网络经济，国际贸易，知识产权，电子货币</li><li>(3)卫生健康领域：食品安全，流行病研究，动物实验，风险控制</li><li>(4)环境一生态领域：全球变暖，化学品污染，核辐射，国地区环境争端</li></ul></li></ul><h3 id="起源"><a href="#起源" class="headerlink" title="起源"></a><a href="https://github.com/JackHCC/PKU-Lessons-Summary/edit/master/Introduction_to_Dialectics_of_Nature/README.md#%E8%B5%B7%E6%BA%90">起源</a></h3><blockquote><ul><li><p>第一次世界大战，科学与国家开始紧密连接起来</p></li><li><p>1915年，英国建立了科学与工业研究部，开始了公共支持基础研究工作。</p></li><li><p>1936年，法国政府设立负责科研事务的国务次长职位。</p></li><li><p>第二次世界大战，科学技术与国家关系变化的分水岭</p></li><li><p>科技在国家发展中地位上升</p></li><li><p>二战后：</p><ul><li>美国需要什么样的科技政策？主要争论的议题有三个：</li><li>(1)需要决定科学家在国家政策中的适当位置(总统科学顾间，863)</li><li>(2)需要发展关于基础研究的政策</li><li>(3)需要解决与国家安全政策相关的难题，特别与核武器相关的难题</li></ul></li><li><p>军方主张应该在军事相关的研究中起决定作用</p><ul><li>新政派议员主张需要有一个强有力的联邦机构管理技术定向的研究。</li><li>基础研究被视为是附属函、次要的从属地位</li><li>美国科学研究发展局(OSRD)主任万尼瓦布什及一些科学家为代表的科学共同体提出了新的富有生命力的思想路线：支持基础研究：控制原子能；把科学家放在国家决策中的重要位置</li></ul></li><li><p>1944-11-20，总统的问题：</p><ul><li>罗斯福总统要求布什就如何把战时的成功经验广泛用于即将到来的和平时期的问题提出意见，特别是针对以下四个问题：<ul><li>(1)在维护国家安全的限度内，为了把战时工作中科学知识所作的贡献尽快公之于世，应该做些什么？</li><li>(2)特别是关于科学向疾病作斗争，国家如何组织研究，把战时取得的进展继续下去？</li><li>(3)政府怎样促进和帮助公立与私立机构的研究活动？</li><li>(4)国家如何更好地发现和培养美国青年人的科学才能，以确保将来的科学研究水平及得上战争期间达到的水平？</li></ul></li></ul></li><li><p>1945-7-5，万尼瓦尔・布什：Science-the Endless Frontier</p><ul><li>国家安全、人民健康、公共福利需要新的科学知识需要科学进步</li><li>联邦政府应承担责任，对科学进行强有力的投资，促进产生新的科学知识，培训青年人的科学才能</li><li>建立一种维护科学自由探家( freedom of inquiry)保障长期稳定支持的新的机构-国家科学基金会-1950-NSF( peer review，中国-NSFC-1986稳住头）</li><li>提出基础研究是人民健康、公众福利和国家安全的源泉，保证科学的自主性和自由就会带来繁荣和利益，赋于了科学自主性新的含义。这种自主性模式兼自主性和责任，被称为“为繁荣的自主”(autonomy-for-prosperity）</li></ul></li><li><p>万尼瓦尔・布什：</p><p>《科学：没有止境的前沿》</p><ul><li>奠定了<strong>国家支持科学和教育发展的思想基础</strong></li><li>标志着<strong>国家科技政策的正式出现</strong>，对美国及大多数发达国家科技政策的影响达半个世纪(1994 Science for National Interests)。——现在则是各领风骚二三年，专家—体系</li><li>1945-9-6，美总统杜鲁门在国会演讲：“今天，如果不充分发展其科学技术资源，没有一个国家能保持界的领位。</li><li>1988，邓小平“科学技术是第一生产力”</li></ul></li><li><p>二战以前，联邦政府基本上没有支持基础研究的专门计划</p><ul><li><strong>布什思想的成功，其自由探索的思想是与自主性原则联系在一起的，与研究活动的在内质量控制，研究与教育和培训的结合联系再一起，这些原则不仅被NSF，而且也被NIH及其他一些资助机构采用，成为科学健康发展的保证</strong></li><li><strong>缺点：线性发展模式</strong></li></ul></li></ul></blockquote><h3 id="历史"><a href="#历史" class="headerlink" title="历史"></a><a href="https://github.com/JackHCC/PKU-Lessons-Summary/edit/master/Introduction_to_Dialectics_of_Nature/README.md#%E5%8E%86%E5%8F%B2">历史</a></h3><blockquote><ul><li>1945-1957，科技政策的体制化时期<ul><li>标志是二战后所有工业化国家都接受了政府应当积极介入科学技术的研究和发展的思想</li><li>战期间在雷达、原子弹、电子学等领域建立起来的大规模、多学科的严格的研究计划组织模式对战后各国科技发展产生深远影响</li><li>美国加强国立实验室建设：橡树岭国家实验室、阿拉贡国家实验室、劳伦斯回家实验室等</li></ul></li><li>1950，NSF建立，经费不多，意义重大—科学究相对独立、自由，政治、军事干扰少；至今已经有170多项NSF资助的研究项目获得了诺贝尔奖</li><li>1957-1969，军事化模式的新阶段</li><li>1957-10-4，前苏联 SPUTNIK 一 洲际导弹</li><li>1958-1-31，美国卫星上天，1957-1958，NASA成立，国防部成立高级研究计划：1958-11,《家家防卫教育法案》通过：NSF加强—多元化科技体制确立</li><li>欧洲，1957欧洲经济共同体成立，欧洲原子能共同体成立。</li><li><strong>1963经济合作与发展组织(OECD)发表首篇科技政策报告，《科学和政府的政策》</strong>（ Science and the Policies of Governments)，<strong>第一次明确阐明了科学和技术政策的内容</strong>：<strong>基础研究，应用研究和试验发展</strong>三分法（<strong>基础研究 应用研究 开发研究</strong>）</li><li>1969-7-12，阿波罗登月(美科学家担心？)</li><li>1970-8，社会反思时期<ul><li>科技发展与核威胁、战争机器、环境污染等联系到了一起，科学技术受到各方面指责和攻击一科学技术至高无上的信条开始消退</li></ul></li><li>1971，OECD报告《科学、增长与社会：新的方向》强调需要对科技进行社会控制，把科技政策拓宽到整个政府政策部门。</li><li>1971，美国癌症计划启动(民用科技计划)</li><li>1972，国会技术评估办公室：否定登陆火星</li><li>1972，联合国首次人类环境会议，罗马俱乐部《增长的极限》</li><li>1980S，经济竞争时代<ul><li>欧洲、日本恢复并崛起（第二次珍珠港事件）</li><li>日本注重技术预见</li><li>军事技术向军民两用转移，政府开始介入民用技术的发展</li><li>“竞争力”成为科技与经济政策的关键词</li><li>企业竞争日益成为国家的竞争</li><li>1985，欧洲元里卡计划(“我发现了！”)</li><li>1980S末，国家创新系统(NIS)提出</li></ul></li><li>1990s以来，全球化与创新时代<ul><li>前苏联倒台，冷战结束</li><li>1994，美国《为了国家利益的科学》，把国家利益和安全的概念从回防扩展到经社会、健康各个方面</li><li>创新可出现在研究、设计、生产及营销的任何环节</li><li>知识经济：直接建立在知识的生产、分配和使用之上的经济</li><li>在生物、信息、纳米关键技术领域启动国家R&amp;D计划，基研、应用、技术日益交叉和网络化</li><li>官—产—学加强合作。</li><li>公众理解科学(PUS)、公众参与科学</li></ul></li></ul></blockquote><h3 id="前沿"><a href="#前沿" class="headerlink" title="前沿"></a><a href="https://github.com/JackHCC/PKU-Lessons-Summary/edit/master/Introduction_to_Dialectics_of_Nature/README.md#%E5%89%8D%E6%B2%BF">前沿</a></h3><ul><li>科技政策研究是一个不同专业群体“诸侯制据”的领域<ul><li>科技政策研究是个学科交叉领域，又是一个实际性很强的领域。</li><li>多学科交叉，实践性很强</li><li>主要理论基础是经济学，政治学和社会学</li></ul></li><li>国家创新系统(NIS)的理论，揭示出科学、技术和创新之间存在着系统性的联系，说明创新是许多不同的行为主体(企业、大学、研究机构、政府、学会等)相互作用的系统行为，创新不仅依赖于具体行为者的表现，而且依赖于他们与创新系统中其他行为者之间的相互作用，包括科学、技术、组织、商业、金融和法律等一系列活动。<ul><li>NIS理论为科技政策提供新的视野和理论工具。如科技政策的传统理论依据是<strong>市场失效</strong>原理，即指单靠市场机制不能解决某些科技领域的最优资源配置，必须由政府来调控与支持</li><li>还有“<strong>系统失效</strong>”，小布什的常春顾问一希拉里，一家两个“总统”</li></ul></li><li>官产学合作。创新成为经济可持续增长和响应社会需要的关键推动力。实践表明，创新常常需要官产学多方合作。一方面，许多商业上取得成功的高技术和根本性创新并不是来源于竞争的市场，而是公共资金对基础研究长期支持的结果，例如互联网的发明（美国海军司令部）：另一方面，要促进技术在社会上得到广泛的应用和扩散，需要私营企业的参与。因此，创新要公共部门、科研部门和私营部门或产学多方相互补充的能力，相互间需要建立伙伴关系</li><li><strong>三螺旋模型</strong>：<strong>政府、学术界（大学和科研院所）与产业界</strong>以经济发展的需求为纽带而联接起来，形成三种力量交叉影响、抱成一团又螺旋上升的“三重螺旋”的新关系</li><li>技术预见。通过系统研究科学技术趋势和经济社会长远未来的需求，选择和确定可能产生最大经济和社会回报的新兴通用技术和战略研究领域的活动。</li><li>需要深入研究的政策议题：<ul><li>(1)科技人才的需求与供给。不同行业、部门人オ求的环境分析，科技人才供给面临挑战。</li><li>(2)改进科技劳动力市场，包括雇佣和薪制度改革、促进科技人才流动、全球人才竞争的压力和机遇等。</li><li>(3)组织中的人才激励与管理</li><li>(4)教育和培训计划改革，提高科学教育质量、改革高等教育课程、建立新的博士和博士后计划、促进研究人员流动</li></ul></li><li>科学与治理<ul><li>共识会议，科学沙龙</li></ul></li><li>国际科技合作-欧盟框架计划<ul><li>1984年启动</li><li>设立科技目标，有限领域，主要活动方针，必须的责任，参与规划，资金分配等</li></ul></li><li>国际科技合作，中医药国际科技合作计划<ul><li>2006年</li><li>中国科学技术发展自主创新战略的重要体现</li><li>中医药有2000多年的历史</li><li>目前使用人口最多、保存最完整，影响力最大的传统医药体系，共有12807种中药，8000余种中医药典籍，60000余处方。</li><li>中医药学是以自然科学知识为主体，同时受中国古代哲学思想的深刻影响，并与人文社会科学知识相交融的医学科学</li><li>中医药2个基本原则：<strong>整体观念+辨证论治</strong></li><li>中医药4个特点：<strong>简、便、廉、验</strong></li><li><strong>现代化，国际化，文化传播</strong></li><li>基于现有韩方典籍的中药制剂品目许可规定，中药制剂根据11种现有韩方典籍中记录的韩方进行品目许可。</li><li>中医药英文译名：<ul><li>Traditional Medicine</li><li>Traditional Chinese Medicine</li><li>Oriental Medicine：中医药，韩国东医，日本汉方医学，越南医学</li></ul></li><li>2007-10,WHO《中医药学名词术语国际标准》：中韩、日等国学者共同努力4年编而成，共收词3543个。并用繁体字，为中医药走向全球标准化迈出重要一步</li></ul></li><li>回际科技合作-中医药国际科技合作计划<ul><li>中医药资源，挖掘、保护、开发、利用、推广、国际化</li><li>中医药研发，科研、生产、敦育、培训</li><li>中医药交流，人才交流、信息共享、文化交流</li><li>政府间含作</li><li>民间合作</li></ul></li></ul><h2 id="2-中国科技政策"><a href="#2-中国科技政策" class="headerlink" title="2. 中国科技政策"></a><a href="https://github.com/JackHCC/PKU-Lessons-Summary/edit/master/Introduction_to_Dialectics_of_Nature/README.md#2-%E4%B8%AD%E5%9B%BD%E7%A7%91%E6%8A%80%E6%94%BF%E7%AD%96">2. 中国科技政策</a></h2><blockquote><ul><li>建国以来，我国制定的若干中长期科技规划：<ul><li>“1956-1967年科学技术发展远景规划”</li><li>“1963-1972年科学技术发展规划”</li><li>“1978-1985年全国科学技术发展规划”</li><li>“1986-2000年国家中长期科学技术发展规划”</li><li>“1991-1995-2000年科学技术发展十年规划和“八五”计划”</li><li>“全固科技发展“九五”计划和到2010年长期规划”</li><li>“国民经济和社会发展第十个五年计划科技数育发展专项规划”</li><li>“2006-2020年国家中长期科学和技术发展规划”</li></ul></li><li>1956-1，采取以任务为经，以学科为纬，以任务带学科的原则<ul><li>向科学进军的思想</li><li>57项重要科学技术任务，带有关健意义的12个科学研究重点</li></ul></li></ul></blockquote><ul><li><strong>四大紧急措施：为发展无线电电子学，自动化，半导体和计算机技术</strong>这四个现代科学技术发展中关键作用的新学科领域，短时间内改变现状，接近国际水平。</li></ul><blockquote><ul><li>总体来说，规划所涉及的内容全面：规划的编制以科学家和科技人员为主：规划涉及的部门多：编制程序简单<ul><li>邓小平：没有两弹一星，中国就不能叫做大国</li><li>陈毅，没有原子弹，说话不算数，把裤子当了</li><li>川藏公路</li><li>三线建设</li><li>奠定大国基础</li></ul></li><li>《国家中长期科学和技术发展规划纲要（2006-2020)》<ul><li>到2020年，我国科学技术发展的总体目标是：自主创新能力显著增强，科技促进经济社会发展和保障国家安全的能力显著增强，为全面建设小康社会提供强有力的支撑：基础科学和前沿技术研究综合实力显著增强，取得一批在世界具有重大影响的科学技术成果，进入创新型国家行列，为在本世纪中叶成为世界科技强奠定基础。</li><li>指导方针：<strong>自主创新，重点跨越，支撑发展，引领未来</strong></li><li>11个重点领域技术</li></ul></li><li>国家中长期科学和技术发展规划战略研究</li><li>国家中长期科学和技术发展规划战略研究20个专题</li></ul></blockquote><h2 id="3-科技政策与创新"><a href="#3-科技政策与创新" class="headerlink" title="3. 科技政策与创新"></a><a href="https://github.com/JackHCC/PKU-Lessons-Summary/edit/master/Introduction_to_Dialectics_of_Nature/README.md#3-%E7%A7%91%E6%8A%80%E6%94%BF%E7%AD%96%E4%B8%8E%E5%88%9B%E6%96%B0">3. 科技政策与创新</a></h2><ul><li><p>创新的含义</p><ul><li>今天的创新是一个更广泛的概念，可以涉及科学发现、技术发明、技术创新、市场创新、管理创新、组织创新、制度创新、思想和观念创新等</li><li>创新的基本涵义是指技术创新：“是一个从新产品或新工艺设想的产生，经过研究、开发、工程化、商业化生产，到市场应用的完整过程的一系列活动的总和“</li><li><strong>创新活动本质上是一个经济过程</strong>。</li><li>技术发明仅仅是创新的其中一个环节。</li><li><strong>创新的落脚点是创造效益</strong></li></ul></li><li><p>创新过程的</p><p>五代模式</p><ul><li>(1)基于R&amp;D的技术推动过程</li><li>(2)市场需求拉动的过程（贝尔实验室）</li><li>(3)整合了R&amp;D推动和市场需求拉动的结合模式</li><li>(4)基于较强用户-厂商联系的一体化、平行模式</li><li>(5)系统一体化和网络化模式（三螺旋）</li><li>越来越将创新过程视为一个复杂的相互作用过程，简言之，创新不是一个独立事件，而是由许多事件组合在一起以螺旋式不断发展的，很难判断是哪一环节产生的创新结果或哪个因素造就了创新成功</li></ul></li><li><p>政府干预技术创新的合理性</p><ul><li>主要是因为在技术创新过程中存在<strong>“市场失效”问题，竞争的市场不是投资基研和最佳机制，必须由政府来支持。</strong></li><li><strong>“系统失效”的问题，创新体系中各要素的不匹配或是过窄的专业化所形成的制度刚性、信息不对称以及要素流动等问题所形成的系统失灵。</strong></li><li>需要由政府对技术创新的方向、规模以及速度进行干预，使之朝社会收益最大化的方向发展。</li><li><strong>科技政策在创新中的角色</strong>：提高创新效率和增强创新能方，促进创新活动的大规模涌现。</li></ul></li></ul><blockquote><ul><li><p>历史</p><ul><li>建设国家创新体系-1998年以后</li><li>1998，中科院：《迎接知识经济时代，建设国家创新体系》</li><li>1998年以后，国家部委所属376个技术开发型研究院</li><li>1999,《国家科学技术奖励条例》</li><li>1999,《关于加强技术创新、发展高科技、实现产业化的决定》</li></ul></li><li><p>现状</p><ul><li><p><strong>在经费拨款方面</strong>：对从事不同类型工作的研究机构施行不同的拨款办法和管理办法，逐步减少事业费拨款而加大对项目的资助</p></li><li><p>在研究所体制改革方面</p><p>：</p><ul><li>政研职责分开，直接控制转间接控制；</li><li>扩大研究所自主权，实行所长制</li><li>鼓励研究、教育、设计机构与生产单位相互之间的联系合作</li><li>鼓励技术发展型科技机构进入企业</li><li>实行课题组长负责制</li></ul></li><li><p><strong>在人才制度方面</strong>：促使研究机构更加开发，加强科研机构同大学与企业之间人员的信息的交流与横向联合</p></li><li><p>在强调为国民经济服务的同时，继续<strong>重视基础研究</strong>。</p></li></ul></li><li><p>主要成绩：</p><ul><li>促进了科学技术与经济的结合：政策体系、项目合同制、技术市场</li><li>科研组织结构出现了新的生长点：高新技术产业开发区、工程研究中心、企业技术研发中心、博士后流动站</li><li>科技产出大增加：科研成果、论文、专利增加</li><li>科技资源配置有明显改善：R&amp;D投入、基础-应用-开发研究比例</li></ul></li><li><p>主要问题：</p><ul><li>各方面科技力量比较分散，自成体系</li><li>企业自主创新能力弱，创新意识差，远未成为技术创新的主体</li><li>科技评价制度、激励人才成长、鼓励创新创业的机制不完善</li></ul></li><li><p>未来：</p><ul><li><p>在创新活动全球化背景下：</p><ul><li>参加游戏活动</li><li>利用游戏规则</li><li>修改游戏规则</li><li>制定新的游戏规则</li></ul></li><li><ol><li></li></ol><p>加强自主创新</p><p>，</p><p>自主创新3种类型</p><p>：</p><ul><li>(1)<strong>加大基础研究投入，加强原始性创新</strong>，努力获得更多的科学发现和技术发明，从<strong>源头上</strong>占据主动地位</li><li>(2)<strong>促进各创新环节的密切合作，加强集成创新</strong>，使各种相关技术有机融合，形成具有市场竞争力的产业和产品</li><li>(3)<strong>引进国外先进技术后，重点放在引进消化吸收和再次创新上</strong></li></ul></li><li><ol start="2"><li></li></ol><p>鼓励企业成为技术创新主体</p><ul><li>发挥经济、科技政策的导向作用，使企业成为研究开发投入的主体。</li><li>改革科技计划支持方式，支持企业承担国家研究开发任务，使企业成为创新活动的主体。</li><li>完善技术转移机制，促进企业的技术集成与应用，使企业成为创新成果应用的主体。</li></ul></li><li><ol start="3"><li></li></ol><p>重建国家创新体系创新型国家</p><ul><li>统筹协调科技体制与经济体制、育体制的改革进程，重建国家创新体系。</li><li>把建设以企业为主体、产学研结合作为全面推进国家创新体系建设的突破口，坚持市场导向，打通创新产业链，盘活国家创新资源。</li><li>建设科学研究与高等数育有机结合的知识创新体系，培养创新人才。</li><li>提高全民族科学文化素质，营造有利于创新的社会环境。</li><li>最终形成以政府为主导、充分发挥市场配置资源的基础性作用、各类科技创新主体紧密联系和有效互动的国家创新体系。</li></ul></li></ul></li><li><p>中国的科技发展思路要有大的转变。</p><ul><li>在发展路径上，从<strong>跟踪模仿</strong>为主向加强<strong>自主创新</strong>转变。</li><li>在创新方式上，从注重<strong>单项技术</strong>的研究开发向加强以重大产品和新兴产业为中心的<strong>集成创新</strong>转变。</li><li>在创新体制上，从以<strong>科研院所</strong>改革为突破口向整体推进<strong>国家创新体系</strong>建设转变；</li><li>在发展部署上，从以<strong>研究开发为主</strong>向<strong>科技创新与科学普及并重</strong>转变</li><li>在国际合作上，从<strong>一般性科技交流</strong>向<strong>全方位，主动利用全球科技资源</strong>转变</li></ul></li><li><p>需要说明的几点：</p><ul><li>国家创新体系是一个全国一盘棋的系统工程。</li><li>科学技术是第一生产力，但中间还需要跨越许多创新环节</li><li>科技政策是其中的一个政策工具，还需要金融政策、财税政策、知识产权保护政策等等手段。</li></ul></li><li><p>反思：</p><ul><li>在国家创新体系中企业一家独大是中国科技创新的出路吗？没有跳出长期以来中国科技体制改革“体”为“用”服务模式</li></ul></li><li><p>保障美国21世纪繁荣的4大科技政策《迎接风暴：振兴美国经济、创造就业机会、建设美好未来》</p><ul><li>1.提升基础科学教育水平</li><li>2.加大基础科学研究投入</li><li>3.培养科学创新人才</li><li>4.改善创新投资环境</li></ul></li></ul></blockquote><h2 id="4-单元总结"><a href="#4-单元总结" class="headerlink" title="4. 单元总结"></a><a href="https://github.com/JackHCC/PKU-Lessons-Summary/edit/master/Introduction_to_Dialectics_of_Nature/README.md#4-%E5%8D%95%E5%85%83%E6%80%BB%E7%BB%93">4. 单元总结</a></h2><ul><li><strong>科技政策分为两个部分，三个核心问题</strong></li><li><strong>《科学：没有止境的前沿》主要观点</strong></li><li><strong>1963，OECD发表《科学和政府的政策》提出科学活动的三种类型：基础研究，应用研究和试验发展</strong></li><li><strong>“市场失效”、“系统失效”</strong></li><li><strong>三螺旋模型：政府、学术界与产业界</strong></li><li><strong>1956四大紧急措施</strong></li><li><strong>自主创新三种类型</strong></li><li><strong>《国家中长期科学和技术发展规划纲要(2006-2020)》指导方针：自主创新，重点跨越，支撑发展，引领未来</strong></li><li><strong>中医药4个特点</strong>：<strong>简、便、廉、验</strong></li></ul><h1 id="科学家角色、行为规范与不端行为"><a href="#科学家角色、行为规范与不端行为" class="headerlink" title="科学家角色、行为规范与不端行为"></a><a href="https://github.com/JackHCC/PKU-Lessons-Summary/edit/master/Introduction_to_Dialectics_of_Nature/README.md#%E7%A7%91%E5%AD%A6%E5%AE%B6%E8%A7%92%E8%89%B2%E8%A1%8C%E4%B8%BA%E8%A7%84%E8%8C%83%E4%B8%8E%E4%B8%8D%E7%AB%AF%E8%A1%8C%E4%B8%BA">科学家角色、行为规范与不端行为</a></h1><h2 id="1-前言"><a href="#1-前言" class="headerlink" title="1. 前言"></a><a href="https://github.com/JackHCC/PKU-Lessons-Summary/edit/master/Introduction_to_Dialectics_of_Nature/README.md#1-%E5%89%8D%E8%A8%80">1. 前言</a></h2><ul><li>角色定义：与一定的社会位置和地位相联系的行为。<ul><li>社会角色是一个与社会体制、社会规范和价值体系相联系的概念。</li><li>美国社会心理学家米德首先将角色一词引入社会学：个人在社会中总要扮演一定的角色，表示对具有一定社会地位的人所期望的行为。个人是各种角色的总和。</li></ul></li><li>角色差距：一个人不能顺利地扮演自己的角色时，产生角色差距。</li><li>角色丛：一个人需要在社会生活中扮演多种角色（不同方面扮演不同角色），构成角色丛。</li><li>角色冲突：一个人不能同时扮演好几种角色时就会产生角色冲突，就需要进行调整。</li><li>科学家角色：“科学家要有科学家的行为。”<ul><li>科学家是一个独立的社会群体，其行为已经明显有别于其他一些社会群体的行为特征。</li><li>科学家角色的出现和形成与科学的体制化进程是密切相关的。</li></ul></li></ul><h2 id="2-科学家角色形成"><a href="#2-科学家角色形成" class="headerlink" title="2. 科学家角色形成"></a><a href="https://github.com/JackHCC/PKU-Lessons-Summary/edit/master/Introduction_to_Dialectics_of_Nature/README.md#2-%E7%A7%91%E5%AD%A6%E5%AE%B6%E8%A7%92%E8%89%B2%E5%BD%A2%E6%88%90">2. 科学家角色形成</a></h2><ul><li>古代社会<ul><li>从事相关科学研究的人有哲学家，对自然（科学）发生兴趣–自然哲学家，如毕达哥拉斯、泰勒斯。</li><li>神职人员，观察天象等</li><li>技术人员，如工匠、医生、工程师、建筑师、占星术士、炼金术士等。阿基米德、希波克拉底。</li><li>只有做出科学贡献的不同的人物，没有具有独立身份的科学家</li><li>没有专门化的科学家角色，没有把科学本身当作目的来对待</li><li>科学活动是在没有固定的社会角色以及特定的社会圈子中进行的。</li><li>在古代社会，即使在某个时期科学活动可能比较繁荣，但不可能持久。所以，古代科学往往出现中断、停滞、倒退等种种现象。</li></ul></li><li>中世纪晚期<ul><li>克拉伯僧侣学院，埃及埃兹哈尔寺院(公元9世纪)</li><li>欧洲大学，波伦那大学(12AD)、巴黎大学、牛津大学、剑桥大学</li><li>大学科学教育开始出现，开始有部分教师通过专门讲授自然科学课程而得到工资，但处于外围和边缘的地位。</li></ul></li><li>近代早期英国<ul><li>17世纪科学逐渐成为上层精英人士的兴趣爱好</li><li>在英国上层精英人物中逐步出现了以科学为中心的定期聚会和组织-1660年皇家学会诞生。</li></ul></li><li>近代早期法国<ul><li>法国科学院：科学家的研究工作得到政府的资助。</li><li>科学家获得科学研究的固定职业（法国科学院院士、年薪、助手、管理职能）</li><li>拿破仑对科学和教育采取“强制饲养”的政策，使法国职业科学家、工程师大量增加——”百余年中头一个有科学教育的、也是唯一重要的统治者“（贝尔纳）</li><li><strong>专业化、职业化的科学家开始出现。</strong></li></ul></li><li>大学科学教师出现<ul><li>19世纪，德国研究型大学形成</li><li>大学科学教师：教学、研究</li><li>教授领导实验室（教学实验室）</li><li>美国研究生培养体制化（研究生院），研究生导师</li><li>科学研究与大学教学的结合对于科学家社会角色的形成具有重要意义：职位稳定化（课题不稳定）、研究梯队化（金字塔≠橄榄模式）、人才培养持续化。</li></ul></li><li>科学家进入企业和政府<ul><li>科学家兼企业家</li><li>工业实验室提供大批科学研究职位，成为现代科学力量的重要组成部分（美国，40%)，科学-产业共同体</li><li>国家实验室和政府部门科学家队伍：研究、管理、决策咨询(美国20%)，科学-政治-军事共同体，官-产-学一体化</li></ul></li><li>普赖斯统计：<ul><li>1903-1960年间，美国科学家人数增长了24倍，科学家在总人口中的密度增加了8倍</li><li>17世纪中叶，全世界科学家屈指可数(皇家学会100，法国科学院15)，20世纪中叶，仅美国有科学技术学位的人就数以百万计</li><li>90%的科学家生活在当代</li></ul></li><li>小结<ul><li>近代科学活动以及科学家的社会角色是经过几个世纪的发展才出现在西欧若干国家。</li><li>现代科学知识的积累、发展、进步（根本原因在于科学家角色的形成，以及在此角色下开展的科学活动。</li><li>近代科学家在世界其他地方的出现是西方科学传播的结果，不是本地传统知识分子的直接演变</li><li>这也可以解释古代科学的停滞、倒退、甚至多次毁灭，其原因在于：<ul><li>古代传统社会的科学活动由其他的、非科学家角色完成</li><li>取得这些科学成果的人并没有形成独立的科学家社会角色以及相应的社会圈子</li><li>科学研究是在没有固定的社会角色和社会体制下进行的，不可能持久、稳定、连续的发展。</li></ul></li></ul></li></ul><h2 id="3-科学家的行为规范"><a href="#3-科学家的行为规范" class="headerlink" title="3. 科学家的行为规范"></a><a href="https://github.com/JackHCC/PKU-Lessons-Summary/edit/master/Introduction_to_Dialectics_of_Nature/README.md#3-%E7%A7%91%E5%AD%A6%E5%AE%B6%E7%9A%84%E8%A1%8C%E4%B8%BA%E8%A7%84%E8%8C%83">3. 科学家的行为规范</a></h2><ul><li>行为规范：在同一领域从事相近或者相同活动的人的行为准则。<ul><li>科学家的行为规范：</li><li>(1)认识规范（技术规范）<ul><li>A一般科学方法论：逻辑一致、实践检验</li><li>B各学科的特有范式</li></ul></li><li>(2)社会规范</li></ul></li><li>默顿《17世纪英国的科学技术与社会》：<ul><li>科学的精神气质( ETHOS)的出现</li><li>新教清教主义对培育科学精神有重要意义<ul><li>(1)理性主义：宗教真理可以通过理性手段达到，而不是靠神启</li><li>(2)经验主义：通过观察和系统研究自然来认识、证明上帝的业绩。</li><li>(3)禁俗主义：勤奋工作，不计结果，不主张享乐</li><li>(4)功利主义：求知和工作对人类有利，减轻人类生活的负担</li></ul></li></ul></li><li>科学家精神气质<ul><li>科学包括：(1)<strong>知识、方法</strong>：(2)<strong>支配科学活动的文化价值</strong>。</li><li>科学家活动的共同精神气质和伦理规范，即规则、指令、惯例、信念、价值这些具有感情色彩的东西形成的综合体。</li><li>这种精神气质将从事科学活动的人联系在一起，进而合法化为体制的价值，内化为科学家的科学良心，形成科学家的行为规范。</li></ul></li><li>默顿提出<strong>四条科学的基本规范</strong>：<ul><li><strong>普遍主文</strong></li><li><strong>公有主义</strong></li><li><strong>无私利性</strong></li><li><strong>有条理的怀疑主义</strong></li></ul></li><li>普遍主义( UNIVERSALISM)<ul><li>科学的标准依据科学自身的固有价值，是普遍一致的，与国家、种族、阶级、宗教、年龄等无关。</li><li>非个人特性：科学与个人品质无关（高兰克林避雷针）</li><li>开放性，自由职业：学习、研究科学的机会均等</li><li>国际主义，科学没有国界</li><li>实践要求民主的社会环境。</li></ul></li><li>公有主义( COMMUNISN)<ul><li>所有科学重大发现都是社会合作产物，其成果归属整个科学共同体</li><li>科学家对其发现的定律、定理等只享有优先权，没有占有权、支配权</li><li>科学成果是公共财高，应当公开，<strong>获得承认</strong>是硬通货</li><li>与专利冲突</li></ul></li><li>无私利性( DISINTERESTEDNESS)<ul><li>从事科学活动的人不应该以科学谋取私利，应该为科学而科学。</li><li>科学家不能因个人原因接受或拒绝某种科学思想或观点。</li><li>从事科学源自内在的科学兴趣</li><li>纯洁性也使科学处于严格的监督之下：“每一项科学技术都为科学家的正直诚实提供证据”，公众调查-科学家排名靠前( lawyer)</li><li>比较理想主义</li></ul></li><li>有条理的怀疑主义（ORGANIZED SKEPTICISM）<ul><li>科学对自己的成果、理论呈现出批判的态度</li><li>科学不承认神圣的、不能批判的东西。</li><li>崇尚合理的怀疑和批判精神，并推而广之</li><li>与宗教、意识形态多有冲突</li><li>托马斯-阿奎那：不是因为理解才信仰，而是因为信仰才能理解</li></ul></li><li>补充和修正：<ul><li>默顿：创新性，谦应。</li><li>巴伯：理性精神，感情中立</li><li>斯托勒：客观性，概括性</li><li>齐曼：怀疑精神一创新精神</li><li>一同一个范式的补充和修正：基本规范</li></ul></li><li>质疑：<ul><li>专利</li><li>保密制度</li><li>市场竞争</li></ul></li><li>否定：<ul><li>无私利性原则是一个神话。</li><li>每一条规范都存在着一个对立的规范</li><li>科学规范并不是现实地存在着，当违反它们时才表现出来。</li><li>科学规范并没有证据表明已经体制化了。</li></ul></li><li>主流观点<ul><li>默顿的科学规范仍是最基本的</li><li>规范原则主要局限在科学的纯学术研究</li><li>是学院科学的理想模式</li><li>对科学家有潜移默化的作用</li><li>一定程度上维护了科学的自主性</li></ul></li><li>小结<ul><li>学院科学：由科学家在大学和实验室中发展起来的纯粹科学，直接目的是<strong>发展知识</strong>，为科学而科学，不关心科学知识的应用。</li><li>爱因斯坦：科学庙堂里的三种人：(1)科学能带来快乐，智力上的快感；(2)追求科学的功利目的；(3)修身养性，领悟世界：爱因斯坦，普朗克一以激情来工作（ You need talent to be good，and passion to be great)</li><li>但是，学院科学很难被公众理解，科学得到社会支持的重要途径是科学成果的实际应用。<ul><li>公众根据科学的技术应用来评价科学、理解科学(身体的科学、身边的科学)。</li><li>在现代社会，经济、军事、政治是决定科学应用方向的强大力量，进而影响科学的发展。</li><li>没有功利应用，学院科学也难以为继——科学已经变得“太大、太昂贵”了。</li></ul></li><li>后学院科学（齐曼）：<ul><li>科学组织、管理、实施方式的变革。</li><li>科学高度职业化(高度综合、高度分化)</li><li>科学是科学家的谋生手段</li><li>“与实践之网紧密联系在一起”</li><li>“根据市场规则来组织”</li></ul></li><li>后学院科学的六大特征：<ul><li>(1)集体化，大课题，大设备，集体协作</li><li>(2)极限化，经费、人员、资源限制</li><li>(3)效用化，商用价值被突出</li><li>(4)政策化，政府操纵，控制，科学政策成为政府政策的重要部分</li><li>(5)产业化，与产业一体化</li><li>(6)官僚化，层层申批，程序化，官样文章化</li></ul></li><li>保持必要的张力：<ul><li>科学的自主性是科学发展的内在、原始动力</li><li>科学不能也无法回避社会的发展需求</li><li>科学的基本规范仍需要尊重和维护（普遍主义、公有主义、无私利性、有条理地怀疑、创新性等）</li><li>在需求与自主之间保持必要的张力</li></ul></li></ul></li></ul><h2 id="4-为什么要制定科研规范"><a href="#4-为什么要制定科研规范" class="headerlink" title="4. 为什么要制定科研规范"></a><a href="https://github.com/JackHCC/PKU-Lessons-Summary/edit/master/Introduction_to_Dialectics_of_Nature/README.md#4-%E4%B8%BA%E4%BB%80%E4%B9%88%E8%A6%81%E5%88%B6%E5%AE%9A%E7%A7%91%E7%A0%94%E8%A7%84%E8%8C%83">4. 为什么要制定科研规范</a></h2><ul><li>二战以前<ul><li>社会对科研资助非常少，对科研的期望值也比较低。</li><li>科研人员基本上独立处理自己的事务。</li><li>科学的目标主要是追求知识，其对新知识的认同和检验有相对比较严谨的程序，如重复，可检验性</li><li>科学家诚信度高，公众认可。</li></ul></li><li>二战后：<ul><li>公共财政开始大规模支持科学研究，政府、社会对科研成果以及科研方式越来越感兴趣。</li><li>逐渐地开始扩展到科研某些行为层面：<ul><li>先是对实验中的人和动物的关注，</li><li>再是对科研资金运用的关注，</li><li>再是对科研不端行为的关注，</li><li>关注科研的风险、信任问题-PX、GM</li></ul></li><li>客观上：<ul><li>科研探索有其局限性，也会犯错误，如材料、数据、仪器、环境、人的观测能力。</li><li>科研的前沿，信号与噪音分不清，测不准原理。</li></ul></li></ul></li><li>科学技术与社会：<ul><li>有利益交织与冲突：求知-第一生产力</li><li>科研成本急剧上升，2-4%GDP，是政府的重要财政投入，科学成为庞大的社会事业</li><li>科学研究的不确定性和潜在风险増加：疯牛病、转基因作物、核电站。</li><li>科学界不断出现严重的不端行为，黄禹锡，”越来越多的科学家，越来越多的骗子”</li><li>公众民主、主体意识上升，要求科研增加透明度，利益相关者</li><li>科学界需要建立于公众的新关系：<strong>科普，公众理解科学，科学对话</strong></li><li>科学不仅仅是科学界的事情，政府管理科学事业的需要</li><li>阿西莫夫：科学太重要了，不能只让科学家来作主。</li></ul></li></ul><h2 id="5-科研活动中的错误"><a href="#5-科研活动中的错误" class="headerlink" title="5. 科研活动中的错误"></a><a href="https://github.com/JackHCC/PKU-Lessons-Summary/edit/master/Introduction_to_Dialectics_of_Nature/README.md#5-%E7%A7%91%E7%A0%94%E6%B4%BB%E5%8A%A8%E4%B8%AD%E7%9A%84%E9%94%99%E8%AF%AF">5. 科研活动中的错误</a></h2><ul><li>三种类型<ul><li><strong>非道德错误</strong></li><li><strong>疏忽造成的错误</strong></li><li><strong>不端行为</strong></li></ul></li><li>非道德错误<ul><li>数据的可靠性、方法的可错性、实验的不可控性、价值观的影响等</li><li>默顿：自我实现的预言</li><li>美国动物实验心理学家的动物</li><li>德国动物实验心理学家的动物</li></ul></li><li>疏忽造成的错误<ul><li>非故意</li><li>草率，急于求成，</li><li>漫不经心，粗心大意</li><li>责任心问题，缺乏严谨的科研态度和耐心<ul><li>毛选校对20遍。</li><li>研究生论文3/10000:</li><li>原子弹数据1/200000</li><li>需要在第一时间更正错误，同样危害科学家信誉。</li></ul></li></ul></li><li><strong>不端行为(FFP)</strong><ul><li><strong>伪造</strong>( FABRICATION)：拼数据或结果，并记录和报告它们</li><li><strong>篡改</strong>( FALSIFICATION)：改动科研材料、设备或过程，改变和省略数据或结果，使研究不能在科研记录中准确表现</li><li><strong>剽窃</strong>( PLAGIARISM)：在未给予适当名誉的情况下，盗用别人的思想、方法、结果表述。</li></ul></li></ul><h2 id="6-利益冲突"><a href="#6-利益冲突" class="headerlink" title="6. 利益冲突"></a><a href="https://github.com/JackHCC/PKU-Lessons-Summary/edit/master/Introduction_to_Dialectics_of_Nature/README.md#6-%E5%88%A9%E7%9B%8A%E5%86%B2%E7%AA%81">6. 利益冲突</a></h2><ul><li><strong>经济利益冲突</strong>：个人利益与经济收入与科学研究之间的矛盾。</li><li><strong>职责冲突</strong><ul><li>时间上的冲突，工作时间，挣外快时间一大科学家“不在会场上，就在去往会场的路上”</li><li>资源使用冲突，公共设备与私人研究</li><li>师生冲突，培养还是打工？——“院士都是由学生培养的”</li><li>从属关系，在政府、大学、科研机构的与公司之间任职</li></ul></li><li><strong>个人冲突</strong>：在评议、申报、选拔过程中<ul><li>个人关系亲密一利益共同体，互为评委</li><li>个人关系紧张一互相压制</li><li>存在个人科研竞争关系一山头主义</li></ul></li></ul><h2 id="7-合作和荣誉分配"><a href="#7-合作和荣誉分配" class="headerlink" title="7. 合作和荣誉分配"></a><a href="https://github.com/JackHCC/PKU-Lessons-Summary/edit/master/Introduction_to_Dialectics_of_Nature/README.md#7-%E5%90%88%E4%BD%9C%E5%92%8C%E8%8D%A3%E8%AA%89%E5%88%86%E9%85%8D">7. 合作和荣誉分配</a></h2><ul><li>科研合作：<ul><li>意向阶段：同心同德</li><li>申请阶段：同舟共济</li><li>研究进行时：同甘共苦</li><li>研究结果出现和使用：同床异梦</li><li>研究结果利益分配：同室操戈</li></ul></li><li><strong>荣誉分配</strong>三种方式：<ul><li>(1)<strong>作者列表</strong></li><li>(2)<strong>致谢</strong></li><li>(3)<strong>参考文献和引文列表</strong></li></ul></li><li>荣誉分配：<ul><li>论文作者是在研究的概念构思、设计规划或数据收集和解释过程中作出过重要贡献的人，以及在论文草稿据写和发表物最终稿审定中发挥重要作用的。</li><li>署名原则三条同时满足：<ul><li><strong>(1)对概念的构思和设计、数据获得、数据分析和解释等作出了实质性贡献</strong></li><li><strong>(2)起草或修订过论文中的重要知识内容</strong></li><li><strong>(3)审定待发表的最终稿。</strong></li></ul></li><li>单单是争取到科研资助、收集了数据、对研究小组进行了一般监督，不具备署名权</li><li>在论文设计、撰写过程中起作用较小的人可以放在文章后面致谢里，不能作为作者署名。</li></ul></li><li><strong>作者署名的排名先后，即表明了荣誉也表明需要承担相应的责任</strong><ul><li>案例：夏腾与黄禹锡</li></ul></li><li>应当避免的行为：<ul><li><strong>荣誉署名</strong>。如项目主管、研究资助者、著名学者、导师等。</li><li><strong>“腊肠式”发表</strong>。将重要研究分成若干篇论文，数量影响质量。SCI</li><li><strong>重复发表</strong>。不告知首次发表的情况下重复同一内容的行为。“自我抄装”</li><li><strong>不成熟的公开发表</strong>。在研究工作接受学术评审前不发布不成熟的公开报告，除非有紧急情况，如重大危害、早期预警等。</li></ul></li></ul><h2 id="8-科研中的不端行为防治"><a href="#8-科研中的不端行为防治" class="headerlink" title="8. 科研中的不端行为防治"></a><a href="https://github.com/JackHCC/PKU-Lessons-Summary/edit/master/Introduction_to_Dialectics_of_Nature/README.md#8-%E7%A7%91%E7%A0%94%E4%B8%AD%E7%9A%84%E4%B8%8D%E7%AB%AF%E8%A1%8C%E4%B8%BA%E9%98%B2%E6%B2%BB">8. 科研中的不端行为防治</a></h2><ul><li>同行评议：由具有相似学术水平、知识和经验的同事对科研工作进行评估。<ul><li>科学家的4种角色：<strong>A研究，B教学，C行政管理，D鉴定和评审（守门员）</strong></li><li>是科学研究和科研职业自我约束的一个基本要素</li><li>资助评审—资助哪些项目</li><li>论文评审—哪些研究发现可以发表</li><li>人员评审—雇佣和提升哪些科研人员</li><li>文献评审（专家证词）—哪些研究是可靠的</li></ul></li><li>一般没有报酬，荣誉性质。</li><li>匿名评审。</li><li><strong>双盲( DOUBLE- BLIND)原则</strong>，评审方与被评审方互相不知道。<ul><li>陈平原：同行评议国内无法保密。</li><li>透明原则，公开评审者</li></ul></li></ul><h2 id="9-单元总结"><a href="#9-单元总结" class="headerlink" title="9. 单元总结"></a><a href="https://github.com/JackHCC/PKU-Lessons-Summary/edit/master/Introduction_to_Dialectics_of_Nature/README.md#9-%E5%8D%95%E5%85%83%E6%80%BB%E7%BB%93">9. 单元总结</a></h2><ul><li><strong>科学家职业化：法国</strong></li><li><strong>科学共同体结构：金字塔模式</strong></li><li><strong>科研基本规范：默顿4条</strong></li><li><strong>不端行为：FFP，伪造，篡改，剽窃</strong></li><li><strong>荣誉分配：三种方式：作者列表，致谢，参考文献与引文列表</strong></li><li><strong>同行评议双盲原则</strong></li><li><strong>科学家的4种角色</strong></li></ul><h1 id="科技的社会应用与技术预见"><a href="#科技的社会应用与技术预见" class="headerlink" title="科技的社会应用与技术预见"></a><a href="https://github.com/JackHCC/PKU-Lessons-Summary/edit/master/Introduction_to_Dialectics_of_Nature/README.md#%E7%A7%91%E6%8A%80%E7%9A%84%E7%A4%BE%E4%BC%9A%E5%BA%94%E7%94%A8%E4%B8%8E%E6%8A%80%E6%9C%AF%E9%A2%84%E8%A7%81">科技的社会应用与技术预见</a></h1><h2 id="1-科学技术的社会应用"><a href="#1-科学技术的社会应用" class="headerlink" title="1. 科学技术的社会应用"></a><a href="https://github.com/JackHCC/PKU-Lessons-Summary/edit/master/Introduction_to_Dialectics_of_Nature/README.md#1-%E7%A7%91%E5%AD%A6%E6%8A%80%E6%9C%AF%E7%9A%84%E7%A4%BE%E4%BC%9A%E5%BA%94%E7%94%A8">1. 科学技术的社会应用</a></h2><h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a><a href="https://github.com/JackHCC/PKU-Lessons-Summary/edit/master/Introduction_to_Dialectics_of_Nature/README.md#%E5%89%8D%E8%A8%80">前言</a></h3><ul><li>科学技术的社会应用：<ul><li>第一次工业革命至今250年了，世界发生了翻天覆地的变化：</li><li>马克思：蒸汽机诞生以来的100年所创造的财富比过去3000年创造的财富总和还要多，科学技术是最高意义上的革命力量</li><li>科学技术是第一生产力，80%的贡献来自于科学技术的进步</li><li>社会科学技术化，生产、生活、环境、文化</li><li>但工业化至今250年，达到高生活水平的世界人口只占总人口的1/3（发达国家），大部分(2/3)仍生活在贫穷国家一发展中国家。</li><li>发展中国家对发达国家科学技术的兴趣和需求非常强烈！希望尽快引进（科学技术是非本土的资源，需要大量、持续地进行移植）</li><li>希望利用科学技术解决贫穷问题、营养不良问题、健康卫生问题、生产效益低下问题，以及其它社会诸多问题</li></ul></li><li>一个预设：科学技术因素在发达国家的工业化进程中起到了至关重要的作用。那么，科学技术因素在发展中国家向工业化转型的过程中也将起到至关重要的作用</li><li>对“发展”的认识？<ul><li>等于经济增长</li><li>生存发展权是第一位的</li><li>经济发展了，就有了解决其他问题的资本</li><li>基本无视科技发展、工业化过程带来的些负面后果：环境污染、气候变暖、资源匮乏、能源危机、物种灭绝、消费主义猖獗、城市化问题</li></ul></li></ul><h3 id="对科技应用的乐观态度"><a href="#对科技应用的乐观态度" class="headerlink" title="对科技应用的乐观态度"></a><a href="https://github.com/JackHCC/PKU-Lessons-Summary/edit/master/Introduction_to_Dialectics_of_Nature/README.md#%E5%AF%B9%E7%A7%91%E6%8A%80%E5%BA%94%E7%94%A8%E7%9A%84%E4%B9%90%E8%A7%82%E6%80%81%E5%BA%A6">对科技应用的乐观态度</a></h3><ul><li><p>科学技术促进发展</p><ul><li>发展中国家在刚独立时基本上不具备自主创新的能力，只能从发达国家那里寻求技术来源</li><li>二战后，许多新独立国家走上了集中资源发展大型工业企业的道路，如中国、印度，其工业化进程大大快于发达国家曾经的过程</li><li>乐观主义情绪：发展中国家的工业化将比早先的工业化国家如英国、法国、德国的发展步伐更快，社会成本也将会更低</li></ul></li><li><p>有利条件(1)：</p><p>后发优势</p><ul><li>发展中国家不必凡事从头做起，没有必要去重新发明灯泡、发电机、汽车、计算机等</li><li>现存技术的R&amp;D投资成本已经得到了补偿，收益远远大于成本，今天获得这些技术的成本已经大幅度下降了</li><li>发展中国家可以轻易地获得这些方面的技术资源</li></ul></li><li><p>有利条件(2)：</p><p>选择优势</p><ul><li>目前已经形成了竞争激烈的国际技术市场。</li><li>发展中国家可以从琳琅满目的充满技术、产品和服务的“国际技术超市”中选择自己需要的东西，甚至成为“砍价”的主动方</li><li>中国“高速铁路”项目，选择性价比高的日本、德国、法国的技术，轻松打市场牌(波音-空客)</li></ul></li><li><p>有利条件(3)：</p><p>国际援助</p><ul><li>发展中国家可以从发达国家那里获得由政府、民间组织设立的支援贫穷国家经济、科技发展的援助项目，得到直接的帮助。</li><li>联合国1963年成立“运用科学技术促进发展咨询委员会”(ACAST)，认为运用科学技术促进欠发达国家的发展，是联合国义不容辞的责任。</li></ul></li><li><p>但是，联合国“运用科学技术促进发展咨询委员会”( ACAST，1970s)调查报告显示，发展中国家R&amp;D投入只占全世界R&amp;D经费投入的2%，到了微不足道的地步</p></li></ul><h3 id="科技应用实践中出现的问题"><a href="#科技应用实践中出现的问题" class="headerlink" title="科技应用实践中出现的问题"></a><a href="https://github.com/JackHCC/PKU-Lessons-Summary/edit/master/Introduction_to_Dialectics_of_Nature/README.md#%E7%A7%91%E6%8A%80%E5%BA%94%E7%94%A8%E5%AE%9E%E8%B7%B5%E4%B8%AD%E5%87%BA%E7%8E%B0%E7%9A%84%E9%97%AE%E9%A2%98">科技应用实践中出现的问题</a></h3><ul><li>相关分析(1)：教育与科研导向问题<ul><li>发展中国家的科学家，尤其是优秀科学家往往接受的是西方传统的科学、科研的教育和培养，衡量科研成果的主要指标是是否作出了高水平的基础研究，发表科研论文——SCI</li><li>科学精英与发展中国家的经济、社会、文化背景相脱离，甚至毫无关系，本地的科学共同体被边缘化、被异化</li><li>斯里兰卡：教育西化、科研西化、精英西化</li></ul></li><li>相关分析(2)：科技与本地需求相脱节<ul><li>本地的需求和问题被忽视，引进的先进的科学技术往往是西方的成熟技术，变成“交钥匙工程”，无法促进科技进步，其发展与本地的需求关系不大</li><li>发展中国家的经济结构也并不鼓励高水平的科研活动，如农业、矿业不是技术密集型产业农林牧业常常靠的不是持续创新，反而对地方性知识依赖较多</li><li>发展中国家人才流失，海龟变海带、海怪，最后技术移民，变成反向的向发达国家的人才援助</li></ul></li><li>相关分析(3)：引进技术不便宜<ul><li>进口设备、工艺、原料、技术等，其专利被发达国家跨国公司所垄断，满天要价的情况严重</li><li>跨国公司将专利技术转移到发展中国家的子公司时，经常蓄意把价格定的过高，有时甚至高出几十倍，形成有组织的“转移定价”。导致西方技术的隐性成本很高。</li><li>中国的计算机技术引进，卫星技术引进</li></ul></li><li>相关分析(4)：产生新的问题<ul><li>发展中国家引进的技术往往是资本密集型、技术密集型的，这些技术并没有创造出更多的就业机会，而且对传统农业工业已有的工作岗位造成严重破坏。</li><li>对西方技术的依赖，需要付出高昂的代价，发展中国家的小规模经营个体的经济能力承受不起创新的成本。</li></ul></li><li>相关分析(5)：案例<ul><li>“绿色革命”带来粮食大丰收的同时，造成新的贫困问题，菲律宾、印度</li><li>增产的途径是实施系统的、太规模的种植改良计划，需要不断使用化肥以及人工灌溉</li><li>最终受益的是大型农场主</li></ul></li></ul><h3 id="若干解决策略与思路分析"><a href="#若干解决策略与思路分析" class="headerlink" title="若干解决策略与思路分析"></a><a href="https://github.com/JackHCC/PKU-Lessons-Summary/edit/master/Introduction_to_Dialectics_of_Nature/README.md#%E8%8B%A5%E5%B9%B2%E8%A7%A3%E5%86%B3%E7%AD%96%E7%95%A5%E4%B8%8E%E6%80%9D%E8%B7%AF%E5%88%86%E6%9E%90">若干解决策略与思路分析</a></h3><ul><li>中间技术：<ul><li>一方面传统本土技术效率低下，难以脱贫致富，一方面发达国家的技术过于先进和昂贵，生产者负担不起，引进后不能创造更多就业机会</li><li>需要介于西方技术和本土技术之间的中间技术，既能创造就业机会，也能提高经济收入</li><li>砖瓦厂：小规模、低成本、低价格</li><li>加纳、冈比亚、苏丹成功案例</li></ul></li><li>适用技术：<ul><li>不同于西方发展模式，结合本地需求和自身条件，适合自身发展的技术路线，能独立自主、保护本地生态平衡、对传统生活方式和价值观的影响和损害降到最小的限度</li><li>沼气技术：替代西方能源和肥料体系，成本低，简单适用，容易推广</li></ul></li><li>技术融合：<ul><li>把先进技术与传统技术、新技术和旧技术有机地调合起来，而不是让新技术取代旧技术，以满足穷人的不断增长的各种需要</li><li>摆脱对西方技术的依赖</li><li>提高本土技术能力和研发水平</li><li>产生本土的技术创新，甚至出口</li></ul></li><li>技术融合的方式：<ul><li>(1)新技术嫁接到旧技术上</li><li>(2)新技术应用于市场导向的、小规模的生产活动上，而不是让新技术取代旧技术</li><li>(3)新技术应用到公共物品和公共服务上，如公共卫生、农村电信等</li></ul></li><li>案例：<ul><li>古巴：运用先进技术解决社会经济生产中的实际问题，而不是从事生物技术的前沿进行基础研究，利用新技术改造制糖业，提高本土技术水平</li><li>印度：生物公司科研与世界同步，与本地发展严重脱节，大量人才外流</li></ul></li><li>讨论<ul><li>对“发展”重新认识：经济增长，环境代价，资源代价，生产模式的代价，消费模式的代价</li><li>可持续发展的理念：<ul><li><strong>(1)满足当代人的需要：代内公平</strong></li><li><strong>(2)不损害后代人的发展需要：代际公平</strong></li></ul></li><li>科技、经济全球化：<ul><li>日本人用中国人生产的筷子，吃泰国人生产的大米，穿印尼人生产的衣服，喝巴西的橘子汁，买哥伦比亚的鲜花，尝墨西哥的草莓</li><li>生产、消费、文化价值均一化，丧失多样性</li><li>美国的汉堡包全球消费：改变所在地的农业体系和饮食体系</li><li>成都之行，回锅肉</li></ul></li><li>适用技术的问题：<ul><li>印度沼气技术：富人更富，穷人失去原有资源</li><li>中国沼气技术：集体收益？</li></ul></li><li>科学技术不是万能的；不是独立自主发展的：受到社会的影响和塑造<ul><li>谁想发展某种技术？</li><li>谁能拥有和控制这种技术？</li><li>谁能从这种技术中获得收益？</li></ul></li></ul></li></ul><h2 id="2-技术预见背景"><a href="#2-技术预见背景" class="headerlink" title="2. 技术预见背景"></a><a href="https://github.com/JackHCC/PKU-Lessons-Summary/edit/master/Introduction_to_Dialectics_of_Nature/README.md#2-%E6%8A%80%E6%9C%AF%E9%A2%84%E8%A7%81%E8%83%8C%E6%99%AF">2. 技术预见背景</a></h2><ul><li>技术预测( Technology forecast)<ul><li>始于1930S-美国，美国军方通过对技术发展的过去进行推演来判断未来，为制定科技政策服务。</li><li>早期的技术预测多是探索性预测，即对已有技术发展轨迹的外推，而没有考虑未来可能的发展方向和突破</li><li>高潮：二战前后，上世纪50-60年代（航空航天、电子、通讯、计算机技术等新领域出现）</li><li>技术预见，Technology foresight</li><li>上世纪90年代出现又一次高潮</li></ul></li><li>日本，1970年日本运用德尔菲方法进行了一次大规模的“30年技术遇见”调查活动</li><li>美国技术预见的时间跨度为5-10年，每隔两年就公布次《国家关键技术报告》。1995年美国国家科学技术委员会发布第3本《国家关键技术报告》，公布了未来5-10年内重点发展的27类关键技术</li><li>德国技术预见的时间跨度为30年，每隔5年组织一次大规模预见活动。1998年的技术预见“ Delphi98”涉及12个领域，1070项技术</li><li>英国技术预见的时间跨度为20年，通常每5年组织一次大规模预见活动。1999年英国政府实施了第二次技术预见活动，参与预见活动的专家分为10个学科小组和3个主题小组及2个支撑小组</li><li>上世纪90年代以来技术预见日受关注，渐成朝多国家都相继开展了基于德尔菲调查的国家技术预见活动</li><li>一个主要原因是技术预见适应了当今时代社会、经济和科技发展的大趋势，提供了一种应对未来挑战的新的认识手段，创造了一种选择未来方向的新的识别机制</li><li>时至今日，技术预见已成为一些国家科技发展规划的重要基础，技术预见遴选出的关键技术及其领域成为政府科学技术发展规划的重要内容</li></ul><h2 id="3-什么是技术预见？"><a href="#3-什么是技术预见？" class="headerlink" title="3. 什么是技术预见？"></a><a href="https://github.com/JackHCC/PKU-Lessons-Summary/edit/master/Introduction_to_Dialectics_of_Nature/README.md#3-%E4%BB%80%E4%B9%88%E6%98%AF%E6%8A%80%E6%9C%AF%E9%A2%84%E8%A7%81">3. 什么是技术预见？</a></h2><ul><li><p>按照英国学者本・马丁( Ben R Martin)给出的一个较为公认的定义：</p><ul><li>“<strong>技术预见是对科学、技术、经济、环境和社会的远期未来进行有步骤的探索过程，其目的是选定可能产生最大经济与社会效益的战略研究领域和通用新技术</strong>”</li><li>可见，技术预见不仅关注未来科技的自身推动因素而且着眼于外部市场的需求拉动作用，也就是说预见既包括对科学技术自身潜在机会的选择也包括对经济发展、社会进步相关需求的识别、不仅关注未来技术对工业和经济的影响，也关注其可能产生的社会效益（包括对环境的影响）。不仅是面对未来，而且要主动地通过选择“塑造”未来</li></ul></li><li><p>技术干预是一项极其复杂繁琐的工作，主要方法有：</p><ul><li><strong>德尔菲法</strong></li><li><strong>情景分析法</strong></li><li><strong>相关树法</strong></li><li>其实际操作都需要耗费大量的时间、人力和经费。</li></ul></li><li><p>预见调查结果作为国家科技政策制定的基础数据，对于日本科技政策调整和相关领域的科技资源配置有着重要的影响</p></li><li><p><strong>情景分析法：设定未来发展的多种情景，分析各种可能的需求</strong></p></li><li><p><strong>相关树法：建立技术关联树，综合考虑相关环节和每一种结果</strong></p></li><li><p>德尔菲法( DELPHI)</p><p>：德尔菲（Delphi）—古希腊神话阿波罗神谕( ORACLE)的发布地点</p><ul><li><strong>通过问卷调查的方式，让专家对事先拟定的问题自由发表意见</strong></li><li><strong>统计汇总后反馈给咨询专家</strong></li><li><strong>专家再次回答同样的问题</strong></li><li><strong>再汇总一再反馈一可反复操作</strong></li><li><strong>问题答案得到一定程度的逐渐集中，从而获得比较科学性和权威性的判断</strong></li></ul></li><li><p>德尔菲法(DELPHI)特点：</p><ul><li>专家背对背答复咨询意见，可以<strong>充分自由地根据自己的判断和认识回答问题，提出意见</strong></li><li>调查结果以统计方式给出不同观点的评价，并反馈给专家，从而<strong>达到信息交流和意见凝聚的作用</strong></li><li><strong>集思广益，民主与集中相结合</strong>，政策决策的有效手段</li><li>德尔菲法是<strong>系统分析方法在意见和价值判断领域内的一种有效方法</strong>。它突破了传统的数量分析限制，为更合理地制订政策开阔思路</li></ul></li><li><p>技术预见过程一一材料技术领域（中科院“中国未来20年技术预见”项目）</p><ul><li>首先，由国内一流专家组成材料领域专家组</li><li>其次，将材料技术领域划分为若干子领域（高分子材料、金属材料、无机和陶瓷材料、功能材料、光电子材料、纳米材料）；</li><li>再次，由材料技术领域专家分别组成6个子领域专家组；</li><li>通过专家研讨会（领域层面-子领域层面一多次）</li><li>筛选出86项德尔菲调查课题；</li><li>大型德尔菲调查（两轮）等主要方法</li><li>对86项材料技术课题（两轮德尔菲调查数目数一致）进行了重要程度的排序</li></ul></li></ul><h2 id="4-材料技术预见"><a href="#4-材料技术预见" class="headerlink" title="4. 材料技术预见"></a><a href="https://github.com/JackHCC/PKU-Lessons-Summary/edit/master/Introduction_to_Dialectics_of_Nature/README.md#4-%E6%9D%90%E6%96%99%E6%8A%80%E6%9C%AF%E9%A2%84%E8%A7%81">4. 材料技术预见</a></h2><ul><li><strong>会聚技术</strong>是21世纪初提出的最新技术。它是指把<strong>纳米科学和技术、生物技术、信息技术、认知科学</strong>四个科学技术领域会聚在一起而组合起来的技术(简写为<strong>NBIC</strong>)<ul><li>美国国家科学基金会主持编写的《提升人类能力的会聚技术》报告中所说：“如果认知科学家能够想到它，纳米科学家就能够制造它，生物科学家就能够使用它，信息科学家就能够监视和控制它。</li><li>会聚技术给我们描绘了这样一个前景：人类将在纳米的物质层面上重新认识和改造世界以及人类本身</li></ul></li><li>德尔菲调查<ul><li>在材料技术预见的首轮德尔菲调查中，回收的210份专家问卷共反馈了230多条建议。根据这些建议，材料技术领域专家和部分子领域专家对总共86项材料技术中的近30条课题描述进行了修改和调整，其中合并了两项技术课题，增加了一项技术课题（因而前后两轮调查的课题总数没有变化）</li><li>在第二轮调查中，有效回复的187份问卷反馈，建议约有110多条</li><li>第二轮德尔菲调查，主要针对<ul><li>(1)对促进经济增长</li><li>(2)提高人们生活质量</li><li>(3)保障国家安全的重要程度</li><li>请专家进行判断，综合考虑上述3个因素，在此基础上得出材料技术领域最重要的10个技术课题。</li></ul></li></ul></li><li>技术课题预期实现时间</li></ul><p><a href="https://github.com/JackHCC/PKU-Lessons-Summary/blob/master/Images/Introduction_to_Dialectics_of_Nature/1.png"><img src="/2023/10/31/%E8%87%AA%E7%84%B6%E8%BE%A9%E8%AF%81%E6%B3%95%E7%AC%94%E8%AE%B0/1.png" class="" title="img"></a></p><ul><li>当前中国的研究开发水平</li></ul><p><a href="https://github.com/JackHCC/PKU-Lessons-Summary/blob/master/Images/Introduction_to_Dialectics_of_Nature/2.png"><img src="/2023/10/31/%E8%87%AA%E7%84%B6%E8%BE%A9%E8%AF%81%E6%B3%95%E7%AC%94%E8%AE%B0/2.png" class="" title="img"></a></p><ul><li>技术领先国家</li></ul><p><a href="https://github.com/JackHCC/PKU-Lessons-Summary/blob/master/Images/Introduction_to_Dialectics_of_Nature/3.png"><img src="/2023/10/31/%E8%87%AA%E7%84%B6%E8%BE%A9%E8%AF%81%E6%B3%95%E7%AC%94%E8%AE%B0/3.png" class="" title="img"></a></p><ul><li>关于技术发展的制约因素<ul><li>最大制约因素是“研发投入”(70%）</li><li>其次是“技术可能性”(54%)</li><li>再次是“人力资源”、“商业可行性”和“基础设施”，这3者入选率相近(25%左右)</li><li>“政策法规”入选率最低，不到9%。</li></ul></li></ul><p><a href="https://github.com/JackHCC/PKU-Lessons-Summary/blob/master/Images/Introduction_to_Dialectics_of_Nature/4.png"><img src="/2023/10/31/%E8%87%AA%E7%84%B6%E8%BE%A9%E8%AF%81%E6%B3%95%E7%AC%94%E8%AE%B0/4.png" class="" title="img"></a></p><ul><li>技术预见结论<ul><li>材料技术预见两轮德尔菲调查法综合结果排名表明：前10项技术课题有7项相同，且排名变化都在前15位，说明两轮调查结果集中度非常高</li><li>整体来看，材料技术各领域对社会发展重要性受到高度关注与普遍重视</li><li>与综合排名的前10项材料技术课题相比，“经济增长”单项排名的前10项技术课题中有8项是重合的，显示出各领域专家对材料技术在经济增长方面的重要性共识较多，也说明经济主战场的需求是我国材料技术发展的最主要动力源</li><li>就预期实现时间，表现比较乐观的预见态度</li><li>就中国当前研发水平来看，各个子领域研发水平普遍落后国际水平，个别优势项目希望突破</li><li>技术领先国家方面，我国上升空间很大</li><li>制约技术发展因素，首位因素是研发投入，其次是技术可能性，再其次是商业可能性等；基础研发投入不足</li></ul></li><li>技术预见讨论<ul><li>市场唯一不变的就是变化</li><li>武侠：要练神功，勇气、平静、智慧</li><li>最好的防御是进攻</li><li>最好的预见是主动改变- Shape Future</li><li>行到水穷处，坐看云起时</li><li>自然、随缘也是开放、包容，君子豹变</li></ul></li></ul><h2 id="5-单元总结-1"><a href="#5-单元总结-1" class="headerlink" title="5. 单元总结"></a><a href="https://github.com/JackHCC/PKU-Lessons-Summary/edit/master/Introduction_to_Dialectics_of_Nature/README.md#5-%E5%8D%95%E5%85%83%E6%80%BB%E7%BB%93-1">5. 单元总结</a></h2><ul><li><strong>可持续发展：代内公平、代际公平</strong></li><li><strong>什么是技术预见？</strong></li><li><strong>什么是德尔菲法？</strong></li><li><strong>会聚技术：NBIC</strong></li></ul><h1 id="练习题"><a href="#练习题" class="headerlink" title="练习题"></a>练习题</h1><ol><li>修改科学理论时，应当</li></ol><p> A 使其能够逃避检验。 B 使其在任何可能的情况下都能够被证实。</p><p> <strong>C 避免增加特设性假定</strong>。 D 亦 A 亦 B 亦 C 。</p><ol><li><p>关于科学家角色的意义 , 以下哪种说法<strong>不正确</strong> ?</p><p>A 科学家是一个独立的社会群体。 B 科学家角色的出现是有持续性的科学活动的标志。</p><p>C <strong>鲁班是中国科学家角色的雏形</strong>。 D 科学家角色的职业化使角色更成熟、稳定。</p></li><li><p>科学家角色的职业化最早出现在：</p><p>A 美国。 B 德国。 <strong>C 法国</strong>。 D 英国。</p></li><li><p>《科学家在社会中的角色》的作者是 :</p><p>A 默顿。 B （约瑟夫）<strong>本 · 戴维</strong>。 C 科尔。 D 贝尔纳。</p></li><li><p>“ 大科学时代 ” 的涵义是：</p><p>A 职业科学家人数日益增多。 B <strong>科学日益社会化 , 社会日益科学化。</strong></p><p>C 科学的研究规模日益扩大。 D 科学的研究对象日益复杂。</p></li><li><p>默顿提出的科学家的四条社会规范中不包括：</p><p>A 普遍主义。 B 公有主义。 <strong>C 自由主义。</strong> D 有条理的怀疑主义。</p></li><li><p>科学家的首要社会功能是：</p></li></ol><p> <strong>A 创造性的先导作用</strong>。 B 实用功能。 C 宣传功能。 C 政治功能。</p><ol><li>关于科学界中的内部分层 , 以下哪种说法<strong>不正确</strong> ?</li></ol><p> <strong>A 分层意味着科学家阶层在整个全社会中的职业声望存在悬殊。</strong></p><p> B 分层说明科学界内部存在不平等现象。</p><p> C 分层与科学界的马太效应有内在关系。</p><p> D 无论用什么指标衡量 , 分层模型都是呈金字塔型。</p><ol><li><p>金字塔模型 ( 科学界分层 ) 与鸭梨模型 ( 社会分层 ) 相比较 , 哪种说法<strong>不正确</strong> ?</p><p><strong>A 科学界分层的金字塔模型 , 也可以演变成鸭梨状模型。</strong></p><p>B 社会分层中的上层人士所占比例远大于科学界分层中的上层人士所占比例。</p><p>C 金字塔模型反映了科学研究的艰巨性和高度创造性。</p><p>D 根据金字塔模型从科学界中提前鉴别出未来的精英人士，是困难的。</p></li><li><p>科学界内部的互动之根本目的在于：</p><p>A 获取学术信息。 B 得到奖金。 <strong>C 获得承认。</strong> D 促进科学事业发展。</p></li><li><p>如何从根本上防范和控制科学界内部的越轨行为 ?</p><p>A 提高科学家的个人道德水准。 B 加强社会舆论监督。</p><p>C 将科学与法律密切配合。 <strong>D 建立、规范科学界内部的自我控制之机制。</strong></p></li><li><p>关于科学共同体 , 以下哪种说法<strong>不正确</strong> ?</p></li></ol><p> A 科学共同体的产生基础是科学的职业化、组织化、社会化。</p><p> B 科学共同体标志着科学活动的体制化。</p><p> C 科学共同体运行的动力机制是科学的奖励制度。</p><p> <strong>D 科学共同体的实质是科学家的行政组织，如中国科学院。</strong></p><ol><li><p>以下哪本是 T.S. 库恩的代表著作？</p><p><strong>A 《科学革命的结构》</strong> B 《猜想与反驳》 C 《反对方法》 D 《开放社会及其敌人》</p></li><li><p>以下哪种说法<strong>不正确</strong>？</p><p>A 科学知识在本质是共同体的产物。 <strong>B 科学家个体是推动科学发展的主体。</strong></p><p>C 科学共同体是科学评价和理论选择的客观准则的象征。</p><p>D 范式是特定科学共同体的信念和准则。</p></li><li><p>以下那种说法<strong>正确</strong>？</p><p>A 科学共同体运行的特有机制是：发现 à 评价 à 奖励。</p><p>B 科学共同体中不包括非组织化、非正式化的科学群体。</p><p>C 无形学院与科学学派是无法交叉的。</p><p><strong>D 不同层次的科学共同体的规范是不相包融的</strong></p></li><li><p>哥本哈根学派的领袖是：</p></li></ol><p> A 爱因斯坦。 <strong>B 尼尔斯 · 玻尔</strong>。 C 泡利。 D 海森伯。</p><ol><li><p>关于优先权之争 , 哪种说法<strong>不正确</strong> ?</p><p>A 科学家争夺优先权是科学体制的动力机制。</p><p><strong>B 优先权之争是人类天性在科学界中的反映。</strong></p><p>C 优先权之争是科学体制本身高度强调创造性带来的产物。</p><p>D 学术承认和荣誉是科学家从体制方面获得的最主要的报酬。</p></li><li><p>关于科学奖励系统，下列说法哪个<strong>不正确</strong>？</p><p>A 科学奖励在本质上既是对科学家所做贡献、又是对科学家能力的承认。</p><p>B 科学家对科学真理的追求和对承认的需求在本质上是一致的。</p><p><strong>C 科学家对承认的需求是越轨行为的直接原因。</strong></p><p>D 科学家相互交流、互换学术成果的目的在于获得承认。</p></li><li><p>是谁提出 “ 交换理论 ”?</p><p>A 默顿。 B 朱克曼。 C 克兰。 <strong>D 哈格斯特龙。</strong></p></li><li><p>哈格斯特龙把科学奖励划分为哪两种类型 ?</p></li></ol><p> A 体内承认与体外承认。 B 建制承认与社会承认。</p><p> C 同行承认与非同行承认。 <strong>D 建制承认与初步承认。</strong></p><ol><li><p>关于科尔兄弟所划分的职业岗位承认 , 哪种说法不正确 ?</p><p>A 实际上 , 在科学体制中，职业岗位承认比正式科学奖励更具有重要意义。</p><p>B 职业岗位承认是一种较为广泛的承认形式。</p><p>C 科学精英绝大多数在具有较高声望的职业岗位上工作。</p><p><strong>D</strong> <strong>职业岗位承认与正式的荣誉性承认是一一对应的。</strong></p></li><li><p>关于科学奖励的特点 , 哪种说法<strong>正确</strong> ?</p></li></ol><p> A 科学奖励的奖金额与其荣誉性成正比。</p><p> B 在科学奖励中 , 物质因素越来越起重要作用。</p><p> C 分层现象在科学奖励系统中不存在。</p><p> D <strong>诺贝尔奖金的任何一个特点都不足以单独说明它取得巨大声望和威信的原因。</strong></p><ol><li><p>关于科学奖励的层次性 , 哪种说法<strong>不正确</strong> ?</p><p>A 科学奖励的层次性由多种因素决定 , 其中奖励范围对奖励声望影响较大。</p><p>B 获奖者个人声望也可以提高奖励的声望。</p><p><strong>C 声望较低的科学奖励并没有实际意义。</strong></p><p>D 为保证科学体制正常运行 , 科学奖励系统应使各层次科学家都受到不同层次的激励。</p></li><li><p>关于科学奖励的优势积累功能 , 哪种说法<strong>不正确</strong> ?</p><p><strong>A 优势积累易使科学界加剧分层现象 , 造成贫富悬殊。</strong></p><p>B 优势积累在荣誉和成就之间起循环促进作用。</p><p>C 马太效应所引起奖励分配上的优势积累与科学奖励的宗旨是吻合的。</p><p>D 心理因素上的优势积累是符合奖励的普遍性原则的。</p></li><li><p>关于科学界内的竞争机制 , 哪种说法<strong>不正确</strong> ?</p><p>A 优先权至上的奖励原则使科学界中出现了竞争局面。</p><p><strong>B 竞争机制易造成垄断、重复乃至越轨行为，因此弊大于利。</strong></p><p>C 竞争机制目的在于鼓励创造性。</p><p>D 竞争机制能导致科学界中出现合理的人力分布。</p></li><li><p>关于科学界的内外控制 , 哪种说法<strong>不正确</strong> ?</p><p><strong>A 科学道德无法对科学进行内部控制。</strong> B 外部控制比内部控制有更大的强制性。</p><p>C 任何外部控制 , 必须与内部控制相配合，才能有效。</p><p>D 科学奖励系统是内部控制的主要方式，也是外部控制的重要手段。</p></li><li><p>统计表明，只写过 1 篇科学论文的作者数大约占科学论文作者总数的</p><p>A 80% <strong>B 60%</strong> C 40% D 20%</p></li><li><p>根据洛特卡定律，发表 3 篇论文的科学家是发表 1 篇论文的科学家人数的</p><p>A 1/3 B 1/4 <strong>C 1/9</strong> D 1/16</p></li><li><p>最早发现科学文献按指数增长，大约每 15 年增加 1 倍现象的是</p><p>A ．恩格斯 B ．萨顿 C ．默顿 <strong>D ．普赖斯</strong></p></li><li><p>SCI 、 SSCI 和 A ＆ HCI 目前已经成为科技情报和学术研究中最重要的检索工具，其特点是利用引文来检索学术文献。这种检索方法的创立者是</p><p>A 普赖斯 <strong>B 加菲尔德</strong> C 默顿 D 赖特</p></li><li><p>《科学引文索引》 正式刊行于哪一年？</p><p>A 1960 年 B 1962 年 <strong>C 1964 年</strong> D 1966 年</p></li><li><p>研究表明， 每篇科学论文平均引证参考文献数目大约是</p><p>A 10 篇 <strong>B 15 篇</strong> C 20 篇 D 25 篇</p></li><li><p>在任何一年里，大约有 35% 的论文不曾被任何文献引用，只被引用 1 次的论文约占论文总数的</p><p>A 16% B 30% <strong>C 49%</strong> D 60%</p></li><li><p>普赖斯认为，除评论性文章之外，凡每年被引证多少次以上的论文，即可列为 “ 经典文献 ” ？</p><p>A 2 次 B 3 次 <strong>C 4 次</strong> D 5 次</p></li><li><p>影响因子是指某一期刊（ ）发表的所有论文数与该年这些论文被引用的总次数的比值</p><p>A 前 1 年内 <strong>B 前 2 年内</strong> C 前 3 年内 D 前 4 年内</p></li><li><p>最早提出世界科学活动中心概念并描述其转移情况的是</p><p>A ．汤浅光朝 B ．赵红洲 <strong>C ．贝尔纳</strong> D ．普赖斯</p></li><li><p>最早成立技术专门教育机构的西方国家是</p><p>A 英国 <strong>B 法国</strong> C 德国 D 美国</p></li><li><p>最早创建国立科学研究机构的西方国家是</p><p>A 英国 B 法国 <strong>C 德国</strong> D 美国</p></li><li><p>美国什么时候开始成长为世界科学活动中心的？</p><p>A 南北战争后 B 20 世纪初 <strong>C 第 1 次世界大战后</strong> D 第 2 次世界大战后</p></li><li><p>在中国近现代科技发展的三个阶段中，体制形成阶段是 。</p><p>A. 从 1840 年到 1919 年 B. 从 1912 年到 1949 年</p><p>C. 从 1919 年到 1949 年 <strong>D. 从 1928 年到 1956 年</strong></p></li><li><p>中国近现代科技发展被划分为三个阶段，其中一个阶段主要是完成了心态转变。这个阶段是指 。</p><p><strong>A. 启蒙期</strong> B. 形成期 C. 现代发展期 D. 非 A 非 B 非 C</p></li><li><p>中国近现代科技发展被划分为启蒙期、形成期和现代发展期三个阶段，现代发展期开始的标志性事件是 。</p><p>A. 戊戌维新运动 B. 五四运动兴起 C. 中华人民共和国成立</p><p><strong>D. 全国十二年（ 1956-1967 ）科学发展远景规划的制定</strong></p></li><li><p>洋务运动科技引进的首要内容是 。</p><p>A. 科技翻译 B. 科技教育 <strong>C. 军用技术</strong> D. 民用技术</p></li><li><p>严复、康有为、梁启超等维新领袖在 1895 年至 1903 年的维新运动时期 。</p><p><strong>A. 大力提倡和宣传科学</strong> B. 竭力反对科学 C. 不关心科学 D. 既提倡又反对科学</p></li><li><p>最早在中文里使用 “ 科学 ” 一词。</p><p>A. 郭嵩焘 <strong>B. 康有为</strong> C. 梁启超 D. 严复</p></li><li><p>在中国人中间最早从科学方法、科学精神层面去认识和宣传科学的是 。</p><p>A. 陈独秀 B. 毛泽东 C. 孙中山 <strong>D. 严复</strong></p></li><li><p>中国相对更接近世界科学前沿的研究领域是 。</p><p><strong>A. 基础研究领域</strong> B 应用研究领域 C. 技术开发领域 D. 都一样</p></li><li><p>国家技术创新体系中最核心的是 。</p><p>A. 政府的支持和国家政策 B. 科技和教育部门</p><p><strong>C. 企业创新系统</strong> D. 基础设施和创新环境</p></li><li><p>库恩的范式包括</p><p><strong>A.基本的科学理论</strong>B.形而上学假定C.解难题的示范方法 D. A+B+C</p></li><li><p>“科学”这个词最初出现在哪个</p><p>A.洋务运动<strong>B.戊戌维新运动</strong>C.辛亥革命D.五四新文化运动</p></li><li><p>世界科学活动中心是按以下顺序转移的<br><strong>A意大利——英国——法国——德国——美国</strong><br>B英国——意大利——德国——法国——美国<br>C法国——意大利——英国——德国——美国</p></li></ol>]]></content>
      
      
      <categories>
          
          <category> note </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 自然辩证法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>LeetCode42</title>
      <link href="/2023/10/31/LeetCode42/"/>
      <url>/2023/10/31/LeetCode42/</url>
      
        <content type="html"><![CDATA[<h3 id="42-接雨水"><a href="#42-接雨水" class="headerlink" title="42. 接雨水"></a><a href="https://leetcode.cn/problems/trapping-rain-water/">42. 接雨水</a></h3><p>题目描述略</p><h4 id="1、按行求"><a href="#1、按行求" class="headerlink" title="1、按行求"></a>1、按行求</h4><p>这个方法会超时，不过思路很好</p><p>求第i层的水，遍历每个位置，如果当前高度小于i，而且两边都有高度大于等于i的，说明这个地方有水</p><p><span class="github-emoji"><span>💧</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f4a7.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span></p><p>但注意，第一次要先找到大于等于i的之后再开始计数</p><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">class Solution {public:    int trap(vector&lt;int&gt;&amp; height) {     int res = 0;     int maxheight = *max_element(height.begin(),height.end());     for(int i = 1;i &lt;= maxheight;i++){        bool isStart = false;             //标记是否开始更新temp        int temp = 0;        for(int j = 0;j &lt; height.size();j++){            if(isStart&amp;&amp;height[j] &lt; i){                temp++;            }            if(height[j] &gt;= i){          //当首次遇到大于等于该层高度的墙，开始更新temp                res+=temp;                temp = 0;                isStart = true;            }        }     }     return res;    }};<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="2、按列求"><a href="#2、按列求" class="headerlink" title="2、按列求"></a>2、按列求</h4><p>同超时</p><p>对于当前正在求的列的高度i，查找当前列两端最高的列的高度，取其中较小的min，比较i与其大小，如果i &gt;= min,那么该列必定存不了水，如果i &lt; min,该列存水量为min-i</p><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">class Solution {public:    int trap(vector&lt;int&gt;&amp; height) {     int res = 0;     for(int i = 1;i &lt; height.size()-1;i++){         int leftMaxheight = 0;         for(int j = i-1;j &gt;= 0;j--){             if(height[j] &gt; leftMaxheight)             leftMaxheight = height[j];         }         int rightMaxheight = 0;         for(int j = i+1;j &lt; height.size();j++){             if(rightMaxheight &lt; height[j])             rightMaxheight = height[j];         }         int k = min(leftMaxheight,rightMaxheight);         if(k &gt; height[i])         res += k-height[i];     }          return res;    }};<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="3、动态规划"><a href="#3、动态规划" class="headerlink" title="3、动态规划"></a>3、动态规划</h4><p>改进一下方法二，把当前列左边和右边最高列存起来，不用每次都遍历</p><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">class Solution {public:    int trap(vector&lt;int&gt;&amp; height) {     int res = 0;     int *max_left = new int[height.size()];     int * max_right = new int[height.size()];     for(int i = 1;i &lt; height.size()-1;i++){         max_left[i] = max(max_left[i-1],height[i-1]);     }      for(int i = height.size()-2;i &gt;=0;i--){         max_right[i] = max(max_right[i+1],height[i+1]);     }        for(int i = 1;i &lt; height.size()-1;i++){         int k = min(max_left[i],max_right[i]);         if(k &gt; height[i])         res += k-height[i];     }          return res;    }};<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>不超时了<span class="github-emoji"><span>😀</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f600.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span></p>]]></content>
      
      
      <categories>
          
          <category> Basic </category>
          
      </categories>
      
      
        <tags>
            
            <tag> LeetCode </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>用bat批处理文件便捷创建笔记</title>
      <link href="/2023/10/30/%E7%94%A8bat%E6%89%B9%E5%A4%84%E7%90%86%E6%96%87%E4%BB%B6%E4%BE%BF%E6%8D%B7%E5%88%9B%E5%BB%BA%E7%AC%94%E8%AE%B0/"/>
      <url>/2023/10/30/%E7%94%A8bat%E6%89%B9%E5%A4%84%E7%90%86%E6%96%87%E4%BB%B6%E4%BE%BF%E6%8D%B7%E5%88%9B%E5%BB%BA%E7%AC%94%E8%AE%B0/</url>
      
        <content type="html"><![CDATA[<h3 id="有更新🐒↓"><a href="#有更新🐒↓" class="headerlink" title="有更新🐒↓"></a>有更新🐒↓</h3><p>使用Hexo+GitHub+Typora搭建博客后，感觉创建笔记好麻烦，计划用bat批处理程序帮忙解决，奈何是在不熟悉，就用python写了，然后再用bat执行python文件</p><blockquote><p>需求：</p></blockquote><p>1.打开cmd，进入指定文件夹</p><p>2.输入文件名</p><p>3.向cmd中自动输入 hexo new “文件名”，然后执行</p><p>4.打开创建好的md文件</p><p>5.上传写好的笔记</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">import subprocessimport time# 指定目录路径directory_path = r"D:\\personalFile\Blog\source\\_posts"  # 将其替换为你希望进入的目录路径# 构建打开 cmd 并进入目录的命令cmd_command = f"cmd /K cd /d {directory_path}"# 提示用户输入参数filename = input("请输入参数：")command = "hexo new" + " \"" +filename + "\""# 使用 subprocess 打开 cmd 并进入目录cmd_process = subprocess.Popen(cmd_command, shell=True, stdin=subprocess.PIPE,encoding='gbk')# 向 cmd 中发送用户输入的参数cmd_process.stdin.write(command + '\n')cmd_process.stdin.flush()time.sleep(5)# 使用默认关联的软件打开文件file_path = "D:\personalFile\Blog\source\_posts\\" + filename + ".md"app_path = "D:\Program Files\Typora\Typora.exe"subprocess.Popen([app_path,file_path])<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>file_path和app_path替换成自己的</p><p>time.sleep(5)感觉挺蠢的，不过暂时不知道怎么让它执行完cmd之后再执行下一条程序</p><p>然后编写bat文件</p><p>打开记事本输入</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">@echo offcd /d "python文件路径" python 文件名.pyexit<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>创建都有了，在来个上传</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">@echo offcd /d "存放笔记的文件夹目录"hexo cl &amp;&amp; hexo g &amp;&amp;  hexo d<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p><span class="github-emoji"><span>😏</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f60f.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span></p><p><span class="github-emoji"><span>😎</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f60e.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span></p><p>测试一下emoji语法嘿嘿</p><blockquote><p>更新</p></blockquote><p>首先sleep(5)很蠢，可以用while循环查询该文件是否创建好就可以了</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">import subprocessimport timeimport os# 指定目录路径directory_path = r"D:\\personalFile\Blog\source\\_posts"  # 将其替换为你希望进入的目录路径# 构建打开 cmd 并进入目录的命令cmd_command = f"cmd /K cd /d {directory_path}"# 提示用户输入参数filename = input("请输入参数：")user_input = "hexo new" + " \"" +filename + "\""# 使用 subprocess 打开 cmd 并进入目录cmd_process = subprocess.Popen(cmd_command, shell=True, stdin=subprocess.PIPE,encoding='gbk')# 向 cmd 中发送用户输入的参数cmd_process.stdin.write(user_input + '\n')cmd_process.stdin.flush()filename_new = filename.replace(' ','-')while(os.path.exists("D:\personalFile\Blog\source\_posts\\" + filename_new + ".md") == False):    time.sleep(1)# 使用默认关联的软件打开文件file_path = "D:\personalFile\Blog\source\_posts\\" + filename_new + ".md"app_path = "D:\Program Files\Typora\Typora.exe"subprocess.Popen([app_path,file_path])<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> CStechnology </category>
          
      </categories>
      
      
        <tags>
            
            <tag> bat </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>在看什么</title>
      <link href="/2023/10/30/%E5%9C%A8%E7%9C%8B%E4%BB%80%E4%B9%88/"/>
      <url>/2023/10/30/%E5%9C%A8%E7%9C%8B%E4%BB%80%E4%B9%88/</url>
      
        <content type="html"><![CDATA[<h2 id="一、《性教育》-Sex-Education💕🥰😍"><a href="#一、《性教育》-Sex-Education💕🥰😍" class="headerlink" title="一、《性教育》 Sex Education💕🥰😍"></a>一、《性教育》 Sex Education💕🥰😍</h2><img src="/2023/10/30/%E5%9C%A8%E7%9C%8B%E4%BB%80%E4%B9%88/p2544326508.webp" class="" title="p2544326508"><p><a href="https://www.aliyundrive.com/s/cgrybUWpb4o">Sex Education</a><br>提取码: 2d8W</p><h2 id="二、《两杆大烟枪》⚔️"><a href="#二、《两杆大烟枪》⚔️" class="headerlink" title="二、《两杆大烟枪》⚔️"></a>二、《两杆大烟枪》⚔️</h2><img src="/2023/10/30/%E5%9C%A8%E7%9C%8B%E4%BB%80%E4%B9%88/p2554608958.webp" class="" title="img"><p><a href="https://www.aliyundrive.com/s/qA85wEM82ys">两杆大烟枪.1998.1080P.中字.FS24P.mkv </a></p><h2 id="三、《无耻混蛋》🐻"><a href="#三、《无耻混蛋》🐻" class="headerlink" title="三、《无耻混蛋》🐻"></a>三、《无耻混蛋》🐻</h2><img src="/2023/10/30/%E5%9C%A8%E7%9C%8B%E4%BB%80%E4%B9%88/p469992240.webp" class="" title="img"><p><a href="https://www.aliyundrive.com/s/BGBphNaKwP1">无耻混蛋</a><br>提取码: MhyE</p><h2 id="四、同学麦娜丝🫂"><a href="#四、同学麦娜丝🫂" class="headerlink" title="四、同学麦娜丝🫂"></a>四、同学麦娜丝🫂</h2><img src="/2023/10/30/%E5%9C%A8%E7%9C%8B%E4%BB%80%E4%B9%88/p2633990412.webp" class="" title="img"><p><a href="https://www.aliyundrive.com/s/CBPKsHimaVY">同学麦娜丝.mp4</a><br>提取码: Dr4D</p><h2 id="五、晒后假日🤿"><a href="#五、晒后假日🤿" class="headerlink" title="五、晒后假日🤿"></a>五、晒后假日🤿</h2><img src="/2023/10/30/%E5%9C%A8%E7%9C%8B%E4%BB%80%E4%B9%88/p2891871822.webp" class="" title="img"><p><a href="https://www.aliyundrive.com/s/iEgcHbjVJVo">晒后假日.Aftersun.2022.1080p…AC2.0.x264-远鉴字幕组.mp4</a><br>提取码: VCsT</p><p>“我很爱你，但我已经没法爱我自己了”</p><h2 id="六、廊桥遗梦🪶"><a href="#六、廊桥遗梦🪶" class="headerlink" title="六、廊桥遗梦🪶"></a>六、廊桥遗梦🪶</h2><img src="/2023/10/30/%E5%9C%A8%E7%9C%8B%E4%BB%80%E4%B9%88/p910544972.webp" class="" title="img"><p><a href="https://www.aliyundrive.com/s/To5EoNvnxnX">廊桥遗梦.mkv</a></p><p>提取码: siGh</p>]]></content>
      
      
      <categories>
          
          <category> 娱乐 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> movies </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>test2</title>
      <link href="/2023/10/30/test2/"/>
      <url>/2023/10/30/test2/</url>
      
        <content type="html"><![CDATA[<p>121211122</p><p>1121212</p><p>上厕所VSvv</p>]]></content>
      
      
      
        <tags>
            
            <tag> 测试 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/2023/10/30/hello-world/"/>
      <url>/2023/10/30/hello-world/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ hexo new "My New Post"<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ hexo server<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ hexo generate<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ hexo deploy<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
